{"version":3,"sources":["webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/mastodon/features/account_timeline/index.js"],"names":["emptyList","ImmutableList","AccountTimeline","connect","state","_ref","accountId","params","_ref$withReplies","withReplies","path","statusIds","getIn","featuredStatusIds","isLoading","hasMore","blockedBy","maxId","_this","props","dispatch","expandAccountTimeline","componentWillMount","_this$props","this","fetchAccount","fetchAccountIdentityProofs","expandAccountFeaturedTimeline","componentWillReceiveProps","nextProps","render","_this$props2","shouldUpdateScroll","Object","_babel_runtime_helpers_esm_jsx__WEBPACK_IMPORTED_MODULE_0__","_ui_components_column__WEBPACK_IMPORTED_MODULE_12__","_components_loading_indicator__WEBPACK_IMPORTED_MODULE_11__","emptyMessage","react_intl__WEBPACK_IMPORTED_MODULE_17__","id","defaultMessage","_components_column_back_button__WEBPACK_IMPORTED_MODULE_14__","_components_status_list__WEBPACK_IMPORTED_MODULE_10__","prepend","_containers_header_container__WEBPACK_IMPORTED_MODULE_13__","alwaysPrepend","scrollKey","onLoadMore","handleLoadMore","ImmutablePureComponent","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"0TAgBMA,EAAYC,iBAeZC,EADUC,kBAZQ,SAACC,EAADC,GAA2D,IAAvCC,EAAuCD,EAAjDE,OAAUD,UAAuCE,EAAAH,EAA1BI,mBAA0B,IAAAD,KAC3EE,EAAOD,EAAiBH,EAAN,gBAAiCA,EAEzD,MAAO,CACLK,UAAWP,EAAMQ,MAAM,CAAC,YAAD,WAAyBF,EAAQ,SAAUV,GAClEa,kBAAmBJ,EAAcR,iBAAkBG,EAAMQ,MAAM,CAAC,YAAD,WAAyBN,EAAzB,UAA6C,SAAUN,GACtHc,UAAWV,EAAMQ,MAAM,CAAC,YAAD,WAAyBF,EAAQ,cACxDK,QAASX,EAAMQ,MAAM,CAAC,YAAD,WAAyBF,EAAQ,YACtDM,UAAWZ,EAAMQ,MAAM,CAAC,gBAAiBN,EAAW,eAAe,0MA6CpD,SAAAW,GACfC,EAAKC,MAAMC,SAASC,YAAsBH,EAAKC,MAAMZ,OAAOD,UAAW,CAAEW,QAAOR,YAAaS,EAAKC,MAAMV,+DA3B1Ga,mBAAA,WAAsB,IAAAC,EAC2BC,KAAKL,MAAlCb,EADEiB,EACZhB,OAAUD,UAAaG,EADXc,EACWd,YAE/Be,KAAKL,MAAMC,SAASK,YAAanB,IACjCkB,KAAKL,MAAMC,SAASM,YAA2BpB,IAE1CG,GACHe,KAAKL,MAAMC,SAASO,YAA8BrB,IAGpDkB,KAAKL,MAAMC,SAASC,YAAsBf,EAAW,CAAEG,oBAGzDmB,0BAAA,SAA2BC,IACpBA,EAAUtB,OAAOD,YAAckB,KAAKL,MAAMZ,OAAOD,WAAauB,EAAUtB,OAAOD,WAAcuB,EAAUpB,cAAgBe,KAAKL,MAAMV,eACrIe,KAAKL,MAAMC,SAASK,YAAaI,EAAUtB,OAAOD,YAClDkB,KAAKL,MAAMC,SAASM,YAA2BG,EAAUtB,OAAOD,YAE3DuB,EAAUpB,aACbe,KAAKL,MAAMC,SAASO,YAA8BE,EAAUtB,OAAOD,YAGrEkB,KAAKL,MAAMC,SAASC,YAAsBQ,EAAUtB,OAAOD,UAAW,CAAEG,YAAaoB,EAAUtB,OAAOE,mBAQ1GqB,OAAA,WAAU,IAAAC,EACoFP,KAAKL,MAAzFa,EADAD,EACAC,mBAAoBrB,EADpBoB,EACoBpB,UAAWE,EAD/BkB,EAC+BlB,kBAAmBC,EADlDiB,EACkDjB,UAAWC,EAD7DgB,EAC6DhB,QAASC,EADtEe,EACsEf,UAE9E,IAAKL,GAAaG,EAChB,OACEmB,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,UACEF,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,KAKN,IAAMC,EAAerB,EAAYiB,OAAAC,EAAA,EAAAD,CAACK,EAAA,EAAD,CAAkBC,GAAG,wCAAwCC,eAAe,oBAAuBP,OAAAC,EAAA,EAAAD,CAACK,EAAA,EAAD,CAAkBC,GAAG,gCAAgCC,eAAe,mBAExM,OACEP,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,UACEF,OAAAC,EAAA,EAAAD,CAACQ,EAAA,EAAD,IAEAR,OAAAC,EAAA,EAAAD,CAACS,EAAA,EAAD,CACEC,QAASV,OAAAC,EAAA,EAAAD,CAACW,EAAA,EAAD,CAAiBtC,UAAWkB,KAAKL,MAAMZ,OAAOD,YACvDuC,eAAa,EACbC,UAAU,mBACVnC,UAAWK,EAAYhB,EAAYW,EACnCE,kBAAmBA,EACnBC,UAAWA,EACXC,QAASA,EACTgC,WAAYvB,KAAKwB,eACjBhB,mBAAoBA,EACpBK,aAAcA,SAvEMY,+BAET,CACjB1C,OAAQ2C,IAAUC,OAAOC,WACzBhC,SAAU8B,IAAUG,KAAKD,WACzBpB,mBAAoBkB,IAAUG,KAC9B1C,UAAW2C,IAAmBC,KAC9B1C,kBAAmByC,IAAmBC,KACtCzC,UAAWoC,IAAUM,KACrBzC,QAASmC,IAAUM,KACnB/C,YAAayC,IAAUM,KACvBxC,UAAWkC,IAAUM","file":"features/account_timeline.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { fetchAccount } from '../../actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from '../../actions/timelines';\nimport StatusList from '../../components/status_list';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport HeaderContainer from './containers/header_container';\nimport ColumnBackButton from '../../components/column_back_button';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { FormattedMessage } from 'react-intl';\nimport { fetchAccountIdentityProofs } from '../../actions/identity_proofs';\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { accountId }, withReplies = false }) => {\n  const path = withReplies ? `${accountId}:with_replies` : accountId;\n\n  return {\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], emptyList),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned`, 'items'], emptyList),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore: state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false),\n  };\n};\n\nexport default @connect(mapStateToProps)\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    shouldUpdateScroll: PropTypes.func,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    blockedBy: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    const { params: { accountId }, withReplies } = this.props;\n\n    this.props.dispatch(fetchAccount(accountId));\n    this.props.dispatch(fetchAccountIdentityProofs(accountId));\n\n    if (!withReplies) {\n      this.props.dispatch(expandAccountFeaturedTimeline(accountId));\n    }\n\n    this.props.dispatch(expandAccountTimeline(accountId, { withReplies }));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if ((nextProps.params.accountId !== this.props.params.accountId && nextProps.params.accountId) || nextProps.withReplies !== this.props.withReplies) {\n      this.props.dispatch(fetchAccount(nextProps.params.accountId));\n      this.props.dispatch(fetchAccountIdentityProofs(nextProps.params.accountId));\n\n      if (!nextProps.withReplies) {\n        this.props.dispatch(expandAccountFeaturedTimeline(nextProps.params.accountId));\n      }\n\n      this.props.dispatch(expandAccountTimeline(nextProps.params.accountId, { withReplies: nextProps.params.withReplies }));\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.params.accountId, { maxId, withReplies: this.props.withReplies }));\n  }\n\n  render () {\n    const { shouldUpdateScroll, statusIds, featuredStatusIds, isLoading, hasMore, blockedBy } = this.props;\n\n    if (!statusIds && isLoading) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = blockedBy ? <FormattedMessage id='empty_column.account_timeline_blocked' defaultMessage='You are blocked' /> : <FormattedMessage id='empty_column.account_timeline' defaultMessage='No toots here!' />;\n\n    return (\n      <Column>\n        <ColumnBackButton />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.params.accountId} />}\n          alwaysPrepend\n          scrollKey='account_timeline'\n          statusIds={blockedBy ? emptyList : statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={hasMore}\n          onLoadMore={this.handleLoadMore}\n          shouldUpdateScroll={shouldUpdateScroll}\n          emptyMessage={emptyMessage}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
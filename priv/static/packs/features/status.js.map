{"version":3,"sources":["webpack:///app/javascript/tank/sources/git/git.pleroma.social/pleroma/mastofe/app/javascript/mastodon/features/status/components/detailed_status.js","webpack:///app/javascript/tank/sources/git/git.pleroma.social/pleroma/mastofe/app/javascript/mastodon/features/status/components/action_bar.js","webpack:///app/javascript/tank/sources/git/git.pleroma.social/pleroma/mastofe/app/javascript/mastodon/features/status/index.js"],"names":["DetailedStatus","height","e","button","ctrlKey","metaKey","context","router","preventDefault","history","push","props","status","getIn","stopPropagation","media","startTime","onOpenVideo","onToggleHidden","c","node","_measureHeight","href","target","nodeName","parentNode","window","open","heightJustChanged","this","measureHeight","scheduleIdleTask","setState","Math","ceil","scrollHeight","onHeightChange","componentDidUpdate","prevProps","prevState","state","render","get","outerStyle","boxSizing","compact","applicationLink","reblogLink","reblogIcon","favouriteLink","size","attachment","src","alt","duration","preload","preview","blurhash","width","inline","handleOpenVideo","sensitive","visible","showMedia","onToggleVisibility","onToggleMediaVisibility","standalone","onOpenMedia","length","card","className","rel","id","to","value","onClick","handleModalLink","style","ref","setRef","classNames","handleAccountClick","account","localDomain","domain","expanded","onExpandedToggle","handleExpandedToggle","Date","hour12","year","month","day","hour","minute","ImmutablePureComponent","PropTypes","object","ImmutablePropTypes","map","func","isRequired","bool","string","messages","defineMessages","delete","redraft","direct","mention","reply","reblog","reblog_private","cancel_reblog_private","cannot_reblog","favourite","bookmark","mute","muteConversation","unmuteConversation","block","report","share","pin","unpin","embed","admin_account","admin_status","copy","blockDomain","unblockDomain","unmute","unblock","ActionBar","connect","relationship","injectIntl","onReply","onReblog","onFavourite","onBookmark","onDelete","onDirect","onMention","onMute","onUnmute","onBlock","onUnblock","onBlockDomain","split","onUnblockDomain","onMuteConversation","onReport","onPin","navigator","text","url","onEmbed","textarea","document","createElement","textContent","position","body","appendChild","select","execCommand","removeChild","intl","publicStatus","includes","mutingConversation","menu","formatMessage","action","handleCopy","handleEmbed","me","handlePinClick","handleReblogClick","handleConversationMuteClick","handleDeleteClick","handleRedraftClick","name","handleMentionClick","handleDirectClick","handleMuteClick","handleBlockClick","handleReport","handleUnblockDomain","handleBlockDomain","isStaff","replyIcon","shareButton","title","icon","handleShare","reblog_disabled","handleReplyClick","disabled","active","animate","handleFavouriteClick","handleBookmarkClick","items","direction","React","PureComponent","deleteConfirm","deleteMessage","redraftConfirm","redraftMessage","revealAll","hideAll","detailedStatus","replyConfirm","replyMessage","blockDomainConfirm","Status","getStatus","makeGetStatus","getAncestorsIds","createSelector","_","statusId","inReplyTos","ancestorsIds","Immutable","List","withMutations","mutable","unshift","getDescendantsIds","contextReplies","statuses","descendantsIds","ids","shift","replies","reverse","forEach","insertAt","findIndex","idx","splice","params","askReplyConfirmation","trim","fullscreen","defaultMediaVisibility","loadedStatusId","undefined","dispatch","unfavourite","openModal","message","confirm","onConfirm","replyCompose","unreblog","shiftKey","boostModal","handleModalReblog","unbookmark","withRedraft","deleteModal","deleteStatus","directCompose","mentionCompose","index","time","_properStatus","handleOpenMedia","initMuteModal","unmuteStatus","muteStatus","revealStatus","hideStatus","statusIds","concat","toJS","initBlockModal","initReport","unmuteAccount","unblockAccount","defaultMessage","values","handleMoveUp","handleMoveDown","handleToggleHidden","handleToggleMediaVisibility","_selectChild","indexOf","isFullscreen","componentWillMount","fetchStatus","componentDidMount","attachFullscreenListener","onFullScreenChange","componentWillReceiveProps","nextProps","_scrolledIntoView","align_top","container","element","querySelectorAll","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","renderChildren","list","onMoveUp","onMoveDown","contextType","requestAnimationFrame","componentWillUnmount","detachFullscreenListener","ancestors","descendants","shouldUpdateScroll","multiColumn","handlers","moveUp","handleHotkeyMoveUp","moveDown","handleHotkeyMoveDown","handleHotkeyReply","handleHotkeyFavourite","boost","handleHotkeyBoost","handleHotkeyMention","openProfile","handleHotkeyOpenProfile","toggleHidden","handleHotkeyToggleHidden","toggleSensitive","handleHotkeyToggleSensitive","openMedia","handleHotkeyOpenMedia","bindToDocument","label","showBackButton","extraButton","aria-label","handleToggleAll","aria-pressed","scrollKey","tabIndex","textForScreenReader","handleUnmuteClick","handleUnblockClick","handleBlockDomainClick","handleUnblockDomainClick","handlePin"],"mappings":"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","file":"features/status.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport StatusContent from '../../../components/status_content';\nimport MediaGallery from '../../../components/media_gallery';\nimport { Link } from 'react-router-dom';\nimport { FormattedDate, FormattedNumber } from 'react-intl';\nimport Card from './card';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Video from '../../video';\nimport Audio from '../../audio';\nimport scheduleIdleTask from '../../ui/util/schedule_idle_task';\nimport classNames from 'classnames';\nimport Icon from 'mastodon/components/icon';\n\nexport default class DetailedStatus extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map,\n    onOpenMedia: PropTypes.func.isRequired,\n    onOpenVideo: PropTypes.func.isRequired,\n    onToggleHidden: PropTypes.func.isRequired,\n    measureHeight: PropTypes.bool,\n    onHeightChange: PropTypes.func,\n    domain: PropTypes.string.isRequired,\n    compact: PropTypes.bool,\n    showMedia: PropTypes.bool,\n    onToggleMediaVisibility: PropTypes.func,\n  };\n\n  state = {\n    height: null,\n  };\n\n  handleAccountClick = (e) => {\n    if (e.button === 0 && !(e.ctrlKey || e.metaKey) && this.context.router) {\n      e.preventDefault();\n      this.context.router.history.push(`/accounts/${this.props.status.getIn(['account', 'id'])}`);\n    }\n\n    e.stopPropagation();\n  }\n\n  handleOpenVideo = (media, startTime) => {\n    this.props.onOpenVideo(media, startTime);\n  }\n\n  handleExpandedToggle = () => {\n    this.props.onToggleHidden(this.props.status);\n  }\n\n  _measureHeight (heightJustChanged) {\n    if (this.props.measureHeight && this.node) {\n      scheduleIdleTask(() => this.node && this.setState({ height: Math.ceil(this.node.scrollHeight) + 1 }));\n\n      if (this.props.onHeightChange && heightJustChanged) {\n        this.props.onHeightChange();\n      }\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n    this._measureHeight();\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    this._measureHeight(prevState.height !== this.state.height);\n  }\n\n  handleModalLink = e => {\n    e.preventDefault();\n\n    let href;\n\n    if (e.target.nodeName !== 'A') {\n      href = e.target.parentNode.href;\n    } else {\n      href = e.target.href;\n    }\n\n    window.open(href, 'mastodon-intent', 'width=445,height=600,resizable=no,menubar=no,status=no,scrollbars=yes');\n  }\n\n  render () {\n    const status = (this.props.status && this.props.status.get('reblog')) ? this.props.status.get('reblog') : this.props.status;\n    const outerStyle = { boxSizing: 'border-box' };\n    const { compact } = this.props;\n\n    if (!status) {\n      return null;\n    }\n\n    let media           = '';\n    let applicationLink = '';\n    let reblogLink = '';\n    let reblogIcon = 'retweet';\n    let favouriteLink = '';\n\n    if (this.props.measureHeight) {\n      outerStyle.height = `${this.state.height}px`;\n    }\n\n    if (status.get('media_attachments').size > 0) {\n      if (status.getIn(['media_attachments', 0, 'type']) === 'audio') {\n        const attachment = status.getIn(['media_attachments', 0]);\n\n        media = (\n          <Audio\n            src={attachment.get('url')}\n            alt={attachment.get('description')}\n            duration={attachment.getIn(['meta', 'original', 'duration'], 0)}\n            height={110}\n            preload\n          />\n        );\n      } else if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        const attachment = status.getIn(['media_attachments', 0]);\n\n        media = (\n          <Video\n            preview={attachment.get('preview_url')}\n            blurhash={attachment.get('blurhash')}\n            src={attachment.get('url')}\n            alt={attachment.get('description')}\n            width={300}\n            height={150}\n            inline\n            onOpenVideo={this.handleOpenVideo}\n            sensitive={status.get('sensitive')}\n            visible={this.props.showMedia}\n            onToggleVisibility={this.props.onToggleMediaVisibility}\n          />\n        );\n      } else {\n        media = (\n          <MediaGallery\n            standalone\n            sensitive={status.get('sensitive')}\n            media={status.get('media_attachments')}\n            height={300}\n            onOpenMedia={this.props.onOpenMedia}\n            visible={this.props.showMedia}\n            onToggleVisibility={this.props.onToggleMediaVisibility}\n          />\n        );\n      }\n    } else if (status.get('spoiler_text').length === 0) {\n      media = <Card onOpenMedia={this.props.onOpenMedia} card={status.get('card', null)} />;\n    }\n\n    if (status.get('application')) {\n      applicationLink = <span> · <a className='detailed-status__application' href={status.getIn(['application', 'website'])} target='_blank' rel='noopener noreferrer'>{status.getIn(['application', 'name'])}</a></span>;\n    }\n\n    if (status.get('visibility') === 'direct') {\n      reblogIcon = 'envelope';\n    } else if (status.get('visibility') === 'private') {\n      reblogIcon = 'lock';\n    }\n\n    if (status.get('visibility') === 'private') {\n      reblogLink = <Icon id={reblogIcon} />;\n    } else if (this.context.router) {\n      reblogLink = (\n        <Link to={`/statuses/${status.get('id')}/reblogs`} className='detailed-status__link'>\n          <Icon id={reblogIcon} />\n          <span className='detailed-status__reblogs'>\n            <FormattedNumber value={status.get('reblogs_count')} />\n          </span>\n        </Link>\n      );\n    } else {\n      reblogLink = (\n        <a href={`/interact/${status.get('id')}?type=reblog`} className='detailed-status__link' onClick={this.handleModalLink}>\n          <Icon id={reblogIcon} />\n          <span className='detailed-status__reblogs'>\n            <FormattedNumber value={status.get('reblogs_count')} />\n          </span>\n        </a>\n      );\n    }\n\n    if (this.context.router) {\n      favouriteLink = (\n        <Link to={`/statuses/${status.get('id')}/favourites`} className='detailed-status__link'>\n          <Icon id='star' />\n          <span className='detailed-status__favorites'>\n            <FormattedNumber value={status.get('favourites_count')} />\n          </span>\n        </Link>\n      );\n    } else {\n      favouriteLink = (\n        <a href={`/interact/${status.get('id')}?type=favourite`} className='detailed-status__link' onClick={this.handleModalLink}>\n          <Icon id='star' />\n          <span className='detailed-status__favorites'>\n            <FormattedNumber value={status.get('favourites_count')} />\n          </span>\n        </a>\n      );\n    }\n\n    return (\n      <div style={outerStyle}>\n        <div ref={this.setRef} className={classNames('detailed-status', { compact })}>\n          <a href={status.getIn(['account', 'url'])} onClick={this.handleAccountClick} className='detailed-status__display-name'>\n            <div className='detailed-status__display-avatar'><Avatar account={status.get('account')} size={48} /></div>\n            <DisplayName account={status.get('account')} localDomain={this.props.domain} />\n          </a>\n\n          <StatusContent status={status} expanded={!status.get('hidden')} onExpandedToggle={this.handleExpandedToggle} />\n\n          {media}\n\n          <div className='detailed-status__meta'>\n            <a className='detailed-status__datetime' href={status.get('url')} target='_blank' rel='noopener noreferrer'>\n              <FormattedDate value={new Date(status.get('created_at'))} hour12={false} year='numeric' month='short' day='2-digit' hour='2-digit' minute='2-digit' />\n            </a>{applicationLink} · {reblogLink} · {favouriteLink}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport IconButton from '../../../components/icon_button';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport DropdownMenuContainer from '../../../containers/dropdown_menu_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { me, isStaff } from '../../../initial_state';\n\nconst messages = defineMessages({\n  delete: { id: 'status.delete', defaultMessage: 'Delete' },\n  redraft: { id: 'status.redraft', defaultMessage: 'Delete & re-draft' },\n  direct: { id: 'status.direct', defaultMessage: 'Direct message @{name}' },\n  mention: { id: 'status.mention', defaultMessage: 'Mention @{name}' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  reblog: { id: 'status.reblog', defaultMessage: 'Boost' },\n  reblog_private: { id: 'status.reblog_private', defaultMessage: 'Boost to original audience' },\n  cancel_reblog_private: { id: 'status.cancel_reblog_private', defaultMessage: 'Unboost' },\n  cannot_reblog: { id: 'status.cannot_reblog', defaultMessage: 'This post cannot be boosted' },\n  favourite: { id: 'status.favourite', defaultMessage: 'Favourite' },\n  bookmark: { id: 'status.bookmark', defaultMessage: 'Bookmark' },\n  mute: { id: 'status.mute', defaultMessage: 'Mute @{name}' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n  block: { id: 'status.block', defaultMessage: 'Block @{name}' },\n  report: { id: 'status.report', defaultMessage: 'Report @{name}' },\n  share: { id: 'status.share', defaultMessage: 'Share' },\n  pin: { id: 'status.pin', defaultMessage: 'Pin on profile' },\n  unpin: { id: 'status.unpin', defaultMessage: 'Unpin from profile' },\n  embed: { id: 'status.embed', defaultMessage: 'Embed' },\n  admin_account: { id: 'status.admin_account', defaultMessage: 'Open moderation interface for @{name}' },\n  admin_status: { id: 'status.admin_status', defaultMessage: 'Open this status in the moderation interface' },\n  copy: { id: 'status.copy', defaultMessage: 'Copy link to status' },\n  blockDomain: { id: 'account.block_domain', defaultMessage: 'Hide everything from {domain}' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unhide {domain}' },\n  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n});\n\nconst mapStateToProps = (state, { status }) => ({\n  relationship: state.getIn(['relationships', status.getIn(['account', 'id'])]),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ActionBar extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    relationship: ImmutablePropTypes.map,\n    onReply: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onBookmark: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onDirect: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onMute: PropTypes.func,\n    onUnmute: PropTypes.func,\n    onBlock: PropTypes.func,\n    onUnblock: PropTypes.func,\n    onBlockDomain: PropTypes.func,\n    onUnblockDomain: PropTypes.func,\n    onMuteConversation: PropTypes.func,\n    onReport: PropTypes.func,\n    onPin: PropTypes.func,\n    onEmbed: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleReplyClick = () => {\n    this.props.onReply(this.props.status);\n  }\n\n  handleReblogClick = (e) => {\n    this.props.onReblog(this.props.status, e);\n  }\n\n  handleFavouriteClick = () => {\n    this.props.onFavourite(this.props.status);\n  }\n\n  handleBookmarkClick = (e) => {\n    this.props.onBookmark(this.props.status, e);\n  }\n\n  handleDeleteClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history);\n  }\n\n  handleRedraftClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history, true);\n  }\n\n  handleDirectClick = () => {\n    this.props.onDirect(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMentionClick = () => {\n    this.props.onMention(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMuteClick = () => {\n    const { status, relationship, onMute, onUnmute } = this.props;\n    const account = status.get('account');\n\n    if (relationship && relationship.get('muting')) {\n      onUnmute(account);\n    } else {\n      onMute(account);\n    }\n  }\n\n  handleBlockClick = () => {\n    const { status, relationship, onBlock, onUnblock } = this.props;\n    const account = status.get('account');\n\n    if (relationship && relationship.get('blocking')) {\n      onUnblock(account);\n    } else {\n      onBlock(status);\n    }\n  }\n\n  handleBlockDomain = () => {\n    const { status, onBlockDomain } = this.props;\n    const account = status.get('account');\n\n    onBlockDomain(account.get('acct').split('@')[1]);\n  }\n\n  handleUnblockDomain = () => {\n    const { status, onUnblockDomain } = this.props;\n    const account = status.get('account');\n\n    onUnblockDomain(account.get('acct').split('@')[1]);\n  }\n\n  handleConversationMuteClick = () => {\n    this.props.onMuteConversation(this.props.status);\n  }\n\n  handleReport = () => {\n    this.props.onReport(this.props.status);\n  }\n\n  handlePinClick = () => {\n    this.props.onPin(this.props.status);\n  }\n\n  handleShare = () => {\n    navigator.share({\n      text: this.props.status.get('search_index'),\n      url: this.props.status.get('url'),\n    });\n  }\n\n  handleEmbed = () => {\n    this.props.onEmbed(this.props.status);\n  }\n\n  handleCopy = () => {\n    const url      = this.props.status.get('url');\n    const textarea = document.createElement('textarea');\n\n    textarea.textContent    = url;\n    textarea.style.position = 'fixed';\n\n    document.body.appendChild(textarea);\n\n    try {\n      textarea.select();\n      document.execCommand('copy');\n    } catch (e) {\n\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n\n  render () {\n    const { status, relationship, intl } = this.props;\n\n    const publicStatus = ['public', 'unlisted'].includes(status.get('visibility'));\n    const mutingConversation = status.get('muted');\n    const account            = status.get('account');\n\n    let menu = [];\n\n    if (publicStatus) {\n      menu.push({ text: intl.formatMessage(messages.copy), action: this.handleCopy });\n      menu.push({ text: intl.formatMessage(messages.embed), action: this.handleEmbed });\n      menu.push(null);\n    }\n\n    if (me === status.getIn(['account', 'id'])) {\n      if (publicStatus) {\n        menu.push({ text: intl.formatMessage(status.get('pinned') ? messages.unpin : messages.pin), action: this.handlePinClick });\n      } else {\n        if (status.get('visibility') === 'private') {\n          menu.push({ text: intl.formatMessage(status.get('reblogged') ? messages.cancel_reblog_private : messages.reblog_private), action: this.handleReblogClick });\n        }\n      }\n\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(mutingConversation ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMuteClick });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDeleteClick });\n      menu.push({ text: intl.formatMessage(messages.redraft), action: this.handleRedraftClick });\n    } else {\n      menu.push({ text: intl.formatMessage(messages.mention, { name: status.getIn(['account', 'username']) }), action: this.handleMentionClick });\n      menu.push({ text: intl.formatMessage(messages.direct, { name: status.getIn(['account', 'username']) }), action: this.handleDirectClick });\n      menu.push(null);\n\n      if (relationship && relationship.get('muting')) {\n        menu.push({ text: intl.formatMessage(messages.unmute, { name: account.get('username') }), action: this.handleMuteClick });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.mute, { name: account.get('username') }), action: this.handleMuteClick });\n      }\n\n      if (relationship && relationship.get('blocking')) {\n        menu.push({ text: intl.formatMessage(messages.unblock, { name: account.get('username') }), action: this.handleBlockClick });\n      } else {\n        menu.push({ text: intl.formatMessage(messages.block, { name: account.get('username') }), action: this.handleBlockClick });\n      }\n\n      menu.push({ text: intl.formatMessage(messages.report, { name: status.getIn(['account', 'username']) }), action: this.handleReport });\n\n      if (account.get('acct') !== account.get('username')) {\n        const domain = account.get('acct').split('@')[1];\n\n        menu.push(null);\n\n        if (relationship && relationship.get('domain_blocking')) {\n          menu.push({ text: intl.formatMessage(messages.unblockDomain, { domain }), action: this.handleUnblockDomain });\n        } else {\n          menu.push({ text: intl.formatMessage(messages.blockDomain, { domain }), action: this.handleBlockDomain });\n        }\n      }\n\n      if (isStaff) {\n        menu.push(null);\n        menu.push({ text: intl.formatMessage(messages.admin_account, { name: status.getIn(['account', 'username']) }), href: `/admin/accounts/${status.getIn(['account', 'id'])}` });\n        menu.push({ text: intl.formatMessage(messages.admin_status), href: `/admin/accounts/${status.getIn(['account', 'id'])}/statuses/${status.get('id')}` });\n      }\n    }\n\n    const shareButton = ('share' in navigator) && status.get('visibility') === 'public' && (\n      <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.share)} icon='share-alt' onClick={this.handleShare} /></div>\n    );\n\n    let replyIcon;\n    if (status.get('in_reply_to_id', null) === null) {\n      replyIcon = 'reply';\n    } else {\n      replyIcon = 'reply-all';\n    }\n\n    let reblogIcon = 'retweet';\n    if (status.get('visibility') === 'direct') reblogIcon = 'envelope';\n    else if (status.get('visibility') === 'private') reblogIcon = 'lock';\n\n    let reblog_disabled = (status.get('visibility') === 'direct' || status.get('visibility') === 'private');\n\n    return (\n      <div className='detailed-status__action-bar'>\n        <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.reply)} icon={status.get('in_reply_to_account_id') === status.getIn(['account', 'id']) ? 'reply' : replyIcon} onClick={this.handleReplyClick} /></div>\n        <div className='detailed-status__button'><IconButton disabled={reblog_disabled} active={status.get('reblogged')} title={reblog_disabled ? intl.formatMessage(messages.cannot_reblog) : intl.formatMessage(messages.reblog)} icon={reblogIcon} onClick={this.handleReblogClick} /></div>\n        <div className='detailed-status__button'><IconButton className='star-icon' animate active={status.get('favourited')} title={intl.formatMessage(messages.favourite)} icon='star' onClick={this.handleFavouriteClick} /></div>\n        {shareButton}\n        <div className='detailed-status__button'><IconButton className='bookmark-icon' active={status.get('bookmarked')} title={intl.formatMessage(messages.bookmark)} icon='bookmark' onClick={this.handleBookmarkClick} /></div>\n\n        <div className='detailed-status__action-bar-dropdown'>\n          <DropdownMenuContainer size={18} icon='ellipsis-h' status={status} items={menu} direction='left' title='More' />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import Immutable from 'immutable';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { createSelector } from 'reselect';\nimport { fetchStatus } from '../../actions/statuses';\nimport MissingIndicator from '../../components/missing_indicator';\nimport DetailedStatus from './components/detailed_status';\nimport ActionBar from './components/action_bar';\nimport Column from '../ui/components/column';\nimport {\n  favourite,\n  unfavourite,\n  bookmark,\n  unbookmark,\n  reblog,\n  unreblog,\n  pin,\n  unpin,\n} from '../../actions/interactions';\nimport {\n  replyCompose,\n  mentionCompose,\n  directCompose,\n} from '../../actions/compose';\nimport {\n  muteStatus,\n  unmuteStatus,\n  deleteStatus,\n  hideStatus,\n  revealStatus,\n} from '../../actions/statuses';\nimport {\n  unblockAccount,\n  unmuteAccount,\n} from '../../actions/accounts';\nimport {\n  blockDomain,\n  unblockDomain,\n} from '../../actions/domain_blocks';\nimport { initMuteModal } from '../../actions/mutes';\nimport { initBlockModal } from '../../actions/blocks';\nimport { initReport } from '../../actions/reports';\nimport { makeGetStatus } from '../../selectors';\nimport { ScrollContainer } from 'react-router-scroll-4';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ColumnHeader from '../../components/column_header';\nimport StatusContainer from '../../containers/status_container';\nimport { openModal } from '../../actions/modal';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport { boostModal, deleteModal } from '../../initial_state';\nimport { attachFullscreenListener, detachFullscreenListener, isFullscreen } from '../ui/util/fullscreen';\nimport { textForScreenReader, defaultMediaVisibility } from '../../components/status';\nimport Icon from 'mastodon/components/icon';\n\nconst messages = defineMessages({\n  deleteConfirm: { id: 'confirmations.delete.confirm', defaultMessage: 'Delete' },\n  deleteMessage: { id: 'confirmations.delete.message', defaultMessage: 'Are you sure you want to delete this status?' },\n  redraftConfirm: { id: 'confirmations.redraft.confirm', defaultMessage: 'Delete & redraft' },\n  redraftMessage: { id: 'confirmations.redraft.message', defaultMessage: 'Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned.' },\n  revealAll: { id: 'status.show_more_all', defaultMessage: 'Show more for all' },\n  hideAll: { id: 'status.show_less_all', defaultMessage: 'Show less for all' },\n  detailedStatus: { id: 'status.detailed_status', defaultMessage: 'Detailed conversation view' },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Hide entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  const getAncestorsIds = createSelector([\n    (_, { id }) => id,\n    state => state.getIn(['contexts', 'inReplyTos']),\n  ], (statusId, inReplyTos) => {\n    let ancestorsIds = Immutable.List();\n    ancestorsIds = ancestorsIds.withMutations(mutable => {\n      let id = statusId;\n\n      while (id) {\n        mutable.unshift(id);\n        id = inReplyTos.get(id);\n      }\n    });\n\n    return ancestorsIds;\n  });\n\n  const getDescendantsIds = createSelector([\n    (_, { id }) => id,\n    state => state.getIn(['contexts', 'replies']),\n    state => state.get('statuses'),\n  ], (statusId, contextReplies, statuses) => {\n    let descendantsIds = [];\n    const ids = [statusId];\n\n    while (ids.length > 0) {\n      let id        = ids.shift();\n      const replies = contextReplies.get(id);\n\n      if (statusId !== id) {\n        descendantsIds.push(id);\n      }\n\n      if (replies) {\n        replies.reverse().forEach(reply => {\n          ids.unshift(reply);\n        });\n      }\n    }\n\n    let insertAt = descendantsIds.findIndex((id) => statuses.get(id).get('in_reply_to_account_id') !== statuses.get(id).get('account'));\n    if (insertAt !== -1) {\n      descendantsIds.forEach((id, idx) => {\n        if (idx > insertAt && statuses.get(id).get('in_reply_to_account_id') === statuses.get(id).get('account')) {\n          descendantsIds.splice(idx, 1);\n          descendantsIds.splice(insertAt, 0, id);\n          insertAt += 1;\n        }\n      });\n    }\n\n    return Immutable.List(descendantsIds);\n  });\n\n  const mapStateToProps = (state, props) => {\n    const status = getStatus(state, { id: props.params.statusId });\n    let ancestorsIds = Immutable.List();\n    let descendantsIds = Immutable.List();\n\n    if (status) {\n      ancestorsIds = getAncestorsIds(state, { id: status.get('in_reply_to_id') });\n      descendantsIds = getDescendantsIds(state, { id: status.get('id') });\n    }\n\n    return {\n      status,\n      ancestorsIds,\n      descendantsIds,\n      askReplyConfirmation: state.getIn(['compose', 'text']).trim().length !== 0,\n      domain: state.getIn(['meta', 'domain']),\n    };\n  };\n\n  return mapStateToProps;\n};\n\nexport default @injectIntl\n@connect(makeMapStateToProps)\nclass Status extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    ancestorsIds: ImmutablePropTypes.list,\n    descendantsIds: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    askReplyConfirmation: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    domain: PropTypes.string.isRequired,\n  };\n\n  state = {\n    fullscreen: false,\n    showMedia: defaultMediaVisibility(this.props.status),\n    loadedStatusId: undefined,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchStatus(this.props.params.statusId));\n  }\n\n  componentDidMount () {\n    attachFullscreenListener(this.onFullScreenChange);\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this._scrolledIntoView = false;\n      this.props.dispatch(fetchStatus(nextProps.params.statusId));\n    }\n\n    if (nextProps.status && nextProps.status.get('id') !== this.state.loadedStatusId) {\n      this.setState({ showMedia: defaultMediaVisibility(nextProps.status), loadedStatusId: nextProps.status.get('id') });\n    }\n  }\n\n  handleToggleMediaVisibility = () => {\n    this.setState({ showMedia: !this.state.showMedia });\n  }\n\n  handleFavouriteClick = (status) => {\n    if (status.get('favourited')) {\n      this.props.dispatch(unfavourite(status));\n    } else {\n      this.props.dispatch(favourite(status));\n    }\n  }\n\n  handlePin = (status) => {\n    if (status.get('pinned')) {\n      this.props.dispatch(unpin(status));\n    } else {\n      this.props.dispatch(pin(status));\n    }\n  }\n\n  handleReplyClick = (status) => {\n    let { askReplyConfirmation, dispatch, intl } = this.props;\n    if (askReplyConfirmation) {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(messages.replyMessage),\n        confirm: intl.formatMessage(messages.replyConfirm),\n        onConfirm: () => dispatch(replyCompose(status, this.context.router.history)),\n      }));\n    } else {\n      dispatch(replyCompose(status, this.context.router.history));\n    }\n  }\n\n  handleModalReblog = (status) => {\n    this.props.dispatch(reblog(status));\n  }\n\n  handleReblogClick = (status, e) => {\n    if (status.get('reblogged')) {\n      this.props.dispatch(unreblog(status));\n    } else {\n      if ((e && e.shiftKey) || !boostModal) {\n        this.handleModalReblog(status);\n      } else {\n        this.props.dispatch(openModal('BOOST', { status, onReblog: this.handleModalReblog }));\n      }\n    }\n  }\n\n  handleBookmarkClick = (status) => {\n    if (status.get('bookmarked')) {\n      this.props.dispatch(unbookmark(status));\n    } else {\n      this.props.dispatch(bookmark(status));\n    }\n  }\n\n  handleDeleteClick = (status, history, withRedraft = false) => {\n    const { dispatch, intl } = this.props;\n\n    if (!deleteModal) {\n      dispatch(deleteStatus(status.get('id'), history, withRedraft));\n    } else {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n        confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n        onConfirm: () => dispatch(deleteStatus(status.get('id'), history, withRedraft)),\n      }));\n    }\n  }\n\n  handleDirectClick = (account, router) => {\n    this.props.dispatch(directCompose(account, router));\n  }\n\n  handleMentionClick = (account, router) => {\n    this.props.dispatch(mentionCompose(account, router));\n  }\n\n  handleOpenMedia = (media, index) => {\n    this.props.dispatch(openModal('MEDIA', { media, index }));\n  }\n\n  handleOpenVideo = (media, time) => {\n    this.props.dispatch(openModal('VIDEO', { media, time }));\n  }\n\n  handleHotkeyOpenMedia = e => {\n    const status = this._properStatus();\n\n    e.preventDefault();\n\n    if (status.get('media_attachments').size > 0) {\n      if (status.getIn(['media_attachments', 0, 'type']) === 'audio') {\n        // TODO: toggle play/paused?\n      } else if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        this.handleOpenVideo(status.getIn(['media_attachments', 0]), 0);\n      } else {\n        this.handleOpenMedia(status.get('media_attachments'), 0);\n      }\n    }\n  }\n\n  handleMuteClick = (account) => {\n    this.props.dispatch(initMuteModal(account));\n  }\n\n  handleConversationMuteClick = (status) => {\n    if (status.get('muted')) {\n      this.props.dispatch(unmuteStatus(status.get('id')));\n    } else {\n      this.props.dispatch(muteStatus(status.get('id')));\n    }\n  }\n\n  handleToggleHidden = (status) => {\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(status.get('id')));\n    } else {\n      this.props.dispatch(hideStatus(status.get('id')));\n    }\n  }\n\n  handleToggleAll = () => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n    const statusIds = [status.get('id')].concat(ancestorsIds.toJS(), descendantsIds.toJS());\n\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(statusIds));\n    } else {\n      this.props.dispatch(hideStatus(statusIds));\n    }\n  }\n\n  handleBlockClick = (status) => {\n    const { dispatch } = this.props;\n    const account = status.get('account');\n    dispatch(initBlockModal(account));\n  }\n\n  handleReport = (status) => {\n    this.props.dispatch(initReport(status.get('account'), status));\n  }\n\n  handleEmbed = (status) => {\n    this.props.dispatch(openModal('EMBED', { url: status.get('url') }));\n  }\n\n  handleUnmuteClick = account => {\n    this.props.dispatch(unmuteAccount(account.get('id')));\n  }\n\n  handleUnblockClick = account => {\n    this.props.dispatch(unblockAccount(account.get('id')));\n  }\n\n  handleBlockDomainClick = domain => {\n    this.props.dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: this.props.intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => this.props.dispatch(blockDomain(domain)),\n    }));\n  }\n\n  handleUnblockDomainClick = domain => {\n    this.props.dispatch(unblockDomain(domain));\n  }\n\n\n  handleHotkeyMoveUp = () => {\n    this.handleMoveUp(this.props.status.get('id'));\n  }\n\n  handleHotkeyMoveDown = () => {\n    this.handleMoveDown(this.props.status.get('id'));\n  }\n\n  handleHotkeyReply = e => {\n    e.preventDefault();\n    this.handleReplyClick(this.props.status);\n  }\n\n  handleHotkeyFavourite = () => {\n    this.handleFavouriteClick(this.props.status);\n  }\n\n  handleHotkeyBoost = () => {\n    this.handleReblogClick(this.props.status);\n  }\n\n  handleHotkeyMention = e => {\n    e.preventDefault();\n    this.handleMentionClick(this.props.status.get('account'));\n  }\n\n  handleHotkeyOpenProfile = () => {\n    this.context.router.history.push(`/accounts/${this.props.status.getIn(['account', 'id'])}`);\n  }\n\n  handleHotkeyToggleHidden = () => {\n    this.handleToggleHidden(this.props.status);\n  }\n\n  handleHotkeyToggleSensitive = () => {\n    this.handleToggleMediaVisibility();\n  }\n\n  handleMoveUp = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size - 1, true);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index, true);\n      } else {\n        this._selectChild(index - 1, true);\n      }\n    }\n  }\n\n  handleMoveDown = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size + 1, false);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index + 2, false);\n      } else {\n        this._selectChild(index + 1, false);\n      }\n    }\n  }\n\n  _selectChild (index, align_top) {\n    const container = this.node;\n    const element = container.querySelectorAll('.focusable')[index];\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  renderChildren (list) {\n    return list.map(id => (\n      <StatusContainer\n        key={id}\n        id={id}\n        onMoveUp={this.handleMoveUp}\n        onMoveDown={this.handleMoveDown}\n        contextType='thread'\n      />\n    ));\n  }\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  componentDidUpdate () {\n    if (this._scrolledIntoView) {\n      return;\n    }\n\n    const { status, ancestorsIds } = this.props;\n\n    if (status && ancestorsIds && ancestorsIds.size > 0) {\n      const element = this.node.querySelectorAll('.focusable')[ancestorsIds.size - 1];\n\n      window.requestAnimationFrame(() => {\n        element.scrollIntoView(true);\n      });\n      this._scrolledIntoView = true;\n    }\n  }\n\n  componentWillUnmount () {\n    detachFullscreenListener(this.onFullScreenChange);\n  }\n\n  onFullScreenChange = () => {\n    this.setState({ fullscreen: isFullscreen() });\n  }\n\n  render () {\n    let ancestors, descendants;\n    const { shouldUpdateScroll, status, ancestorsIds, descendantsIds, intl, domain, multiColumn } = this.props;\n    const { fullscreen } = this.state;\n\n    if (status === null) {\n      return (\n        <Column>\n          <ColumnBackButton multiColumn={multiColumn} />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (ancestorsIds && ancestorsIds.size > 0) {\n      ancestors = <div>{this.renderChildren(ancestorsIds)}</div>;\n    }\n\n    if (descendantsIds && descendantsIds.size > 0) {\n      descendants = <div>{this.renderChildren(descendantsIds)}</div>;\n    }\n\n    const handlers = {\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      reply: this.handleHotkeyReply,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleHotkeyMention,\n      openProfile: this.handleHotkeyOpenProfile,\n      toggleHidden: this.handleHotkeyToggleHidden,\n      toggleSensitive: this.handleHotkeyToggleSensitive,\n      openMedia: this.handleHotkeyOpenMedia,\n    };\n\n    return (\n      <Column bindToDocument={!multiColumn} label={intl.formatMessage(messages.detailedStatus)}>\n        <ColumnHeader\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button className='column-header__button' title={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} aria-label={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} onClick={this.handleToggleAll} aria-pressed={status.get('hidden') ? 'false' : 'true'}><Icon id={status.get('hidden') ? 'eye-slash' : 'eye'} /></button>\n          )}\n        />\n\n        <ScrollContainer scrollKey='thread' shouldUpdateScroll={shouldUpdateScroll}>\n          <div className={classNames('scrollable', { fullscreen })} ref={this.setRef}>\n            {ancestors}\n\n            <HotKeys handlers={handlers}>\n              <div className={classNames('focusable', 'detailed-status__wrapper')} tabIndex='0' aria-label={textForScreenReader(intl, status, false)}>\n                <DetailedStatus\n                  key={`details-${status.get('id')}`}\n                  status={status}\n                  onOpenVideo={this.handleOpenVideo}\n                  onOpenMedia={this.handleOpenMedia}\n                  onToggleHidden={this.handleToggleHidden}\n                  domain={domain}\n                  showMedia={this.state.showMedia}\n                  onToggleMediaVisibility={this.handleToggleMediaVisibility}\n                />\n\n                <ActionBar\n                  key={`action-bar-${status.get('id')}`}\n                  status={status}\n                  onReply={this.handleReplyClick}\n                  onFavourite={this.handleFavouriteClick}\n                  onReblog={this.handleReblogClick}\n                  onBookmark={this.handleBookmarkClick}\n                  onDelete={this.handleDeleteClick}\n                  onDirect={this.handleDirectClick}\n                  onMention={this.handleMentionClick}\n                  onMute={this.handleMuteClick}\n                  onUnmute={this.handleUnmuteClick}\n                  onMuteConversation={this.handleConversationMuteClick}\n                  onBlock={this.handleBlockClick}\n                  onUnblock={this.handleUnblockClick}\n                  onBlockDomain={this.handleBlockDomainClick}\n                  onUnblockDomain={this.handleUnblockDomainClick}\n                  onReport={this.handleReport}\n                  onPin={this.handlePin}\n                  onEmbed={this.handleEmbed}\n                />\n              </div>\n            </HotKeys>\n\n            {descendants}\n          </div>\n        </ScrollContainer>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
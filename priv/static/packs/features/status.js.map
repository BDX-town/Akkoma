{"version":3,"sources":["webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/mastodon/features/status/components/detailed_status.js","webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/mastodon/features/status/components/action_bar.js","webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/mastodon/features/status/index.js"],"names":["DetailedStatus","height","e","button","ctrlKey","metaKey","_this","context","router","preventDefault","history","push","props","status","getIn","stopPropagation","media","startTime","onOpenVideo","onToggleHidden","c","node","_measureHeight","href","target","nodeName","parentNode","window","open","heightJustChanged","_this2","this","measureHeight","scheduleIdleTask","setState","Math","ceil","scrollHeight","onHeightChange","componentDidUpdate","prevProps","prevState","state","render","get","outerStyle","boxSizing","compact","applicationLink","reblogLink","reblogIcon","favouriteLink","size","some","item","Object","_babel_runtime_helpers_esm_jsx__WEBPACK_IMPORTED_MODULE_0__","_components_attachment_list__WEBPACK_IMPORTED_MODULE_11__","video","_video__WEBPACK_IMPORTED_MODULE_16__","preview","src","alt","width","inline","handleOpenVideo","sensitive","_components_media_gallery__WEBPACK_IMPORTED_MODULE_10__","standalone","onOpenMedia","length","_card__WEBPACK_IMPORTED_MODULE_14__","card","className","rel","mastodon_components_icon__WEBPACK_IMPORTED_MODULE_19__","id","react_router_dom__WEBPACK_IMPORTED_MODULE_12__","to","react_intl__WEBPACK_IMPORTED_MODULE_13__","value","onClick","handleModalLink","style","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","ref","setRef","classNames","handleAccountClick","_components_avatar__WEBPACK_IMPORTED_MODULE_7__","account","_components_display_name__WEBPACK_IMPORTED_MODULE_8__","localDomain","domain","_components_status_content__WEBPACK_IMPORTED_MODULE_9__","expanded","onExpandedToggle","handleExpandedToggle","Date","hour12","year","month","day","hour","minute","ImmutablePureComponent","PropTypes","object","ImmutablePropTypes","map","isRequired","func","bool","string","messages","defineMessages","delete","defaultMessage","redraft","direct","mention","reply","reblog","reblog_private","cancel_reblog_private","cannot_reblog","favourite","mute","muteConversation","unmuteConversation","block","report","share","pin","unpin","embed","admin_account","admin_status","copy","ActionBar","injectIntl","onReply","onReblog","onFavourite","onDelete","onDirect","onMention","onMute","onMuteConversation","onBlock","onReport","onPin","navigator","text","url","onEmbed","textarea","document","textContent","position","body","appendChild","select","execCommand","removeChild","_this$props","intl","publicStatus","includes","mutingConversation","menu","formatMessage","action","handleCopy","handleEmbed","me","handlePinClick","handleReblogClick","handleConversationMuteClick","handleDeleteClick","handleRedraftClick","name","handleMentionClick","handleDirectClick","handleMuteClick","handleBlockClick","handleReport","isStaff","replyIcon","shareButton","jsx","icon_button","title","icon","handleShare","reblog_disabled","handleReplyClick","disabled","active","animate","handleFavouriteClick","dropdown_menu_container","items","direction","React","PureComponent","deleteConfirm","deleteMessage","redraftConfirm","redraftMessage","blockConfirm","revealAll","hideAll","detailedStatus","replyConfirm","replyMessage","Status","connect","getStatus","makeGetStatus","params","statusId","ancestorsIds","Immutable","List","descendantsIds","withMutations","mutable","unshift","ids","shift","replies","reverse","forEach","askReplyConfirmation","trim","fullscreen","dispatch","unfavourite","openModal","message","confirm","onConfirm","replyCompose","unreblog","shiftKey","boostModal","handleModalReblog","withRedraft","_this$props2","deleteModal","deleteStatus","directCompose","mentionCompose","index","time","initMuteModal","unmuteStatus","muteStatus","revealStatus","hideStatus","_this$props3","statusIds","concat","toJS","_this$props4","index_es","values","blockAccount","initReport","handleMoveUp","handleMoveDown","handleToggleHidden","_this$props5","_selectChild","indexOf","_this$props6","isFullscreen","componentWillMount","fetchStatus","componentDidMount","attachFullscreenListener","onFullScreenChange","componentWillReceiveProps","nextProps","_scrolledIntoView","element","querySelectorAll","focus","renderChildren","list","status_container","onMoveUp","onMoveDown","contextType","_this$props7","requestAnimationFrame","scrollIntoView","componentWillUnmount","detachFullscreenListener","ancestors","descendants","_this$props8","shouldUpdateScroll","column","column_back_button","missing_indicator","handlers","moveUp","handleHotkeyMoveUp","moveDown","handleHotkeyMoveDown","handleHotkeyReply","handleHotkeyFavourite","boost","handleHotkeyBoost","handleHotkeyMention","openProfile","handleHotkeyOpenProfile","toggleHidden","handleHotkeyToggleHidden","label","column_header","showBackButton","extraButton","aria-label","handleToggleAll","aria-pressed","react_router_scroll_4_es","scrollKey","react_default","react_hotkeys_index_es","tabIndex","textForScreenReader","detailed_status","handleOpenMedia","action_bar_ActionBar","handlePin"],"mappings":"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","file":"features/status.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport StatusContent from '../../../components/status_content';\nimport MediaGallery from '../../../components/media_gallery';\nimport AttachmentList from '../../../components/attachment_list';\nimport { Link } from 'react-router-dom';\nimport { FormattedDate, FormattedNumber } from 'react-intl';\nimport Card from './card';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Video from '../../video';\nimport scheduleIdleTask from '../../ui/util/schedule_idle_task';\nimport classNames from 'classnames';\nimport Icon from 'mastodon/components/icon';\n\nexport default class DetailedStatus extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    onOpenMedia: PropTypes.func.isRequired,\n    onOpenVideo: PropTypes.func.isRequired,\n    onToggleHidden: PropTypes.func.isRequired,\n    measureHeight: PropTypes.bool,\n    onHeightChange: PropTypes.func,\n    domain: PropTypes.string.isRequired,\n    compact: PropTypes.bool,\n  };\n\n  state = {\n    height: null,\n  };\n\n  handleAccountClick = (e) => {\n    if (e.button === 0 && !(e.ctrlKey || e.metaKey) && this.context.router) {\n      e.preventDefault();\n      this.context.router.history.push(`/accounts/${this.props.status.getIn(['account', 'id'])}`);\n    }\n\n    e.stopPropagation();\n  }\n\n  handleOpenVideo = (media, startTime) => {\n    this.props.onOpenVideo(media, startTime);\n  }\n\n  handleExpandedToggle = () => {\n    this.props.onToggleHidden(this.props.status);\n  }\n\n  _measureHeight (heightJustChanged) {\n    if (this.props.measureHeight && this.node) {\n      scheduleIdleTask(() => this.node && this.setState({ height: Math.ceil(this.node.scrollHeight) + 1 }));\n\n      if (this.props.onHeightChange && heightJustChanged) {\n        this.props.onHeightChange();\n      }\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n    this._measureHeight();\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    this._measureHeight(prevState.height !== this.state.height);\n  }\n\n  handleModalLink = e => {\n    e.preventDefault();\n\n    let href;\n\n    if (e.target.nodeName !== 'A') {\n      href = e.target.parentNode.href;\n    } else {\n      href = e.target.href;\n    }\n\n    window.open(href, 'mastodon-intent', 'width=445,height=600,resizable=no,menubar=no,status=no,scrollbars=yes');\n  }\n\n  render () {\n    const status = (this.props.status && this.props.status.get('reblog')) ? this.props.status.get('reblog') : this.props.status;\n    const outerStyle = { boxSizing: 'border-box' };\n    const { compact } = this.props;\n\n    if (!status) {\n      return null;\n    }\n\n    let media           = '';\n    let applicationLink = '';\n    let reblogLink = '';\n    let reblogIcon = 'retweet';\n    let favouriteLink = '';\n\n    if (this.props.measureHeight) {\n      outerStyle.height = `${this.state.height}px`;\n    }\n\n    if (status.get('media_attachments').size > 0) {\n      if (status.get('media_attachments').some(item => item.get('type') === 'unknown')) {\n        media = <AttachmentList media={status.get('media_attachments')} />;\n      } else if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        const video = status.getIn(['media_attachments', 0]);\n\n        media = (\n          <Video\n            preview={video.get('preview_url')}\n            src={video.get('url')}\n            alt={video.get('description')}\n            width={300}\n            height={150}\n            inline\n            onOpenVideo={this.handleOpenVideo}\n            sensitive={status.get('sensitive')}\n          />\n        );\n      } else {\n        media = (\n          <MediaGallery\n            standalone\n            sensitive={status.get('sensitive')}\n            media={status.get('media_attachments')}\n            height={300}\n            onOpenMedia={this.props.onOpenMedia}\n          />\n        );\n      }\n    } else if (status.get('spoiler_text').length === 0) {\n      media = <Card onOpenMedia={this.props.onOpenMedia} card={status.get('card', null)} />;\n    }\n\n    if (status.get('application')) {\n      applicationLink = <span> · <a className='detailed-status__application' href={status.getIn(['application', 'website'])} target='_blank' rel='noopener'>{status.getIn(['application', 'name'])}</a></span>;\n    }\n\n    if (status.get('visibility') === 'direct') {\n      reblogIcon = 'envelope';\n    } else if (status.get('visibility') === 'private') {\n      reblogIcon = 'lock';\n    }\n\n    if (status.get('visibility') === 'private') {\n      reblogLink = <Icon id={reblogIcon} />;\n    } else if (this.context.router) {\n      reblogLink = (\n        <Link to={`/statuses/${status.get('id')}/reblogs`} className='detailed-status__link'>\n          <Icon id={reblogIcon} />\n          <span className='detailed-status__reblogs'>\n            <FormattedNumber value={status.get('reblogs_count')} />\n          </span>\n        </Link>\n      );\n    } else {\n      reblogLink = (\n        <a href={`/interact/${status.get('id')}?type=reblog`} className='detailed-status__link' onClick={this.handleModalLink}>\n          <Icon id={reblogIcon} />\n          <span className='detailed-status__reblogs'>\n            <FormattedNumber value={status.get('reblogs_count')} />\n          </span>\n        </a>\n      );\n    }\n\n    if (this.context.router) {\n      favouriteLink = (\n        <Link to={`/statuses/${status.get('id')}/favourites`} className='detailed-status__link'>\n          <Icon id='star' />\n          <span className='detailed-status__favorites'>\n            <FormattedNumber value={status.get('favourites_count')} />\n          </span>\n        </Link>\n      );\n    } else {\n      favouriteLink = (\n        <a href={`/interact/${status.get('id')}?type=favourite`} className='detailed-status__link' onClick={this.handleModalLink}>\n          <Icon id='star' />\n          <span className='detailed-status__favorites'>\n            <FormattedNumber value={status.get('favourites_count')} />\n          </span>\n        </a>\n      );\n    }\n\n    return (\n      <div style={outerStyle}>\n        <div ref={this.setRef} className={classNames('detailed-status', { compact })}>\n          <a href={status.getIn(['account', 'url'])} onClick={this.handleAccountClick} className='detailed-status__display-name'>\n            <div className='detailed-status__display-avatar'><Avatar account={status.get('account')} size={48} /></div>\n            <DisplayName account={status.get('account')} localDomain={this.props.domain} />\n          </a>\n\n          <StatusContent status={status} expanded={!status.get('hidden')} onExpandedToggle={this.handleExpandedToggle} />\n\n          {media}\n\n          <div className='detailed-status__meta'>\n            <a className='detailed-status__datetime' href={status.get('url')} target='_blank' rel='noopener'>\n              <FormattedDate value={new Date(status.get('created_at'))} hour12={false} year='numeric' month='short' day='2-digit' hour='2-digit' minute='2-digit' />\n            </a>{applicationLink} · {reblogLink} · {favouriteLink}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../components/icon_button';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport DropdownMenuContainer from '../../../containers/dropdown_menu_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { me, isStaff } from '../../../initial_state';\n\nconst messages = defineMessages({\n  delete: { id: 'status.delete', defaultMessage: 'Delete' },\n  redraft: { id: 'status.redraft', defaultMessage: 'Delete & re-draft' },\n  direct: { id: 'status.direct', defaultMessage: 'Direct message @{name}' },\n  mention: { id: 'status.mention', defaultMessage: 'Mention @{name}' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  reblog: { id: 'status.reblog', defaultMessage: 'Boost' },\n  reblog_private: { id: 'status.reblog_private', defaultMessage: 'Boost to original audience' },\n  cancel_reblog_private: { id: 'status.cancel_reblog_private', defaultMessage: 'Unboost' },\n  cannot_reblog: { id: 'status.cannot_reblog', defaultMessage: 'This post cannot be boosted' },\n  favourite: { id: 'status.favourite', defaultMessage: 'Favourite' },\n  mute: { id: 'status.mute', defaultMessage: 'Mute @{name}' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n  block: { id: 'status.block', defaultMessage: 'Block @{name}' },\n  report: { id: 'status.report', defaultMessage: 'Report @{name}' },\n  share: { id: 'status.share', defaultMessage: 'Share' },\n  pin: { id: 'status.pin', defaultMessage: 'Pin on profile' },\n  unpin: { id: 'status.unpin', defaultMessage: 'Unpin from profile' },\n  embed: { id: 'status.embed', defaultMessage: 'Embed' },\n  admin_account: { id: 'status.admin_account', defaultMessage: 'Open moderation interface for @{name}' },\n  admin_status: { id: 'status.admin_status', defaultMessage: 'Open this status in the moderation interface' },\n  copy: { id: 'status.copy', defaultMessage: 'Copy link to status' },\n});\n\nexport default @injectIntl\nclass ActionBar extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    onReply: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onDirect: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onMute: PropTypes.func,\n    onMuteConversation: PropTypes.func,\n    onBlock: PropTypes.func,\n    onReport: PropTypes.func,\n    onPin: PropTypes.func,\n    onEmbed: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleReplyClick = () => {\n    this.props.onReply(this.props.status);\n  }\n\n  handleReblogClick = (e) => {\n    this.props.onReblog(this.props.status, e);\n  }\n\n  handleFavouriteClick = () => {\n    this.props.onFavourite(this.props.status);\n  }\n\n  handleDeleteClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history);\n  }\n\n  handleRedraftClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history, true);\n  }\n\n  handleDirectClick = () => {\n    this.props.onDirect(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMentionClick = () => {\n    this.props.onMention(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMuteClick = () => {\n    this.props.onMute(this.props.status.get('account'));\n  }\n\n  handleConversationMuteClick = () => {\n    this.props.onMuteConversation(this.props.status);\n  }\n\n  handleBlockClick = () => {\n    this.props.onBlock(this.props.status.get('account'));\n  }\n\n  handleReport = () => {\n    this.props.onReport(this.props.status);\n  }\n\n  handlePinClick = () => {\n    this.props.onPin(this.props.status);\n  }\n\n  handleShare = () => {\n    navigator.share({\n      text: this.props.status.get('search_index'),\n      url: this.props.status.get('url'),\n    });\n  }\n\n  handleEmbed = () => {\n    this.props.onEmbed(this.props.status);\n  }\n\n  handleCopy = () => {\n    const url      = this.props.status.get('url');\n    const textarea = document.createElement('textarea');\n\n    textarea.textContent    = url;\n    textarea.style.position = 'fixed';\n\n    document.body.appendChild(textarea);\n\n    try {\n      textarea.select();\n      document.execCommand('copy');\n    } catch (e) {\n\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n\n  render () {\n    const { status, intl } = this.props;\n\n    const publicStatus = ['public', 'unlisted'].includes(status.get('visibility'));\n    const mutingConversation = status.get('muted');\n\n    let menu = [];\n\n    if (publicStatus) {\n      menu.push({ text: intl.formatMessage(messages.copy), action: this.handleCopy });\n      menu.push({ text: intl.formatMessage(messages.embed), action: this.handleEmbed });\n      menu.push(null);\n    }\n\n    if (me === status.getIn(['account', 'id'])) {\n      if (publicStatus) {\n        menu.push({ text: intl.formatMessage(status.get('pinned') ? messages.unpin : messages.pin), action: this.handlePinClick });\n      } else {\n        if (status.get('visibility') === 'private') {\n          menu.push({ text: intl.formatMessage(status.get('reblogged') ? messages.cancel_reblog_private : messages.reblog_private), action: this.handleReblogClick });\n        }\n      }\n\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(mutingConversation ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMuteClick });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDeleteClick });\n      menu.push({ text: intl.formatMessage(messages.redraft), action: this.handleRedraftClick });\n    } else {\n      menu.push({ text: intl.formatMessage(messages.mention, { name: status.getIn(['account', 'username']) }), action: this.handleMentionClick });\n      menu.push({ text: intl.formatMessage(messages.direct, { name: status.getIn(['account', 'username']) }), action: this.handleDirectClick });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.mute, { name: status.getIn(['account', 'username']) }), action: this.handleMuteClick });\n      menu.push({ text: intl.formatMessage(messages.block, { name: status.getIn(['account', 'username']) }), action: this.handleBlockClick });\n      menu.push({ text: intl.formatMessage(messages.report, { name: status.getIn(['account', 'username']) }), action: this.handleReport });\n      if (isStaff) {\n        menu.push(null);\n        menu.push({ text: intl.formatMessage(messages.admin_account, { name: status.getIn(['account', 'username']) }), href: `/admin/accounts/${status.getIn(['account', 'id'])}` });\n        menu.push({ text: intl.formatMessage(messages.admin_status), href: `/admin/accounts/${status.getIn(['account', 'id'])}/statuses/${status.get('id')}` });\n      }\n    }\n\n    const shareButton = ('share' in navigator) && status.get('visibility') === 'public' && (\n      <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.share)} icon='share-alt' onClick={this.handleShare} /></div>\n    );\n\n    let replyIcon;\n    if (status.get('in_reply_to_id', null) === null) {\n      replyIcon = 'reply';\n    } else {\n      replyIcon = 'reply-all';\n    }\n\n    let reblogIcon = 'retweet';\n    if (status.get('visibility') === 'direct') reblogIcon = 'envelope';\n    else if (status.get('visibility') === 'private') reblogIcon = 'lock';\n\n    let reblog_disabled = (status.get('visibility') === 'direct' || status.get('visibility') === 'private');\n\n    return (\n      <div className='detailed-status__action-bar'>\n        <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.reply)} icon={status.get('in_reply_to_account_id') === status.getIn(['account', 'id']) ? 'reply' : replyIcon} onClick={this.handleReplyClick} /></div>\n        <div className='detailed-status__button'><IconButton disabled={reblog_disabled} active={status.get('reblogged')} title={reblog_disabled ? intl.formatMessage(messages.cannot_reblog) : intl.formatMessage(messages.reblog)} icon={reblogIcon} onClick={this.handleReblogClick} /></div>\n        <div className='detailed-status__button'><IconButton className='star-icon' animate active={status.get('favourited')} title={intl.formatMessage(messages.favourite)} icon='star' onClick={this.handleFavouriteClick} /></div>\n        {shareButton}\n\n        <div className='detailed-status__action-bar-dropdown'>\n          <DropdownMenuContainer size={18} icon='ellipsis-h' items={menu} direction='left' title='More' />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import Immutable from 'immutable';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { fetchStatus } from '../../actions/statuses';\nimport MissingIndicator from '../../components/missing_indicator';\nimport DetailedStatus from './components/detailed_status';\nimport ActionBar from './components/action_bar';\nimport Column from '../ui/components/column';\nimport {\n  favourite,\n  unfavourite,\n  reblog,\n  unreblog,\n  pin,\n  unpin,\n} from '../../actions/interactions';\nimport {\n  replyCompose,\n  mentionCompose,\n  directCompose,\n} from '../../actions/compose';\nimport { blockAccount } from '../../actions/accounts';\nimport {\n  muteStatus,\n  unmuteStatus,\n  deleteStatus,\n  hideStatus,\n  revealStatus,\n} from '../../actions/statuses';\nimport { initMuteModal } from '../../actions/mutes';\nimport { initReport } from '../../actions/reports';\nimport { makeGetStatus } from '../../selectors';\nimport { ScrollContainer } from 'react-router-scroll-4';\nimport ColumnBackButton from '../../components/column_back_button';\nimport ColumnHeader from '../../components/column_header';\nimport StatusContainer from '../../containers/status_container';\nimport { openModal } from '../../actions/modal';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport { boostModal, deleteModal } from '../../initial_state';\nimport { attachFullscreenListener, detachFullscreenListener, isFullscreen } from '../ui/util/fullscreen';\nimport { textForScreenReader } from '../../components/status';\nimport Icon from 'mastodon/components/icon';\n\nconst messages = defineMessages({\n  deleteConfirm: { id: 'confirmations.delete.confirm', defaultMessage: 'Delete' },\n  deleteMessage: { id: 'confirmations.delete.message', defaultMessage: 'Are you sure you want to delete this status?' },\n  redraftConfirm: { id: 'confirmations.redraft.confirm', defaultMessage: 'Delete & redraft' },\n  redraftMessage: { id: 'confirmations.redraft.message', defaultMessage: 'Are you sure you want to delete this status and re-draft it? Favourites and boosts will be lost, and replies to the original post will be orphaned.' },\n  blockConfirm: { id: 'confirmations.block.confirm', defaultMessage: 'Block' },\n  revealAll: { id: 'status.show_more_all', defaultMessage: 'Show more for all' },\n  hideAll: { id: 'status.show_less_all', defaultMessage: 'Show less for all' },\n  detailedStatus: { id: 'status.detailed_status', defaultMessage: 'Detailed conversation view' },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  const mapStateToProps = (state, props) => {\n    const status = getStatus(state, { id: props.params.statusId });\n    let ancestorsIds = Immutable.List();\n    let descendantsIds = Immutable.List();\n\n    if (status) {\n      ancestorsIds = ancestorsIds.withMutations(mutable => {\n        let id = status.get('in_reply_to_id');\n\n        while (id) {\n          mutable.unshift(id);\n          id = state.getIn(['contexts', 'inReplyTos', id]);\n        }\n      });\n\n      descendantsIds = descendantsIds.withMutations(mutable => {\n        const ids = [status.get('id')];\n\n        while (ids.length > 0) {\n          let id        = ids.shift();\n          const replies = state.getIn(['contexts', 'replies', id]);\n\n          if (status.get('id') !== id) {\n            mutable.push(id);\n          }\n\n          if (replies) {\n            replies.reverse().forEach(reply => {\n              ids.unshift(reply);\n            });\n          }\n        }\n      });\n    }\n\n    return {\n      status,\n      ancestorsIds,\n      descendantsIds,\n      askReplyConfirmation: state.getIn(['compose', 'text']).trim().length !== 0,\n      domain: state.getIn(['meta', 'domain']),\n    };\n  };\n\n  return mapStateToProps;\n};\n\nexport default @injectIntl\n@connect(makeMapStateToProps)\nclass Status extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    ancestorsIds: ImmutablePropTypes.list,\n    descendantsIds: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    askReplyConfirmation: PropTypes.bool,\n    domain: PropTypes.string.isRequired,\n  };\n\n  state = {\n    fullscreen: false,\n  };\n\n  componentWillMount () {\n    this.props.dispatch(fetchStatus(this.props.params.statusId));\n  }\n\n  componentDidMount () {\n    attachFullscreenListener(this.onFullScreenChange);\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.params.statusId !== this.props.params.statusId && nextProps.params.statusId) {\n      this._scrolledIntoView = false;\n      this.props.dispatch(fetchStatus(nextProps.params.statusId));\n    }\n  }\n\n  handleFavouriteClick = (status) => {\n    if (status.get('favourited')) {\n      this.props.dispatch(unfavourite(status));\n    } else {\n      this.props.dispatch(favourite(status));\n    }\n  }\n\n  handlePin = (status) => {\n    if (status.get('pinned')) {\n      this.props.dispatch(unpin(status));\n    } else {\n      this.props.dispatch(pin(status));\n    }\n  }\n\n  handleReplyClick = (status) => {\n    let { askReplyConfirmation, dispatch, intl } = this.props;\n    if (askReplyConfirmation) {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(messages.replyMessage),\n        confirm: intl.formatMessage(messages.replyConfirm),\n        onConfirm: () => dispatch(replyCompose(status, this.context.router.history)),\n      }));\n    } else {\n      dispatch(replyCompose(status, this.context.router.history));\n    }\n  }\n\n  handleModalReblog = (status) => {\n    this.props.dispatch(reblog(status));\n  }\n\n  handleReblogClick = (status, e) => {\n    if (status.get('reblogged')) {\n      this.props.dispatch(unreblog(status));\n    } else {\n      if ((e && e.shiftKey) || !boostModal) {\n        this.handleModalReblog(status);\n      } else {\n        this.props.dispatch(openModal('BOOST', { status, onReblog: this.handleModalReblog }));\n      }\n    }\n  }\n\n  handleDeleteClick = (status, history, withRedraft = false) => {\n    const { dispatch, intl } = this.props;\n\n    if (!deleteModal) {\n      dispatch(deleteStatus(status.get('id'), history, withRedraft));\n    } else {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n        confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n        onConfirm: () => dispatch(deleteStatus(status.get('id'), history, withRedraft)),\n      }));\n    }\n  }\n\n  handleDirectClick = (account, router) => {\n    this.props.dispatch(directCompose(account, router));\n  }\n\n  handleMentionClick = (account, router) => {\n    this.props.dispatch(mentionCompose(account, router));\n  }\n\n  handleOpenMedia = (media, index) => {\n    this.props.dispatch(openModal('MEDIA', { media, index }));\n  }\n\n  handleOpenVideo = (media, time) => {\n    this.props.dispatch(openModal('VIDEO', { media, time }));\n  }\n\n  handleMuteClick = (account) => {\n    this.props.dispatch(initMuteModal(account));\n  }\n\n  handleConversationMuteClick = (status) => {\n    if (status.get('muted')) {\n      this.props.dispatch(unmuteStatus(status.get('id')));\n    } else {\n      this.props.dispatch(muteStatus(status.get('id')));\n    }\n  }\n\n  handleToggleHidden = (status) => {\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(status.get('id')));\n    } else {\n      this.props.dispatch(hideStatus(status.get('id')));\n    }\n  }\n\n  handleToggleAll = () => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n    const statusIds = [status.get('id')].concat(ancestorsIds.toJS(), descendantsIds.toJS());\n\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(statusIds));\n    } else {\n      this.props.dispatch(hideStatus(statusIds));\n    }\n  }\n\n  handleBlockClick = (account) => {\n    const { dispatch, intl } = this.props;\n\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.block.message' defaultMessage='Are you sure you want to block {name}?' values={{ name: <strong>@{account.get('acct')}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockConfirm),\n      onConfirm: () => dispatch(blockAccount(account.get('id'))),\n    }));\n  }\n\n  handleReport = (status) => {\n    this.props.dispatch(initReport(status.get('account'), status));\n  }\n\n  handleEmbed = (status) => {\n    this.props.dispatch(openModal('EMBED', { url: status.get('url') }));\n  }\n\n  handleHotkeyMoveUp = () => {\n    this.handleMoveUp(this.props.status.get('id'));\n  }\n\n  handleHotkeyMoveDown = () => {\n    this.handleMoveDown(this.props.status.get('id'));\n  }\n\n  handleHotkeyReply = e => {\n    e.preventDefault();\n    this.handleReplyClick(this.props.status);\n  }\n\n  handleHotkeyFavourite = () => {\n    this.handleFavouriteClick(this.props.status);\n  }\n\n  handleHotkeyBoost = () => {\n    this.handleReblogClick(this.props.status);\n  }\n\n  handleHotkeyMention = e => {\n    e.preventDefault();\n    this.handleMentionClick(this.props.status.get('account'));\n  }\n\n  handleHotkeyOpenProfile = () => {\n    this.context.router.history.push(`/accounts/${this.props.status.getIn(['account', 'id'])}`);\n  }\n\n  handleHotkeyToggleHidden = () => {\n    this.handleToggleHidden(this.props.status);\n  }\n\n  handleMoveUp = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size - 1);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index);\n      } else {\n        this._selectChild(index - 1);\n      }\n    }\n  }\n\n  handleMoveDown = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size + 1);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index + 2);\n      } else {\n        this._selectChild(index + 1);\n      }\n    }\n  }\n\n  _selectChild (index) {\n    const element = this.node.querySelectorAll('.focusable')[index];\n\n    if (element) {\n      element.focus();\n    }\n  }\n\n  renderChildren (list) {\n    return list.map(id => (\n      <StatusContainer\n        key={id}\n        id={id}\n        onMoveUp={this.handleMoveUp}\n        onMoveDown={this.handleMoveDown}\n        contextType='thread'\n      />\n    ));\n  }\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  componentDidUpdate () {\n    if (this._scrolledIntoView) {\n      return;\n    }\n\n    const { status, ancestorsIds } = this.props;\n\n    if (status && ancestorsIds && ancestorsIds.size > 0) {\n      const element = this.node.querySelectorAll('.focusable')[ancestorsIds.size - 1];\n\n      window.requestAnimationFrame(() => {\n        element.scrollIntoView(true);\n      });\n      this._scrolledIntoView = true;\n    }\n  }\n\n  componentWillUnmount () {\n    detachFullscreenListener(this.onFullScreenChange);\n  }\n\n  onFullScreenChange = () => {\n    this.setState({ fullscreen: isFullscreen() });\n  }\n\n  render () {\n    let ancestors, descendants;\n    const { shouldUpdateScroll, status, ancestorsIds, descendantsIds, intl, domain } = this.props;\n    const { fullscreen } = this.state;\n\n    if (status === null) {\n      return (\n        <Column>\n          <ColumnBackButton />\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (ancestorsIds && ancestorsIds.size > 0) {\n      ancestors = <div>{this.renderChildren(ancestorsIds)}</div>;\n    }\n\n    if (descendantsIds && descendantsIds.size > 0) {\n      descendants = <div>{this.renderChildren(descendantsIds)}</div>;\n    }\n\n    const handlers = {\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      reply: this.handleHotkeyReply,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleHotkeyMention,\n      openProfile: this.handleHotkeyOpenProfile,\n      toggleHidden: this.handleHotkeyToggleHidden,\n    };\n\n    return (\n      <Column label={intl.formatMessage(messages.detailedStatus)}>\n        <ColumnHeader\n          showBackButton\n          extraButton={(\n            <button className='column-header__button' title={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} aria-label={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)} onClick={this.handleToggleAll} aria-pressed={status.get('hidden') ? 'false' : 'true'}><Icon id={status.get('hidden') ? 'eye-slash' : 'eye'} /></button>\n          )}\n        />\n\n        <ScrollContainer scrollKey='thread' shouldUpdateScroll={shouldUpdateScroll}>\n          <div className={classNames('scrollable', { fullscreen })} ref={this.setRef}>\n            {ancestors}\n\n            <HotKeys handlers={handlers}>\n              <div className={classNames('focusable', 'detailed-status__wrapper')} tabIndex='0' aria-label={textForScreenReader(intl, status, false, !status.get('hidden'))}>\n                <DetailedStatus\n                  status={status}\n                  onOpenVideo={this.handleOpenVideo}\n                  onOpenMedia={this.handleOpenMedia}\n                  onToggleHidden={this.handleToggleHidden}\n                  domain={domain}\n                />\n\n                <ActionBar\n                  status={status}\n                  onReply={this.handleReplyClick}\n                  onFavourite={this.handleFavouriteClick}\n                  onReblog={this.handleReblogClick}\n                  onDelete={this.handleDeleteClick}\n                  onDirect={this.handleDirectClick}\n                  onMention={this.handleMentionClick}\n                  onMute={this.handleMuteClick}\n                  onMuteConversation={this.handleConversationMuteClick}\n                  onBlock={this.handleBlockClick}\n                  onReport={this.handleReport}\n                  onPin={this.handlePin}\n                  onEmbed={this.handleEmbed}\n                />\n              </div>\n            </HotKeys>\n\n            {descendants}\n          </div>\n        </ScrollContainer>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
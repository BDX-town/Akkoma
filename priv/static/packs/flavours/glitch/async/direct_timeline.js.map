{"version":3,"sources":["webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/flavours/glitch/features/direct_timeline/components/column_settings.js","webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/flavours/glitch/features/direct_timeline/containers/column_settings_container.js","webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/flavours/glitch/features/direct_timeline/index.js"],"names":["messages","defineMessages","filter_regex","id","defaultMessage","settings","ColumnSettings","injectIntl","render","_this$props","this","props","onChange","intl","Object","jsx","className","index_es","setting_text","settingPath","label","formatMessage","React","PureComponent","connect","state","getIn","dispatch","path","checked","changeSetting","concat","title","DirectTimeline","hasUnread","_this","columnId","removeColumn","addColumn","dir","_this$props2","moveColumn","column","scrollTop","c","maxId","expandDirectTimeline","componentDidMount","disconnect","connectDirectStream","componentWillUnmount","_this$props3","multiColumn","pinned","react_default","a","createElement","ref","setRef","column_header","icon","active","onPin","handlePin","onMove","handleMove","onClick","handleHeaderClick","column_settings_container","status_list_container","trackScroll","scrollKey","timelineId","onLoadMore","handleLoadMore","emptyMessage"],"mappings":"0NAMMA,EAAWC,YAAe,CAC9BC,aAAY,CAAAC,GAAA,oCAAAC,eAAA,qCACZC,SAAQ,CAAAF,GAAA,gBAAAC,eAAA,qBAIWE,EADpBC,gHASCC,OAAA,WAAU,IAAAC,EAC6BC,KAAKC,MAAlCN,EADAI,EACAJ,SAAUO,EADVH,EACUG,SAAUC,EADpBJ,EACoBI,KAE5B,OACEC,OAAAC,EAAA,EAAAD,CAAA,gBACEA,OAAAC,EAAA,EAAAD,CAAA,QAAME,UAAU,iCAAhB,EAA2CF,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,CAAkBd,GAAG,gCAAgCC,eAAe,cAE/GU,OAAAC,EAAA,EAAAD,CAAA,OAAKE,UAAU,6BAAf,EACEF,OAAAC,EAAA,EAAAD,CAACI,EAAA,EAAD,CAAab,SAAUA,EAAUc,YAAa,CAAC,QAAS,QAASP,SAAUA,EAAUQ,MAAOP,EAAKQ,cAAcrB,EAASE,sBAhBtFoB,IAAMC,2BCInCC,oBAZS,SAAAC,GAAK,MAAK,CAChCpB,SAAUoB,EAAMC,MAAM,CAAC,WAAY,aAGV,SAAAC,GAAQ,MAAK,CAEtCf,SAFsC,SAE5BgB,EAAMC,GACdF,EAASG,YAAa,CAAE,UAAFC,OAAeH,GAAOC,OAKjCL,CAA6ClB,kDCJ5D,IAAMN,EAAWC,YAAe,CAC9B+B,MAAK,CAAA7B,GAAA,gBAAAC,eAAA,qBASc6B,EAFpBT,kBAJuB,SAAAC,GAAK,MAAK,CAChCS,UAA4D,EAAjDT,EAAMC,MAAM,CAAC,YAAa,SAAU,gBAIhDnB,wMAWa,WAAM,IAAAE,EACe0B,EAAKxB,MAA5ByB,EADQ3B,EACR2B,SAAUT,EADFlB,EACEkB,SAGhBA,EADES,EACOC,YAAaD,GAEbE,YAAU,SAAU,+CAIpB,SAACC,GAAQ,IAAAC,EACWL,EAAKxB,MAA5ByB,EADYI,EACZJ,UACRT,EAFoBa,EACFb,UACTc,YAAWL,EAAUG,qDAGZ,WAClBJ,EAAKO,OAAOC,kDAiBL,SAAAC,GACPT,EAAKO,OAASE,gDAGC,SAAAC,GACfV,EAAKxB,MAAMgB,SAASmB,YAAqB,CAAED,2DAnB7CE,kBAAA,WAAqB,IACXpB,EAAajB,KAAKC,MAAlBgB,SAERA,EAASmB,eACTpC,KAAKsC,WAAarB,EAASsB,kBAG7BC,qBAAA,WACMxC,KAAKsC,aACPtC,KAAKsC,aACLtC,KAAKsC,WAAa,SAYtBxC,OAAA,WAAU,IAAA2C,EAC2CzC,KAAKC,MAAhDE,EADAsC,EACAtC,KAAMqB,EADNiB,EACMjB,UAAWE,EADjBe,EACiBf,SAAUgB,EAD3BD,EAC2BC,YAC7BC,IAAWjB,EAEjB,OACEkB,EAAAC,EAAAC,cAACd,EAAA,EAAD,CAAQe,IAAK/C,KAAKgD,OAAQtC,MAAOP,EAAKQ,cAAcrB,EAASgC,QAC3DlB,OAAAC,EAAA,EAAAD,CAAC6C,EAAA,EAAD,CACEC,KAAK,WACLC,OAAQ3B,EACRF,MAAOnB,EAAKQ,cAAcrB,EAASgC,OACnC8B,MAAOpD,KAAKqD,UACZC,OAAQtD,KAAKuD,WACbC,QAASxD,KAAKyD,kBACdd,OAAQA,EACRD,YAAaA,QARf,EAUEtC,OAAAC,EAAA,EAAAD,CAACsD,EAAD,KAGFtD,OAAAC,EAAA,EAAAD,CAACuD,EAAA,EAAD,CACEC,aAAcjB,EACdkB,UAAS,mBAAqBnC,EAC9BoC,WAAW,SACXC,WAAY/D,KAAKgE,eACjBC,aAAc7D,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,CAAkBd,GAAG,sBAAsBC,eAAe,uGA3EtCkB,IAAMC","file":"flavours/glitch/async/direct_timeline.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport SettingText from '../../../components/setting_text';\n\nconst messages = defineMessages({\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n  settings: { id: 'home.settings', defaultMessage: 'Column settings' },\n});\n\n@injectIntl\nexport default class ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { settings, onChange, intl } = this.props;\n\n    return (\n      <div>\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></span>\n\n        <div className='column-settings__row'>\n          <SettingText settings={settings} settingPath={['regex', 'body']} onChange={onChange} label={intl.formatMessage(messages.filter_regex)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'direct']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onChange (path, checked) {\n    dispatch(changeSetting(['direct', ...path], checked));\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { expandDirectTimeline } from 'flavours/glitch/actions/timelines';\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport { connectDirectStream } from 'flavours/glitch/actions/streaming';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Direct messages' },\n});\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'direct', 'unread']) > 0,\n});\n\n@connect(mapStateToProps)\n@injectIntl\nexport default class DirectTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECT', {}));\n    }\n  }\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n\n    dispatch(expandDirectTimeline());\n    this.disconnect = dispatch(connectDirectStream());\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandDirectTimeline({ maxId }));\n  }\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='envelope'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any direct messages yet. When you send or receive one, it will show up here.\" />}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
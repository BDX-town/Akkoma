{"version":3,"sources":["webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/flavours/glitch/features/list_editor/containers/account_container.js","webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/flavours/glitch/features/list_editor/containers/search_container.js","webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/flavours/glitch/features/list_editor/components/edit_list_form.js","webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/flavours/glitch/features/list_editor/index.js"],"names":["injectIntl","connect","getAccount","makeGetAccount","state","_ref","accountId","added","account","getIn","includes","dispatch","_ref2","onRemove","removeFromListEditor","onAdd","addToListEditor","Account","value","onSubmit","fetchListSuggestions","onClear","clearListSuggestions","onChange","changeListSuggestions","Search","messages","defineMessages","title","id","defaultMessage","ListForm","disabled","changeListEditorTitle","submitListEditor","e","_this","props","target","preventDefault","render","_this$props","this","intl","formatMessage","Object","jsx","className","handleSubmit","handleChange","icon_button","icon","onClick","handleClick","React","PureComponent","ListEditor","accountIds","searchAccountIds","onInitialize","listId","setupListEditor","onReset","resetListEditor","componentDidMount","componentWillUnmount","_this$props2","showSearch","size","edit_list_form_ListForm","search_container","map","account_container","role","tabIndex","optional_motion","defaultStyle","x","style","spring","stiffness","damping","transform","visibility","ImmutablePureComponent","PropTypes","string","isRequired","onClose","func","object","ImmutablePropTypes","list"],"mappings":"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","file":"flavours/glitch/async/list_editor.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from 'flavours/glitch/selectors';\nimport { injectIntl } from 'react-intl';\nimport { removeFromListEditor, addToListEditor } from 'flavours/glitch/actions/lists';\nimport Account from '../components/account';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId, added }) => ({\n    account: getAccount(state, accountId),\n    added: typeof added === 'undefined' ? state.getIn(['listEditor', 'accounts', 'items']).includes(accountId) : added,\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { accountId }) => ({\n  onRemove: () => dispatch(removeFromListEditor(accountId)),\n  onAdd: () => dispatch(addToListEditor(accountId)),\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Account));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { fetchListSuggestions, clearListSuggestions, changeListSuggestions } from '../../../actions/lists';\nimport Search from '../components/search';\n\nconst mapStateToProps = state => ({\n  value: state.getIn(['listEditor', 'suggestions', 'value']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(fetchListSuggestions(value)),\n  onClear: () => dispatch(clearListSuggestions()),\n  onChange: value => dispatch(changeListSuggestions(value)),\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Search));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { changeListEditorTitle, submitListEditor } from 'flavours/glitch/actions/lists';\nimport IconButton from 'flavours/glitch/components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  title: { id: 'lists.edit.submit', defaultMessage: 'Change title' },\n});\n\nconst mapStateToProps = state => ({\n  value: state.getIn(['listEditor', 'title']),\n  disabled: !state.getIn(['listEditor', 'isChanged']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: value => dispatch(changeListEditorTitle(value)),\n  onSubmit: () => dispatch(submitListEditor(false)),\n});\n\n@connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nexport default class ListForm extends React.PureComponent {\n\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  handleChange = e => {\n    this.props.onChange(e.target.value);\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit();\n  }\n\n  handleClick = () => {\n    this.props.onSubmit();\n  }\n\n  render () {\n    const { value, disabled, intl } = this.props;\n\n    const title = intl.formatMessage(messages.title);\n\n    return (\n      <form className='column-inline-form' onSubmit={this.handleSubmit}>\n        <input\n          className='setting-text'\n          value={value}\n          onChange={this.handleChange}\n        />\n\n        <IconButton\n          disabled={disabled}\n          icon='check'\n          title={title}\n          onClick={this.handleClick}\n        />\n      </form>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { injectIntl } from 'react-intl';\nimport { setupListEditor, clearListSuggestions, resetListEditor } from 'flavours/glitch/actions/lists';\nimport AccountContainer from './containers/account_container';\nimport SearchContainer from './containers/search_container';\nimport EditListForm from './components/edit_list_form';\nimport Motion from 'flavours/glitch/util/optional_motion';\nimport spring from 'react-motion/lib/spring';\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['listEditor', 'accounts', 'items']),\n  searchAccountIds: state.getIn(['listEditor', 'suggestions', 'items']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onInitialize: listId => dispatch(setupListEditor(listId)),\n  onClear: () => dispatch(clearListSuggestions()),\n  onReset: () => dispatch(resetListEditor()),\n});\n\n@connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nexport default class ListEditor extends ImmutablePureComponent {\n\n  static propTypes = {\n    listId: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    onInitialize: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list.isRequired,\n    searchAccountIds: ImmutablePropTypes.list.isRequired,\n  };\n\n  componentDidMount () {\n    const { onInitialize, listId } = this.props;\n    onInitialize(listId);\n  }\n\n  componentWillUnmount () {\n    const { onReset } = this.props;\n    onReset();\n  }\n\n  render () {\n    const { accountIds, searchAccountIds, onClear } = this.props;\n    const showSearch = searchAccountIds.size > 0;\n\n    return (\n      <div className='modal-root__modal list-editor'>\n        <EditListForm />\n\n        <SearchContainer />\n\n        <div className='drawer__pager'>\n          <div className='drawer__inner list-editor__accounts'>\n            {accountIds.map(accountId => <AccountContainer key={accountId} accountId={accountId} added />)}\n          </div>\n\n          {showSearch && <div role='button' tabIndex='-1' className='drawer__backdrop' onClick={onClear} />}\n\n          <Motion defaultStyle={{ x: -100 }} style={{ x: spring(showSearch ? 0 : -100, { stiffness: 210, damping: 20 }) }}>\n            {({ x }) =>\n              (<div className='drawer__inner backdrop' style={{ transform: x === 0 ? null : `translateX(${x}%)`, visibility: x === -100 ? 'hidden' : 'visible' }}>\n                {searchAccountIds.map(accountId => <AccountContainer key={accountId} accountId={accountId} />)}\n              </div>)\n            }\n          </Motion>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}
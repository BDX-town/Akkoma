{"version":3,"sources":["webpack:///app/javascript/builds/pleroma/mastofe/app/javascript/flavours/glitch/features/account_timeline/index.js"],"names":["AccountTimeline","connect","state","_ref","accountId","params","_ref$withReplies","withReplies","path","statusIds","getIn","ImmutableList","featuredStatusIds","isLoading","hasMore","_this","column","scrollTop","maxId","props","dispatch","expandAccountTimeline","c","componentWillMount","_this$props","this","fetchAccount","fetchAccountIdentityProofs","expandAccountFeaturedTimeline","componentWillReceiveProps","nextProps","render","_this$props2","Object","_babel_runtime_helpers_esm_jsx__WEBPACK_IMPORTED_MODULE_0__","_ui_components_column__WEBPACK_IMPORTED_MODULE_12__","_components_loading_indicator__WEBPACK_IMPORTED_MODULE_11__","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","ref","setRef","name","flavours_glitch_features_account_components_profile_column_header__WEBPACK_IMPORTED_MODULE_13__","onClick","handleHeaderClick","_components_status_list__WEBPACK_IMPORTED_MODULE_10__","prepend","_containers_header_container__WEBPACK_IMPORTED_MODULE_14__","alwaysPrepend","scrollKey","onLoadMore","handleLoadMore","emptyMessage","react_intl__WEBPACK_IMPORTED_MODULE_17__","id","defaultMessage","ImmutablePureComponent","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"mUA4BqBA,EADpBC,kBAXuB,SAACC,EAADC,GAA2D,IAAvCC,EAAuCD,EAAjDE,OAAUD,UAAuCE,EAAAH,EAA1BI,mBAA0B,IAAAD,KAC3EE,EAAOD,EAAiBH,EAAN,gBAAiCA,EAEzD,MAAO,CACLK,UAAWP,EAAMQ,MAAM,CAAC,YAAD,WAAyBF,EAAQ,SAAUG,kBAClEC,kBAAmBL,EAAcI,iBAAkBT,EAAMQ,MAAM,CAAC,YAAD,WAAyBN,EAAzB,UAA6C,SAAUO,kBACtHE,UAAWX,EAAMQ,MAAM,CAAC,YAAD,WAAyBF,EAAQ,cACxDM,QAAWZ,EAAMQ,MAAM,CAAC,YAAD,WAAyBF,EAAQ,sNAuCtC,WAClBO,EAAKC,OAAOC,0DAGG,SAAAC,GACfH,EAAKI,MAAMC,SAASC,YAAsBN,EAAKI,MAAMd,OAAOD,UAAW,CAAEc,QAAOX,YAAaQ,EAAKI,MAAMZ,qDAGjG,SAAAe,GACPP,EAAKC,OAASM,kDA/BhBC,mBAAA,WAAsB,IAAAC,EAC2BC,KAAKN,MAAlCf,EADEoB,EACZnB,OAAUD,UAAaG,EADXiB,EACWjB,YAE/BkB,KAAKN,MAAMC,SAASM,YAAatB,IACjCqB,KAAKN,MAAMC,SAASO,YAA2BvB,IAC1CG,GACHkB,KAAKN,MAAMC,SAASQ,YAA8BxB,IAEpDqB,KAAKN,MAAMC,SAASC,YAAsBjB,EAAW,CAAEG,oBAGzDsB,0BAAA,SAA2BC,IACpBA,EAAUzB,OAAOD,YAAcqB,KAAKN,MAAMd,OAAOD,WAAa0B,EAAUzB,OAAOD,WAAc0B,EAAUvB,cAAgBkB,KAAKN,MAAMZ,eACrIkB,KAAKN,MAAMC,SAASM,YAAaI,EAAUzB,OAAOD,YAClDqB,KAAKN,MAAMC,SAASO,YAA2BG,EAAUzB,OAAOD,YAC3D0B,EAAUvB,aACbkB,KAAKN,MAAMC,SAASQ,YAA8BE,EAAUzB,OAAOD,YAErEqB,KAAKN,MAAMC,SAASC,YAAsBS,EAAUzB,OAAOD,UAAW,CAAEG,YAAauB,EAAUzB,OAAOE,mBAgB1GwB,OAAA,WAAU,IAAAC,EACqDP,KAAKN,MAA1DV,EADAuB,EACAvB,UAAWG,EADXoB,EACWpB,kBAAmBC,EAD9BmB,EAC8BnB,UAAWC,EADzCkB,EACyClB,QAEjD,OAAKL,GAAaI,EAEdoB,OAAAC,EAAA,EAAAD,CAACE,EAAA,EAAD,UACEF,OAAAC,EAAA,EAAAD,CAACG,EAAA,EAAD,KAMJC,EAAAC,EAAAC,cAACJ,EAAA,EAAD,CAAQK,IAAKf,KAAKgB,OAAQC,KAAK,WAC7BT,OAAAC,EAAA,EAAAD,CAACU,EAAA,EAAD,CAAqBC,QAASnB,KAAKoB,oBAEnCZ,OAAAC,EAAA,EAAAD,CAACa,EAAA,EAAD,CACEC,QAASd,OAAAC,EAAA,EAAAD,CAACe,EAAA,EAAD,CAAiB5C,UAAWqB,KAAKN,MAAMd,OAAOD,YACvD6C,eAAa,EACbC,UAAU,mBACVzC,UAAWA,EACXG,kBAAmBA,EACnBC,UAAWA,EACXC,QAASA,EACTqC,WAAY1B,KAAK2B,eACjBC,aAAcpB,OAAAC,EAAA,EAAAD,CAACqB,EAAA,EAAD,CAAkBC,GAAG,gCAAgCC,eAAe,0BAtE/CC,+BAExB,CACjBpD,OAAQqD,IAAUC,OAAOC,WACzBxC,SAAUsC,IAAUG,KAAKD,WACzBnD,UAAWqD,IAAmBC,KAC9BnD,kBAAmBkD,IAAmBC,KACtClD,UAAW6C,IAAUM,KACrBlD,QAAS4C,IAAUM,KACnBzD,YAAamD,IAAUM","file":"flavours/glitch/async/account_timeline.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { fetchAccount } from 'flavours/glitch/actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from 'flavours/glitch/actions/timelines';\nimport StatusList from '../../components/status_list';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport ProfileColumnHeader from 'flavours/glitch/features/account/components/profile_column_header';\nimport HeaderContainer from './containers/header_container';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { FormattedMessage } from 'react-intl';\nimport { fetchAccountIdentityProofs } from '../../actions/identity_proofs';\n\nconst mapStateToProps = (state, { params: { accountId }, withReplies = false }) => {\n  const path = withReplies ? `${accountId}:with_replies` : accountId;\n\n  return {\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], ImmutableList()),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned`, 'items'], ImmutableList()),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore:   state.getIn(['timelines', `account:${path}`, 'hasMore']),\n  };\n};\n\n@connect(mapStateToProps)\nexport default class AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n  };\n\n  componentWillMount () {\n    const { params: { accountId }, withReplies } = this.props;\n\n    this.props.dispatch(fetchAccount(accountId));\n    this.props.dispatch(fetchAccountIdentityProofs(accountId));\n    if (!withReplies) {\n      this.props.dispatch(expandAccountFeaturedTimeline(accountId));\n    }\n    this.props.dispatch(expandAccountTimeline(accountId, { withReplies }));\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if ((nextProps.params.accountId !== this.props.params.accountId && nextProps.params.accountId) || nextProps.withReplies !== this.props.withReplies) {\n      this.props.dispatch(fetchAccount(nextProps.params.accountId));\n      this.props.dispatch(fetchAccountIdentityProofs(nextProps.params.accountId));\n      if (!nextProps.withReplies) {\n        this.props.dispatch(expandAccountFeaturedTimeline(nextProps.params.accountId));\n      }\n      this.props.dispatch(expandAccountTimeline(nextProps.params.accountId, { withReplies: nextProps.params.withReplies }));\n    }\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.params.accountId, { maxId, withReplies: this.props.withReplies }));\n  }\n\n  setRef = c => {\n    this.column = c;\n  }\n\n  render () {\n    const { statusIds, featuredStatusIds, isLoading, hasMore } = this.props;\n\n    if (!statusIds && isLoading) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    return (\n      <Column ref={this.setRef} name='account'>\n        <ProfileColumnHeader onClick={this.handleHeaderClick} />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.params.accountId} />}\n          alwaysPrepend\n          scrollKey='account_timeline'\n          statusIds={statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.account_timeline' defaultMessage='No toots here!' />}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
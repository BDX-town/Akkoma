{"version":3,"sources":["webpack:///./app/soapbox/features/report/components/status_check_box.js","webpack:///./app/soapbox/features/report/containers/status_check_box_container.js","webpack:///./app/soapbox/features/ui/components/report_modal.js"],"names":["StatusCheckBox","render","video","audio","this","props","status","checked","onToggle","disabled","media","get","size","some","item","getIn","fetchComponent","Video","loading","renderLoadingVideoPlayer","Component","preview","blurhash","src","alt","aspectRatio","width","height","inline","sensitive","onOpenVideo","noop","Audio","renderLoadingAudioPlayer","onOpenAudio","MediaGallery","renderLoadingMediaGallery","onOpenMedia","className","onChange","React","PureComponent","connect","state","id","ImmutableSet","includes","dispatch","e","toggleStatusReport","target","messages","defineMessages","close","placeholder","submit","ReportModal","getAccount","makeGetAccount","accountId","isSubmitting","account","comment","forward","block","statusIds","OrderedSet","union","injectIntl","changeReportComment","value","changeReportForward","changeReportBlock","submitReport","blockAccount","keyCode","ctrlKey","metaKey","handleSubmit","componentDidMount","expandAccountTimeline","withReplies","componentDidUpdate","prevProps","intl","onClose","domain","split","title","formatMessage","icon","onClick","defaultMessage","values","handleCommentChange","onKeyDown","handleKeyDown","autoFocus","handleForwardChange","htmlFor","handleBlockChange","text","map","statusId","ImmutablePureComponent","PropTypes","bool","ImmutablePropTypes","orderedSet","isRequired","string","func","object"],"mappings":"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","file":"js/modals/report_modal-8a0e36c5da4086e78c1e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Toggle from 'react-toggle';\nimport noop from 'lodash/noop';\nimport StatusContent from '../../../components/status_content';\nimport { MediaGallery, Video, Audio } from '../../ui/util/async-components';\nimport Bundle from '../../ui/components/bundle';\n\nexport default class StatusCheckBox extends React.PureComponent {\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    checked: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n    disabled: PropTypes.bool,\n  };\n\n  render() {\n    const { status, checked, onToggle, disabled } = this.props;\n    let media = null;\n\n    if (status.get('reblog')) {\n      return null;\n    }\n\n    if (status.get('media_attachments').size > 0) {\n      if (status.get('media_attachments').some(item => item.get('type') === 'unknown')) {\n\n      } else if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        const video = status.getIn(['media_attachments', 0]);\n\n        media = (\n          <Bundle fetchComponent={Video} loading={this.renderLoadingVideoPlayer} >\n            {Component => (\n              <Component\n                preview={video.get('preview_url')}\n                blurhash={video.get('blurhash')}\n                src={video.get('url')}\n                alt={video.get('description')}\n                aspectRatio={video.getIn(['meta', 'original', 'aspect'])}\n                width={239}\n                height={110}\n                inline\n                sensitive={status.get('sensitive')}\n                onOpenVideo={noop}\n              />\n            )}\n          </Bundle>\n        );\n      } else if (status.getIn(['media_attachments', 0, 'type']) === 'audio') {\n        const audio = status.getIn(['media_attachments', 0]);\n\n        media = (\n          <Bundle fetchComponent={Audio} loading={this.renderLoadingAudioPlayer} >\n            {Component => (\n              <Component\n                src={audio.get('url')}\n                alt={audio.get('description')}\n                inline\n                sensitive={status.get('sensitive')}\n                onOpenAudio={noop}\n              />\n            )}\n          </Bundle>\n        );\n      } else {\n        media = (\n          <Bundle fetchComponent={MediaGallery} loading={this.renderLoadingMediaGallery} >\n            {Component => <Component media={status.get('media_attachments')} sensitive={status.get('sensitive')} height={110} onOpenMedia={noop} />}\n          </Bundle>\n        );\n      }\n    }\n\n    return (\n      <div className='status-check-box'>\n        <div className='status-check-box__status'>\n          <StatusContent status={status} />\n          {media}\n        </div>\n\n        <div className='status-check-box-toggle'>\n          <Toggle checked={checked} onChange={onToggle} disabled={disabled} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport StatusCheckBox from '../components/status_check_box';\nimport { toggleStatusReport } from '../../../actions/reports';\nimport { Set as ImmutableSet } from 'immutable';\n\nconst mapStateToProps = (state, { id }) => ({\n  status: state.getIn(['statuses', id]),\n  checked: state.getIn(['reports', 'new', 'status_ids'], ImmutableSet()).includes(id),\n});\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n\n  onToggle(e) {\n    dispatch(toggleStatusReport(id, e.target.checked));\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatusCheckBox);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changeReportComment, changeReportForward, changeReportBlock, submitReport } from '../../../actions/reports';\nimport { blockAccount } from '../../../actions/accounts';\nimport { expandAccountTimeline } from '../../../actions/timelines';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { makeGetAccount } from '../../../selectors';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport StatusCheckBox from '../../report/containers/status_check_box_container';\nimport { OrderedSet } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Button from '../../../components/button';\nimport Toggle from 'react-toggle';\nimport IconButton from '../../../components/icon_button';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n  placeholder: { id: 'report.placeholder', defaultMessage: 'Additional comments' },\n  submit: { id: 'report.submit', defaultMessage: 'Submit' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = state => {\n    const accountId = state.getIn(['reports', 'new', 'account_id']);\n\n    return {\n      isSubmitting: state.getIn(['reports', 'new', 'isSubmitting']),\n      account: getAccount(state, accountId),\n      comment: state.getIn(['reports', 'new', 'comment']),\n      forward: state.getIn(['reports', 'new', 'forward']),\n      block: state.getIn(['reports', 'new', 'block']),\n      statusIds: OrderedSet(state.getIn(['timelines', `account:${accountId}:with_replies`, 'items'])).union(state.getIn(['reports', 'new', 'status_ids'])),\n    };\n  };\n\n  return mapStateToProps;\n};\n\nexport default @connect(makeMapStateToProps)\n@injectIntl\nclass ReportModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    isSubmitting: PropTypes.bool,\n    account: ImmutablePropTypes.map,\n    statusIds: ImmutablePropTypes.orderedSet.isRequired,\n    comment: PropTypes.string.isRequired,\n    forward: PropTypes.bool,\n    block: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleCommentChange = e => {\n    this.props.dispatch(changeReportComment(e.target.value));\n  }\n\n  handleForwardChange = e => {\n    this.props.dispatch(changeReportForward(e.target.checked));\n  }\n\n  handleBlockChange = e => {\n    this.props.dispatch(changeReportBlock(e.target.checked));\n  }\n\n  handleSubmit = () => {\n    this.props.dispatch(submitReport());\n    if (this.props.block) {\n      this.props.dispatch(blockAccount(this.props.account.get('id')));\n    }\n  }\n\n  handleKeyDown = e => {\n    if (e.keyCode === 13 && (e.ctrlKey || e.metaKey)) {\n      this.handleSubmit();\n    }\n  }\n\n  componentDidMount() {\n    this.props.dispatch(expandAccountTimeline(this.props.account.get('id'), { withReplies: true }));\n  }\n\n  componentDidUpdate(prevProps) {\n    const { account } = this.props;\n    if (prevProps.account !== account && account) {\n      this.props.dispatch(expandAccountTimeline(account.get('id'), { withReplies: true }));\n    }\n  }\n\n  render() {\n    const { account, comment, intl, statusIds, isSubmitting, forward, block, onClose } = this.props;\n\n    if (!account) {\n      return null;\n    }\n\n    const domain = account.get('acct').split('@')[1];\n\n    return (\n      <div className='modal-root__modal report-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='media-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={onClose} size={16} />\n          <FormattedMessage id='report.target' defaultMessage='Reporting {target}' values={{ target: <strong>{account.get('acct')}</strong> }} />\n        </div>\n\n        <div className='report-modal__container'>\n          <div className='report-modal__comment'>\n            <p><FormattedMessage id='report.hint' defaultMessage='The report will be sent to your server moderators. You can provide an explanation of why you are reporting this account below:' /></p>\n\n            <textarea\n              className='setting-text light'\n              placeholder={intl.formatMessage(messages.placeholder)}\n              value={comment}\n              onChange={this.handleCommentChange}\n              onKeyDown={this.handleKeyDown}\n              disabled={isSubmitting}\n              autoFocus\n            />\n\n            {domain && (\n              <div>\n                <p><FormattedMessage id='report.forward_hint' defaultMessage='The account is from another server. Send a copy of the report there as well?' /></p>\n\n                <div className='setting-toggle'>\n                  <Toggle id='report-forward' checked={forward} disabled={isSubmitting} onChange={this.handleForwardChange} />\n                  <label htmlFor='report-forward' className='setting-toggle__label'><FormattedMessage id='report.forward' defaultMessage='Forward to {target}' values={{ target: domain }} /></label>\n                </div>\n              </div>\n            )}\n\n            <div>\n              <p><FormattedMessage id='report.block_hint' defaultMessage='Do you also want to block this account?' /></p>\n\n              <div className='setting-toggle'>\n                <Toggle id='report-block' checked={block} disabled={isSubmitting} onChange={this.handleBlockChange} />\n                <label htmlFor='report-block' className='setting-toggle__label'><FormattedMessage id='report.block' defaultMessage='Block {target}' values={{ target: account.get('acct') }} /></label>\n              </div>\n            </div>\n\n            <Button disabled={isSubmitting} text={intl.formatMessage(messages.submit)} onClick={this.handleSubmit} />\n          </div>\n\n          <div className='report-modal__statuses'>\n            <div>\n              {statusIds.map(statusId => <StatusCheckBox id={statusId} key={statusId} disabled={isSubmitting} />)}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}
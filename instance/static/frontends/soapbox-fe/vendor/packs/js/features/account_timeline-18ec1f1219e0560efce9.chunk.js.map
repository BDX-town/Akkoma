{"version":3,"sources":["webpack:///./app/soapbox/features/account_timeline/index.js"],"names":["emptyList","ImmutableList","AccountTimeline","connect","state","account","username","params","withReplies","me","get","accounts","getIn","accountFetchError","toLowerCase","soapboxConfig","getSoapboxConfig","accountId","accountUsername","accountApId","find","acct","path","isBlocked","unavailable","isAccount","statusIds","featuredStatusIds","isLoading","hasMore","patronEnabled","maxId","props","dispatch","expandAccountTimeline","componentDidMount","this","fetchAccount","fetchAccountIdentityProofs","expandAccountFeaturedTimeline","fetchPatronAccount","fetchAccountByUsername","componentDidUpdate","prevProps","render","className","id","defaultMessage","exact","to","scrollKey","onLoadMore","handleLoadMore","emptyMessage","ImmutablePureComponent","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool"],"mappings":"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","file":"js/features/account_timeline-18ec1f1219e0560efce9.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport { fetchAccount, fetchAccountByUsername } from '../../actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from '../../actions/timelines';\nimport StatusList from '../../components/status_list';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { FormattedMessage } from 'react-intl';\nimport { fetchAccountIdentityProofs } from '../../actions/identity_proofs';\nimport MissingIndicator from 'soapbox/components/missing_indicator';\nimport { NavLink } from 'react-router-dom';\nimport { fetchPatronAccount } from '../../actions/patron';\nimport { getSoapboxConfig } from 'soapbox/actions/soapbox';\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { username }, withReplies = false }) => {\n  const me = state.get('me');\n  const accounts = state.getIn(['accounts']);\n  const accountFetchError = (state.getIn(['accounts', -1, 'username'], '').toLowerCase() === username.toLowerCase());\n  const soapboxConfig = getSoapboxConfig(state);\n\n  let accountId = -1;\n  let accountUsername = username;\n  let accountApId = null;\n  if (accountFetchError) {\n    accountId = null;\n  } else {\n    let account = accounts.find(acct => username.toLowerCase() === acct.getIn(['acct'], '').toLowerCase());\n    accountId = account ? account.getIn(['id'], null) : -1;\n    accountUsername = account ? account.getIn(['acct'], '') : '';\n    accountApId = account ? account.get('url') : '';\n  }\n\n  const path = withReplies ? `${accountId}:with_replies` : accountId;\n\n  const isBlocked = state.getIn(['relationships', accountId, 'blocked_by'], false);\n  const unavailable = (me === accountId) ? false : isBlocked;\n\n  return {\n    accountId,\n    unavailable,\n    accountUsername,\n    accountApId,\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], emptyList),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned`, 'items'], emptyList),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore: state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    me,\n    patronEnabled: soapboxConfig.getIn(['extensions', 'patron', 'enabled']),\n  };\n};\n\nexport default @connect(mapStateToProps)\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    unavailable: PropTypes.bool,\n  };\n\n  componentDidMount() {\n    const { params: { username }, accountId, accountApId, withReplies, me, patronEnabled } = this.props;\n\n    if (accountId && accountId !== -1) {\n      this.props.dispatch(fetchAccount(accountId));\n      if (me) this.props.dispatch(fetchAccountIdentityProofs(accountId));\n\n      if (!withReplies) {\n        this.props.dispatch(expandAccountFeaturedTimeline(accountId));\n      }\n\n      if (patronEnabled && accountApId) {\n        this.props.dispatch(fetchPatronAccount(accountApId));\n      }\n\n      this.props.dispatch(expandAccountTimeline(accountId, { withReplies }));\n    } else {\n      this.props.dispatch(fetchAccountByUsername(username));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { me, accountId, withReplies, accountApId, patronEnabled } = this.props;\n    if (accountId && accountId !== -1 && (accountId !== prevProps.accountId && accountId) || withReplies !== prevProps.withReplies) {\n      this.props.dispatch(fetchAccount(accountId));\n      if (me) this.props.dispatch(fetchAccountIdentityProofs(accountId));\n\n      if (!withReplies) {\n        this.props.dispatch(expandAccountFeaturedTimeline(accountId));\n      }\n\n      if (patronEnabled && accountApId) {\n        this.props.dispatch(fetchPatronAccount(accountApId));\n      }\n\n      this.props.dispatch(expandAccountTimeline(accountId, { withReplies }));\n    }\n  }\n\n  handleLoadMore = maxId => {\n    if (this.props.accountId && this.props.accountId !== -1) {\n      this.props.dispatch(expandAccountTimeline(this.props.accountId, { maxId, withReplies: this.props.withReplies }));\n    }\n  }\n\n  render() {\n    const { statusIds, featuredStatusIds, isLoading, hasMore, isAccount, accountId, unavailable, accountUsername } = this.props;\n\n    if (!isAccount && accountId !== -1) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (accountId === -1 || (!statusIds && isLoading)) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    if (unavailable) {\n      return (\n        <Column>\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />\n          </div>\n        </Column>\n      );\n    }\n\n    return (\n      <Column>\n        <div className='account__section-headline'>\n          <NavLink exact to={`/@${accountUsername}`}>\n            <FormattedMessage id='account.posts' defaultMessage='Posts' />\n          </NavLink>\n          <NavLink exact to={`/@${accountUsername}/with_replies`}>\n            <FormattedMessage id='account.posts_with_replies' defaultMessage='Posts and replies' />\n          </NavLink>\n          <NavLink exact to={`/@${accountUsername}/media`}>\n            <FormattedMessage id='account.media' defaultMessage='Media' />\n          </NavLink>\n        </div>\n        <StatusList\n          scrollKey='account_timeline'\n          statusIds={statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.account_timeline' defaultMessage='No posts here!' />}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
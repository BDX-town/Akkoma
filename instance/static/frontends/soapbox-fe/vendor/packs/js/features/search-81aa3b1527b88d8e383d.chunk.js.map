{"version":3,"sources":["webpack:///./app/soapbox/features/compose/components/search_results.js","webpack:///./app/soapbox/features/compose/containers/search_results_container.js","webpack:///./app/soapbox/features/search/index.js"],"names":["SearchResults","injectIntl","render","accounts","statuses","hashtags","this","props","results","submitted","isEmpty","className","count","get","size","id","fixedWidth","defaultMessage","map","accountId","statusId","hashtag","values","ImmutablePureComponent","ImmutablePropTypes","isRequired","PropTypes","bool","intl","object","connect","state","getIn","suggestions","dispatch","fetchSuggestions","dismissSuggestion","account","Search"],"mappings":"6PAYMA,EADUC,a,sGASdC,OAAA,WAAU,IAWJC,EAAUC,EAAUC,EAXjB,EACwBC,KAAKC,MAA5BC,EADD,EACCA,QAER,GAHO,EACUC,WAEAD,EAAQE,UACvB,OACE,mBAAKC,UAAU,uBAAf,EACE,YAAC,IAAD,KAMN,IAAIC,EAAQ,EAmCZ,OAjCIJ,EAAQK,IAAI,aAA8C,EAA/BL,EAAQK,IAAI,YAAYC,OACrDF,GAAWJ,EAAQK,IAAI,YAAYC,KACnCX,EACE,mBAAKQ,UAAU,gCAAf,EACE,2BAAI,YAAC,IAAD,CAAMI,GAAG,QAAQC,YAAU,IAAG,YAAC,IAAD,CAAkBD,GAAG,0BAA0BE,eAAe,YAE/FT,EAAQK,IAAI,YAAYK,IAAI,SAAAC,GAAS,OAAI,YAAC,IAAD,CAAkCJ,GAAII,GAAfA,OAKnEX,EAAQK,IAAI,aAA8C,EAA/BL,EAAQK,IAAI,YAAYC,OACrDF,GAAWJ,EAAQK,IAAI,YAAYC,KACnCV,EACE,mBAAKO,UAAU,gCAAf,EACE,2BAAI,YAAC,IAAD,CAAMI,GAAG,cAAcC,YAAU,IAAG,YAAC,IAAD,CAAkBD,GAAG,0BAA0BE,eAAe,WAErGT,EAAQK,IAAI,YAAYK,IAAI,SAAAE,GAAQ,OAAI,YAAC,IAAD,CAAgCL,GAAIK,GAAdA,OAKjEZ,EAAQK,IAAI,aAA8C,EAA/BL,EAAQK,IAAI,YAAYC,OACrDF,GAASJ,EAAQK,IAAI,YAAYC,KACjCT,EACE,mBAAKM,UAAU,gCAAf,EACE,2BAAI,YAAC,IAAD,CAAMI,GAAG,UAAUC,YAAU,IAAG,YAAC,IAAD,CAAkBD,GAAG,0BAA0BE,eAAe,cAEjGT,EAAQK,IAAI,YAAYK,IAAI,SAAAG,GAAO,OAAI,YAAC,IAAD,CAAmCA,QAASA,GAA9BA,EAAQR,IAAI,aAMtE,mBAAKF,UAAU,uBAAf,EACE,mBAAKA,UAAU,+BAAf,EACE,YAAC,IAAD,CAAMI,GAAG,SAASC,YAAU,IAC5B,YAAC,IAAD,CAAkBD,GAAG,uBAAuBE,eAAe,gEAAgEK,OAAQ,CAAEV,YAGtIT,EACAC,EACAC,I,GAhEmBkB,K,0BAEP,CACjBf,QAASgB,IAAmBN,IAAIO,WAChChB,UAAWiB,IAAUC,KACrBC,KAAMF,IAAUG,OAAOJ,a,kBCFZK,oBAXS,SAAAC,GAAK,MAAK,CAChCvB,QAASuB,EAAMC,MAAM,CAAC,SAAU,YAChCC,YAAaF,EAAMC,MAAM,CAAC,cAAe,UACzCvB,UAAWsB,EAAMC,MAAM,CAAC,SAAU,gBAGT,SAAAE,GAAQ,MAAK,CACtCC,iBAAkB,kBAAMD,EAASC,gBACjCC,kBAAmB,SAAAC,GAAO,OAAIH,EAASE,YAAkBC,EAAQxB,IAAI,WAGxDiB,CAA6C9B,GCC7CsC,UAZA,kBACb,mBAAK3B,UAAU,2BAAf,EACE,YAAC,IAAD,IAEA,mBAAKA,UAAU,sBAAf,EACE,mBAAKA,UAAU,6BAAf,EACE,YAAC,EAAD","file":"js/features/search-81aa3b1527b88d8e383d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport AccountContainer from '../../../containers/account_container';\nimport StatusContainer from '../../../containers/status_container';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Hashtag from '../../../components/hashtag';\nimport Icon from 'soapbox/components/icon';\nimport LoadingIndicator from 'soapbox/components/loading_indicator';\n\nexport default @injectIntl\nclass SearchResults extends ImmutablePureComponent {\n\n  static propTypes = {\n    results: ImmutablePropTypes.map.isRequired,\n    submitted: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const { results, submitted } = this.props;\n\n    if (submitted && results.isEmpty()) {\n      return (\n        <div className='search-results'>\n          <LoadingIndicator />\n        </div>\n      );\n    }\n\n    let accounts, statuses, hashtags;\n    let count = 0;\n\n    if (results.get('accounts') && results.get('accounts').size > 0) {\n      count   += results.get('accounts').size;\n      accounts = (\n        <div className='search-results__section'>\n          <h5><Icon id='users' fixedWidth /><FormattedMessage id='search_results.accounts' defaultMessage='People' /></h5>\n\n          {results.get('accounts').map(accountId => <AccountContainer key={accountId} id={accountId} />)}\n        </div>\n      );\n    }\n\n    if (results.get('statuses') && results.get('statuses').size > 0) {\n      count   += results.get('statuses').size;\n      statuses = (\n        <div className='search-results__section'>\n          <h5><Icon id='quote-right' fixedWidth /><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></h5>\n\n          {results.get('statuses').map(statusId => <StatusContainer key={statusId} id={statusId} />)}\n        </div>\n      );\n    }\n\n    if (results.get('hashtags') && results.get('hashtags').size > 0) {\n      count += results.get('hashtags').size;\n      hashtags = (\n        <div className='search-results__section'>\n          <h5><Icon id='hashtag' fixedWidth /><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></h5>\n\n          {results.get('hashtags').map(hashtag => <Hashtag key={hashtag.get('name')} hashtag={hashtag} />)}\n        </div>\n      );\n    }\n\n    return (\n      <div className='search-results'>\n        <div className='search-results__header'>\n          <Icon id='search' fixedWidth />\n          <FormattedMessage id='search_results.total' defaultMessage='{count, number} {count, plural, one {result} other {results}}' values={{ count }} />\n        </div>\n\n        {accounts}\n        {statuses}\n        {hashtags}\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport SearchResults from '../components/search_results';\nimport { fetchSuggestions, dismissSuggestion } from '../../../actions/suggestions';\n\nconst mapStateToProps = state => ({\n  results: state.getIn(['search', 'results']),\n  suggestions: state.getIn(['suggestions', 'items']),\n  submitted: state.getIn(['search', 'submitted']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSuggestions: () => dispatch(fetchSuggestions()),\n  dismissSuggestion: account => dispatch(dismissSuggestion(account.get('id'))),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResults);\n","import React from 'react';\nimport SearchContainer from 'soapbox/features/compose/containers/search_container';\nimport SearchResultsContainer from 'soapbox/features/compose/containers/search_results_container';\n\nconst Search = () => (\n  <div className='column search-page'>\n    <SearchContainer />\n\n    <div className='drawer__pager'>\n      <div className='drawer__inner darker'>\n        <SearchResultsContainer />\n      </div>\n    </div>\n  </div>\n);\n\nexport default Search;\n"],"sourceRoot":""}
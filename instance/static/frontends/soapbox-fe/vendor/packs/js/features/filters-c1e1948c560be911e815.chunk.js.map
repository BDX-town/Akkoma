{"version":3,"sources":["webpack:///./app/soapbox/features/filters/index.js"],"names":["messages","defineMessages","heading","subheading_add_new","keyword","expires","expires_hint","home_timeline","public_timeline","notifications","conversations","drop_header","drop_hint","whole_word_header","whole_word_hint","add_new","create_error","delete_error","subheading_filters","delete","expirations","null","Filters","connect","state","filters","get","injectIntl","phrase","expires_at","irreversible","whole_word","e","setState","target","name","value","checked","preventDefault","props","intl","dispatch","context","push","createFilter","then","response","fetchFilters","catch","error","snackbar","formatMessage","deleteFilter","currentTarget","dataset","componentDidMount","this","render","emptyMessage","id","defaultMessage","className","icon","backBtnSlim","text","disabled","label","required","type","onChange","handleInputChange","hint","items","defaultValue","never","handleSelectChange","handleCheckboxChange","onClick","handleAddNew","scrollKey","map","filter","i","role","tabIndex","handleFilterDelete","data-value","aria-label","size","ImmutablePureComponent","params","PropTypes","object","isRequired","func"],"mappings":"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","file":"js/features/filters-c1e1948c560be911e815.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport Column from '../ui/components/column';\nimport { fetchFilters, createFilter, deleteFilter } from '../../actions/filters';\nimport ScrollableList from '../../components/scrollable_list';\nimport Button from 'soapbox/components/button';\nimport {\n  SimpleForm,\n  SimpleInput,\n  FieldsGroup,\n  SelectDropdown,\n  Checkbox,\n} from 'soapbox/features/forms';\nimport snackbar from 'soapbox/actions/snackbar';\nimport Icon from 'soapbox/components/icon';\nimport ColumnSubheading from '../ui/components/column_subheading';\n\nconst messages = defineMessages({\n  heading: { id: 'column.filters', defaultMessage: 'Muted words' },\n  subheading_add_new: { id: 'column.filters.subheading_add_new', defaultMessage: 'Add New Filter' },\n  keyword: { id: 'column.filters.keyword', defaultMessage: 'Keyword or phrase' },\n  expires: { id: 'column.filters.expires', defaultMessage: 'Expire after' },\n  expires_hint: { id: 'column.filters.expires_hint', defaultMessage: 'Expiration dates are not currently supported' },\n  home_timeline: { id: 'column.filters.home_timeline', defaultMessage: 'Home timeline' },\n  public_timeline: { id: 'column.filters.public_timeline', defaultMessage: 'Public timeline' },\n  notifications: { id: 'column.filters.notifications', defaultMessage: 'Notifications' },\n  conversations: { id: 'column.filters.conversations', defaultMessage: 'Conversations' },\n  drop_header: { id: 'column.filters.drop_header', defaultMessage: 'Drop instead of hide' },\n  drop_hint: { id: 'column.filters.drop_hint', defaultMessage: 'Filtered posts will disappear irreversibly, even if filter is later removed' },\n  whole_word_header: { id: 'column.filters.whole_word_header', defaultMessage: 'Whole word' },\n  whole_word_hint: { id: 'column.filters.whole_word_hint', defaultMessage: 'When the keyword or phrase is alphanumeric only, it will only be applied if it matches the whole word' },\n  add_new: { id: 'column.filters.add_new', defaultMessage: 'Add New Filter' },\n  create_error: { id: 'column.filters.create_error', defaultMessage: 'Error adding filter' },\n  delete_error: { id: 'column.filters.delete_error', defaultMessage: 'Error deleting filter' },\n  subheading_filters: { id: 'column.filters.subheading_filters', defaultMessage: 'Current Filters' },\n  delete: { id: 'column.filters.delete', defaultMessage: 'Delete' },\n});\n\nconst expirations = {\n  null: 'Never',\n  // 3600: '30 minutes',\n  // 21600: '1 hour',\n  // 43200: '12 hours',\n  // 86400 : '1 day',\n  // 604800: '1 week',\n};\n\nconst mapStateToProps = state => ({\n  filters: state.get('filters'),\n});\n\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Filters extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    phrase: '',\n    expires_at: '',\n    home_timeline: true,\n    public_timeline: false,\n    notifications: false,\n    conversations: false,\n    irreversible: false,\n    whole_word: true,\n  }\n\n\n  componentDidMount() {\n    this.props.dispatch(fetchFilters());\n  }\n\n  handleInputChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleSelectChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleCheckboxChange = e => {\n    this.setState({ [e.target.name]: e.target.checked });\n  }\n\n  handleAddNew = e => {\n    e.preventDefault();\n    const { intl, dispatch } = this.props;\n    const { phrase, whole_word, expires_at, irreversible } = this.state;\n    const { home_timeline, public_timeline, notifications, conversations } = this.state;\n    let context = [];\n\n    if (home_timeline) {\n      context.push('home');\n    };\n    if (public_timeline) {\n      context.push('public');\n    };\n    if (notifications) {\n      context.push('notifications');\n    };\n    if (conversations) {\n      context.push('thread');\n    };\n\n    dispatch(createFilter(phrase, expires_at, context, whole_word, irreversible)).then(response => {\n      return dispatch(fetchFilters());\n    }).catch(error => {\n      dispatch(snackbar.error(intl.formatMessage(messages.create_error)));\n    });\n  }\n\n  handleFilterDelete = e => {\n    const { intl, dispatch } = this.props;\n    dispatch(deleteFilter(e.currentTarget.dataset.value)).then(response => {\n      return dispatch(fetchFilters());\n    }).catch(error => {\n      dispatch(snackbar.error(intl.formatMessage(messages.delete_error)));\n    });\n  }\n\n\n  render() {\n    const { intl, filters } = this.props;\n    const emptyMessage = <FormattedMessage id='empty_column.filters' defaultMessage=\"You haven't created any muted words yet.\" />;\n\n    return (\n      <Column className='filter-settings-panel' icon='filter' heading={intl.formatMessage(messages.heading)} backBtnSlim>\n        <ColumnSubheading text={intl.formatMessage(messages.subheading_add_new)} />\n        <SimpleForm>\n          <div className='filter-settings-panel'>\n            <fieldset disabled={false}>\n              <FieldsGroup>\n                <div className='two-col'>\n                  <SimpleInput\n                    label={intl.formatMessage(messages.keyword)}\n                    required\n                    type='text'\n                    name='phrase'\n                    onChange={this.handleInputChange}\n                  />\n                  <div className='input with_label required'>\n                    <SelectDropdown\n                      label={intl.formatMessage(messages.expires)}\n                      hint={intl.formatMessage(messages.expires_hint)}\n                      items={expirations}\n                      defaultValue={expirations.never}\n                      onChange={this.handleSelectChange}\n                    />\n                  </div>\n                </div>\n              </FieldsGroup>\n\n              <FieldsGroup>\n                <label className='checkboxes required'>\n                  <FormattedMessage id='filters.context_header' defaultMessage='Filter contexts' />\n                </label>\n                <span className='hint'>\n                  <FormattedMessage id='filters.context_hint' defaultMessage='One or multiple contexts where the filter should apply' />\n                </span>\n                <div className='two-col'>\n                  <Checkbox\n                    label={intl.formatMessage(messages.home_timeline)}\n                    name='home_timeline'\n                    checked={this.state.home_timeline}\n                    onChange={this.handleCheckboxChange}\n                  />\n                  <Checkbox\n                    label={intl.formatMessage(messages.public_timeline)}\n                    name='public_timeline'\n                    checked={this.state.public_timeline}\n                    onChange={this.handleCheckboxChange}\n                  />\n                  <Checkbox\n                    label={intl.formatMessage(messages.notifications)}\n                    name='notifications'\n                    checked={this.state.notifications}\n                    onChange={this.handleCheckboxChange}\n                  />\n                  <Checkbox\n                    label={intl.formatMessage(messages.conversations)}\n                    name='conversations'\n                    checked={this.state.conversations}\n                    onChange={this.handleCheckboxChange}\n                  />\n                </div>\n\n              </FieldsGroup>\n\n              <FieldsGroup>\n                <Checkbox\n                  label={intl.formatMessage(messages.drop_header)}\n                  hint={intl.formatMessage(messages.drop_hint)}\n                  name='irreversible'\n                  checked={this.state.irreversible}\n                  onChange={this.handleCheckboxChange}\n                />\n                <Checkbox\n                  label={intl.formatMessage(messages.whole_word_header)}\n                  hint={intl.formatMessage(messages.whole_word_hint)}\n                  name='whole_word'\n                  checked={this.state.whole_word}\n                  onChange={this.handleCheckboxChange}\n                />\n              </FieldsGroup>\n            </fieldset>\n\n            <Button className='button button-primary setup' text={intl.formatMessage(messages.add_new)} onClick={this.handleAddNew} />\n\n            <ColumnSubheading text={intl.formatMessage(messages.subheading_filters)} />\n\n            <ScrollableList\n              scrollKey='filters'\n              emptyMessage={emptyMessage}\n            >\n              {filters.map((filter, i) => (\n                <div key={i} className='filter__container'>\n                  <div className='filter__details'>\n                    <div className='filter__phrase'>\n                      <span className='filter__list-label'><FormattedMessage id='filters.filters_list_phrase_label' defaultMessage='Keyword or phrase:' /></span>\n                      <span className='filter__list-value'>{filter.get('phrase')}</span>\n                    </div>\n                    <div className='filter__contexts'>\n                      <span className='filter__list-label'><FormattedMessage id='filters.filters_list_context_label' defaultMessage='Filter contexts:' /></span>\n                      <span className='filter__list-value'>\n                        {filter.get('context').map((context, i) => (\n                          <span key={i} className='context'>{context}</span>\n                        ))}\n                      </span>\n                    </div>\n                    <div className='filter__details'>\n                      <span className='filter__list-label'><FormattedMessage id='filters.filters_list_details_label' defaultMessage='Filter settings:' /></span>\n                      <span className='filter__list-value'>\n                        {filter.get('irreversible') ?\n                          <span><FormattedMessage id='filters.filters_list_drop' defaultMessage='Drop' /></span> :\n                          <span><FormattedMessage id='filters.filters_list_hide' defaultMessage='Hide' /></span>\n                        }\n                        {filter.get('whole_word') &&\n                          <span><FormattedMessage id='filters.filters_list_whole-word' defaultMessage='Whole word' /></span>\n                        }\n                      </span>\n                    </div>\n                  </div>\n                  <div className='filter__delete' role='button' tabIndex='0' onClick={this.handleFilterDelete} data-value={filter.get('id')} aria-label={intl.formatMessage(messages.delete)}>\n                    <Icon className='filter__delete-icon' id='times' size={40} />\n                    <span className='filter__delete-label'><FormattedMessage id='filters.filters_list_delete' defaultMessage='Delete' /></span>\n                  </div>\n                </div>\n              ))}\n            </ScrollableList>\n\n          </div>\n        </SimpleForm>\n\n\n\n\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
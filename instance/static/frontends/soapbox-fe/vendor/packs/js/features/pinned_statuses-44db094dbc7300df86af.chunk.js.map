{"version":3,"sources":["webpack:///./app/soapbox/features/pinned_statuses/index.js"],"names":["PinnedStatuses","connect","state","username","params","me","get","meUsername","getIn","isMyAccount","toLowerCase","statusIds","hasMore","injectIntl","componentDidMount","this","props","dispatch","fetchPinnedStatuses","render","scrollKey","emptyMessage","id","defaultMessage","ImmutablePureComponent","PropTypes","func","isRequired","ImmutablePropTypes","list","intl","object","bool"],"mappings":"kRAuBMA,EAFUC,kBAVQ,SAACC,EAAD,GAAsC,IAAlBC,EAAiB,EAA3BC,OAAUD,SACpCE,EAAKH,EAAMI,IAAI,MACfC,EAAaL,EAAMM,MAAM,CAAC,WAAYH,EAAI,aAChD,MAAO,CACLI,YAAcN,EAASO,gBAAkBH,EAAWG,cACpDC,UAAWT,EAAMM,MAAM,CAAC,eAAgB,OAAQ,UAChDI,UAAWV,EAAMM,MAAM,CAAC,eAAgB,OAAQ,W,GAKnDK,a,8GAWCC,kBAAA,WACEC,KAAKC,MAAMC,SAASC,gB,EAGtBC,OAAA,WAAU,IAAD,EACqCJ,KAAKC,MAAzCL,EADD,EACCA,UAAWC,EADZ,EACYA,QAEnB,OAHO,EACqBH,YAW1B,YAAC,IAAD,UACE,YAAC,IAAD,CACEE,UAAWA,EACXS,UAAU,kBACVR,QAASA,EACTS,aAAc,YAAC,IAAD,CAAkBC,GAAG,uBAAuBC,eAAe,wBAZ3E,YAAC,IAAD,UACE,YAAC,IAAD,M,GApBmBC,K,0BAER,CACjBP,SAAUQ,IAAUC,KAAKC,WACzBhB,UAAWiB,IAAmBC,KAAKF,WACnCG,KAAML,IAAUM,OAAOJ,WACvBf,QAASa,IAAUO,KAAKL,WACxBlB,YAAagB,IAAUO,KAAKL,a","file":"js/features/pinned_statuses-44db094dbc7300df86af.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { fetchPinnedStatuses } from '../../actions/pin_statuses';\nimport Column from '../ui/components/column';\nimport StatusList from '../../components/status_list';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport MissingIndicator from 'soapbox/components/missing_indicator';\n\nconst mapStateToProps = (state, { params: { username } }) => {\n  const me = state.get('me');\n  const meUsername = state.getIn(['accounts', me, 'username']);\n  return {\n    isMyAccount: (username.toLowerCase() === meUsername.toLowerCase()),\n    statusIds: state.getIn(['status_lists', 'pins', 'items']),\n    hasMore: !!state.getIn(['status_lists', 'pins', 'next']),\n  };\n};;\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass PinnedStatuses extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasMore: PropTypes.bool.isRequired,\n    isMyAccount: PropTypes.bool.isRequired,\n  };\n\n  componentDidMount() {\n    this.props.dispatch(fetchPinnedStatuses());\n  }\n\n  render() {\n    const { statusIds, hasMore, isMyAccount } = this.props;\n\n    if (!isMyAccount) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    return (\n      <Column>\n        <StatusList\n          statusIds={statusIds}\n          scrollKey='pinned_statuses'\n          hasMore={hasMore}\n          emptyMessage={<FormattedMessage id='pinned_statuses.none' defaultMessage='No pins to show.' />}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
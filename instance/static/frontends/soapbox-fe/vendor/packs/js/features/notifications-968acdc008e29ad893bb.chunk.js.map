{"version":3,"sources":["webpack:///./app/soapbox/features/notifications/components/notification.js","webpack:///./app/soapbox/features/notifications/components/follow_request.js","webpack:///./app/soapbox/features/notifications/containers/follow_request_container.js","webpack:///./app/soapbox/features/notifications/containers/notification_container.js","webpack:///./app/soapbox/features/notifications/components/clear_column_button.js","webpack:///./app/soapbox/features/notifications/components/multi_setting_toggle.js","webpack:///./app/soapbox/features/notifications/components/column_settings.js","webpack:///./app/soapbox/features/notifications/containers/column_settings_container.js","webpack:///./app/soapbox/features/notifications/components/filter_bar.js","webpack:///./app/soapbox/features/notifications/containers/filter_bar_container.js","webpack:///./app/soapbox/features/notifications/index.js"],"names":["notificationForScreenReader","intl","message","timestamp","output","push","formatDate","hour","minute","month","day","join","messages","defineMessages","authorize","reject","FollowRequest","injectIntl","render","this","props","hidden","account","onAuthorize","onReject","get","className","title","href","to","size","formatMessage","icon","onClick","ImmutablePureComponent","ImmutablePropTypes","map","isRequired","PropTypes","func","object","connect","getAccount","makeGetAccount","state","id","dispatch","authorizeFollowRequest","rejectFollowRequest","Notification","notification","onMoveUp","onMoveDown","context","router","history","getIn","handleOpenProfile","e","preventDefault","onMention","status","onFavourite","onReblog","onToggleHidden","getHandlers","reply","handleMention","favourite","handleHotkeyFavourite","boost","handleHotkeyBoost","mention","open","handleOpen","openProfile","moveUp","handleMoveUp","moveDown","handleMoveDown","toggleHidden","handleHotkeyToggleHidden","renderFollow","link","handlers","tabIndex","aria-label","defaultMessage","name","fixedWidth","values","withNote","renderFollowRequest","unread","classNames","renderMention","withDismiss","contextType","getScrollPosition","updateScrollBottom","cachedMediaWidth","cacheMediaWidth","renderChatMention","dangerouslySetInnerHTML","__html","emojify","renderEmojiReact","muted","renderFavourite","renderReblog","renderPoll","displayNameHtml","bool","number","getNotification","makeGetNotification","getStatus","makeGetStatus","accountId","mentionCompose","onModalReblog","reblog","_","getState","boostModal","getSettings","unreblog","shiftKey","openModal","unfavourite","revealStatus","hideStatus","ClearColumnButton","React","PureComponent","MultiSettingToggle","target","i","settingPaths","length","onChange","checked","settingPath","settings","prefix","label","icons","ariaLabel","filter","Boolean","every","areTrue","onKeyDown","htmlFor","ColumnSettings","path","soundSettings","pushSettings","onClear","filterShowStr","filterAdvancedStr","alertStr","allSoundsStr","showStr","soundStr","showPushSettings","pushStr","role","aria-labelledby","onAllSoundsChange","onPushChange","clearMessage","clearConfirm","changePushNotifications","slice","changeSetting","setFilter","confirm","onConfirm","clearNotifications","tooltips","mentions","favourites","boosts","polls","follows","emoji_reacts","FilterBar","notificationType","selectFilter","selectedFilter","advancedMode","newActiveFilter","queue","getNotifications","createSelector","ImmutableList","item","keys","toList","showFilterBar","allowedType","excludedTypes","notifications","filterNot","includes","Notifications","isLoading","isUnread","hasMore","totalQueuedNotificationsCount","maxId","expandNotifications","last","leading","scrollTopNotifications","c","column","elementIndex","findIndex","_selectChild","dequeueNotifications","componentWillUnmount","handleLoadOlder","cancel","handleScrollToTop","handleScroll","componentDidMount","handleDequeueNotifications","index","align_top","container","node","element","querySelector","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","emptyMessage","scrollableContent","filterBarContainer","disabled","handleLoadGap","scrollContainer","scrollKey","showLoading","onLoadMore","onScrollToTop","onScroll","ref","setColumnRef","active","count"],"mappings":"kGAcoC,SAA9BA,EAA+BC,EAAMC,EAASC,GAClD,IAAMC,EAAS,CAACF,GAIhB,OAFAE,EAAOC,KAAKJ,EAAKK,WAAWH,EAAW,CAAEI,KAAM,UAAWC,OAAQ,UAAWC,MAAO,QAASC,IAAK,aAE3FN,EAAOO,KAAK,M,sPCTfC,EAAWC,YAAe,CAC9BC,UAAU,CAAD,0DACTC,OAAO,CAAD,sDAIFC,EADUC,a,sGAUdC,OAAA,WAAU,IAAD,EACkDC,KAAKC,MAAtDnB,EADD,EACCA,KAAMoB,EADP,EACOA,OAAQC,EADf,EACeA,QAASC,EADxB,EACwBA,YAAaC,EADrC,EACqCA,SAE5C,OAAKF,EAIDD,EAEA,YAAC,WAAD,UACGC,EAAQG,IAAI,gBACZH,EAAQG,IAAI,aAMjB,mBAAKC,UAAU,gBAAf,EACE,mBAAKA,UAAU,yBAAf,EACE,YAAC,IAAD,CAAmCA,UAAU,wBAAwBC,MAAOL,EAAQG,IAAI,QAASG,KAAMN,EAAQG,IAAI,OAAQI,GAAE,KAAOP,EAAQG,IAAI,SAAhIH,EAAQG,IAAI,MAC1B,mBAAKC,UAAU,gCAAf,EAAyC,YAAC,IAAD,CAAQJ,QAASA,EAASQ,KAAM,MACzE,YAAC,IAAD,CAAaR,QAASA,KAGxB,mBAAKI,UAAU,8BAAf,EACE,YAAC,IAAD,CAAYC,MAAO1B,EAAK8B,cAAcnB,EAASE,WAAYkB,KAAK,QAAQC,QAASV,IACjF,YAAC,IAAD,CAAYI,MAAO1B,EAAK8B,cAAcnB,EAASG,QAASiB,KAAK,QAAQC,QAAST,OAtB7E,uB,GAbeU,K,0BAEP,CACjBZ,QAASa,IAAmBC,IAAIC,WAChCd,YAAae,IAAUC,KAAKF,WAC5Bb,SAAUc,IAAUC,KAAKF,WACzBpC,KAAMqC,IAAUE,OAAOH,a,iBCGZI,oBApBa,WAC1B,IAAMC,EAAaC,cAMnB,OAJwB,SAACC,EAAOxB,GAAR,MAAmB,CACzCE,QAASoB,EAAWE,EAAOxB,EAAMyB,OAMV,SAACC,EAAD,OAAaD,EAAb,EAAaA,GAAb,MAAuB,CAChDtB,YADgD,WAE9CuB,EAASC,YAAuBF,KAGlCrB,SALgD,WAM9CsB,EAASE,YAAoBH,OAIlBJ,CAAiDzB,G,iCFF1DiC,EADUhC,a,iMAwBC,WAAO,IAAD,EACgB,EAAKG,MAAhC8B,EADW,EACXA,cACRC,EAFmB,EACGA,UACbD,EAAazB,IAAI,S,4CAGX,WAAO,IAAD,EACgB,EAAKL,MAAlC8B,EADa,EACbA,cACRE,EAFqB,EACCA,YACXF,EAAazB,IAAI,S,wCAGjB,WAAO,IACVyB,EAAiB,EAAK9B,MAAtB8B,aAEJA,EAAazB,IAAI,UACnB,EAAK4B,QAAQC,OAAOC,QAAQlD,KAA5B,KAAsC6C,EAAaM,MAAM,CAAC,UAAW,SAArE,UAAuFN,EAAazB,IAAI,WAExG,EAAKgC,sB,+CAIW,WAAO,IACjBP,EAAiB,EAAK9B,MAAtB8B,aACR,EAAKG,QAAQC,OAAOC,QAAQlD,KAA5B,KAAsC6C,EAAaM,MAAM,CAAC,UAAW,Y,2CAGvD,SAAAE,GACdA,EAAEC,iBADiB,MAGiB,EAAKvC,MAAjC8B,EAHW,EAGXA,cACRU,EAJmB,EAGGA,WACZV,EAAazB,IAAI,WAAY,EAAK4B,QAAQC,OAAOC,W,mDAGrC,WAAO,IACrBM,EAAW,EAAKzC,MAAhByC,OACJA,GAAQ,EAAKzC,MAAM0C,YAAYD,K,+CAGjB,SAAAH,GAAM,IAChBG,EAAW,EAAKzC,MAAhByC,OACJA,GAAQ,EAAKzC,MAAM2C,SAASF,EAAQH,K,sDAGf,WAAO,IACxBG,EAAW,EAAKzC,MAAhByC,OACJA,GAAQ,EAAKzC,MAAM4C,eAAeH,K,8CAGxCI,YAAA,WACE,MAAO,CACLC,MAAO/C,KAAKgD,cACZC,UAAWjD,KAAKkD,sBAChBC,MAAOnD,KAAKoD,kBACZC,QAASrD,KAAKgD,cACdM,KAAMtD,KAAKuD,WACXC,YAAaxD,KAAKsC,kBAClBmB,OAAQzD,KAAK0D,aACbC,SAAU3D,KAAK4D,eACfC,aAAc7D,KAAK8D,2B,EAIvBC,aAAA,SAAahC,EAAc5B,EAAS6D,GAAO,IACjClF,EAASkB,KAAKC,MAAdnB,KAER,OACE,YAAC,UAAD,CAASmF,SAAUjE,KAAK8C,oBAAxB,EACE,mBAAKvC,UAAU,6CAA6C2D,SAAS,IAAIC,aAAYtF,EAA4BC,EAAMA,EAAK8B,cAAc,CAAEc,GAAI,sBAAuB0C,eAAgB,uBAAyB,CAAEC,KAAMlE,EAAQG,IAAI,UAAYyB,EAAazB,IAAI,qBAAjQ,EACE,mBAAKC,UAAU,8BAAf,EACE,mBAAKA,UAAU,6CAAf,EACE,YAAC,IAAD,CAAMmB,GAAG,YAAY4C,YAAU,KAGjC,oBAAM9D,MAAOuB,EAAazB,IAAI,oBAA9B,EACE,YAAC,IAAD,CAAkBoB,GAAG,sBAAsB0C,eAAe,sBAAsBG,OAAQ,CAAEF,KAAML,OAIpG,YAAC,IAAD,CAAkBtC,GAAIvB,EAAQG,IAAI,MAAOkE,UAAU,EAAOtE,OAAQF,KAAKC,MAAMC,Y,EAMrFuE,oBAAA,SAAoB1C,EAAc5B,EAAS6D,GAAO,IAAD,EACtBhE,KAAKC,MAAtBnB,EADuC,EACvCA,KAAM4F,EADiC,EACjCA,OAEd,OACE,YAAC,UAAD,CAAST,SAAUjE,KAAK8C,oBAAxB,EACE,mBAAKvC,UAAWoE,IAAW,qDAAsD,CAAED,WAAWR,SAAS,IAAIC,aAAYtF,EAA4BC,EAAMA,EAAK8B,cAAc,CAAEc,GAAI,8BAA+B0C,eAAgB,sCAAwC,CAAEC,KAAMlE,EAAQG,IAAI,UAAYyB,EAAazB,IAAI,qBAA1T,EACE,mBAAKC,UAAU,8BAAf,EACE,mBAAKA,UAAU,6CAAf,EACE,YAAC,IAAD,CAAMmB,GAAG,OAAO4C,YAAU,KAG5B,oBAAM9D,MAAOuB,EAAazB,IAAI,oBAA9B,EACE,YAAC,IAAD,CAAkBoB,GAAG,8BAA8B0C,eAAe,qCAAqCG,OAAQ,CAAEF,KAAML,OAI3H,YAAC,EAAD,CAAwBtC,GAAIvB,EAAQG,IAAI,MAAOkE,UAAU,EAAOtE,OAAQF,KAAKC,MAAMC,Y,EAM3F0E,cAAA,SAAc7C,GACZ,OACE,YAAC,IAAD,CACEL,GAAIK,EAAazB,IAAI,UACrBuE,aAAW,EACX3E,OAAQF,KAAKC,MAAMC,OACnB+B,WAAYjC,KAAK4D,eACjB5B,SAAUhC,KAAK0D,aACfoB,YAAY,gBACZC,kBAAmB/E,KAAKC,MAAM8E,kBAC9BC,mBAAoBhF,KAAKC,MAAM+E,mBAC/BC,iBAAkBjF,KAAKC,MAAMgF,iBAC7BC,gBAAiBlF,KAAKC,MAAMiF,mB,EAKlCC,kBAAA,SAAkBpD,EAAciC,GAAO,IAC7BlF,EAASkB,KAAKC,MAAdnB,KAER,OACE,YAAC,UAAD,CAASmF,SAAUjE,KAAK8C,oBAAxB,EACE,mBAAKvC,UAAU,mDAAmD2D,SAAS,IAAIC,aAAYtF,EAA4BC,EAAMA,EAAK8B,cAAc,CAAEc,GAAI,4BAA6B0C,eAAgB,6BAA+B,CAAEC,KAAMtC,EAAaM,MAAM,CAAC,UAAW,WAAaN,EAAazB,IAAI,qBAAvS,EACE,mBAAKC,UAAU,8BAAf,EACE,mBAAKA,UAAU,6CAAf,EACE,YAAC,IAAD,CAAMmB,GAAG,UAAU4C,YAAU,KAG/B,oBAAM9D,MAAOuB,EAAazB,IAAI,oBAA9B,EACE,YAAC,IAAD,CAAkBoB,GAAG,4BAA4B0C,eAAe,4BAA4BG,OAAQ,CAAEF,KAAML,QAKlH,mBAAKzD,UAAU,qBAAf,EACE,oBACEA,UAAU,uBACV6E,wBAAyB,CAAEC,OAAQC,YAAQvD,EAAaM,MAAM,CAAC,eAAgB,mB,EAOzFkD,iBAAA,SAAiBxD,EAAciC,GAAO,IAC5BlF,EAASkB,KAAKC,MAAdnB,KAER,OACE,YAAC,UAAD,CAASmF,SAAUjE,KAAK8C,oBAAxB,EACE,mBAAKvC,UAAU,kDAAkD2D,SAAS,IAAIC,aAAYtF,EAA4BC,EAAMA,EAAK8B,cAAc,CAAEc,GAAI,sCAAuC0C,eAAgB,+BAAiC,CAAEC,KAAMtC,EAAaM,MAAM,CAAC,UAAW,WAAaN,EAAazB,IAAI,qBAAlT,EACE,mBAAKC,UAAU,8BAAf,EACE,mBAAKA,UAAU,6CAAf,EACE,oBAAM6E,wBAAyB,CAAEC,OAAQC,YAAQA,YAAQvD,EAAazB,IAAI,eAG5E,oBAAME,MAAOuB,EAAazB,IAAI,oBAA9B,EACE,YAAC,IAAD,CAAkBoB,GAAG,sCAAsC0C,eAAe,8BAA8BG,OAAQ,CAAEF,KAAML,OAI5H,YAAC,IAAD,CACEtC,GAAIK,EAAazB,IAAI,UACrBH,QAAS4B,EAAazB,IAAI,WAC1BkF,OAAK,EACLX,aAAW,EACX3E,SAAUF,KAAKC,MAAMC,OACrB6E,kBAAmB/E,KAAKC,MAAM8E,kBAC9BC,mBAAoBhF,KAAKC,MAAM+E,mBAC/BC,iBAAkBjF,KAAKC,MAAMgF,iBAC7BC,gBAAiBlF,KAAKC,MAAMiF,qB,EAOtCO,gBAAA,SAAgB1D,EAAciC,GAAO,IAC3BlF,EAASkB,KAAKC,MAAdnB,KAER,OACE,YAAC,UAAD,CAASmF,SAAUjE,KAAK8C,oBAAxB,EACE,mBAAKvC,UAAU,gDAAgD2D,SAAS,IAAIC,aAAYtF,EAA4BC,EAAMA,EAAK8B,cAAc,CAAEc,GAAI,yBAA0B0C,eAAgB,0BAA4B,CAAEC,KAAMtC,EAAaM,MAAM,CAAC,UAAW,WAAaN,EAAazB,IAAI,qBAA9R,EACE,mBAAKC,UAAU,8BAAf,EACE,mBAAKA,UAAU,6CAAf,EACE,YAAC,IAAD,CAAMmB,GAAG,YAAYnB,UAAU,YAAY+D,YAAU,KAGvD,oBAAM9D,MAAOuB,EAAazB,IAAI,oBAA9B,EACE,YAAC,IAAD,CAAkBoB,GAAG,yBAAyB0C,eAAe,yBAAyBG,OAAQ,CAAEF,KAAML,OAI1G,YAAC,IAAD,CACEtC,GAAIK,EAAazB,IAAI,UACrBH,QAAS4B,EAAazB,IAAI,WAC1BkF,OAAK,EACLX,aAAW,EACX3E,SAAUF,KAAKC,MAAMC,OACrB6E,kBAAmB/E,KAAKC,MAAM8E,kBAC9BC,mBAAoBhF,KAAKC,MAAM+E,mBAC/BC,iBAAkBjF,KAAKC,MAAMgF,iBAC7BC,gBAAiBlF,KAAKC,MAAMiF,qB,EAOtCQ,aAAA,SAAa3D,EAAciC,GAAO,IACxBlF,EAASkB,KAAKC,MAAdnB,KAER,OACE,YAAC,UAAD,CAASmF,SAAUjE,KAAK8C,oBAAxB,EACE,mBAAKvC,UAAU,6CAA6C2D,SAAS,IAAIC,aAAYtF,EAA4BC,EAAMA,EAAK8B,cAAc,CAAEc,GAAI,sBAAuB0C,eAAgB,6BAA+B,CAAEC,KAAMtC,EAAaM,MAAM,CAAC,UAAW,WAAaN,EAAazB,IAAI,qBAA3R,EACE,mBAAKC,UAAU,8BAAf,EACE,mBAAKA,UAAU,6CAAf,EACE,YAAC,IAAD,CAAMmB,GAAG,UAAU4C,YAAU,KAG/B,oBAAM9D,MAAOuB,EAAazB,IAAI,oBAA9B,EACE,YAAC,IAAD,CAAkBoB,GAAG,sBAAsB0C,eAAe,4BAA4BG,OAAQ,CAAEF,KAAML,OAI1G,YAAC,IAAD,CACEtC,GAAIK,EAAazB,IAAI,UACrBH,QAAS4B,EAAazB,IAAI,WAC1BkF,OAAK,EACLX,aAAW,EACX3E,OAAQF,KAAKC,MAAMC,OACnB6E,kBAAmB/E,KAAKC,MAAM8E,kBAC9BC,mBAAoBhF,KAAKC,MAAM+E,mBAC/BC,iBAAkBjF,KAAKC,MAAMgF,iBAC7BC,gBAAiBlF,KAAKC,MAAMiF,qB,EAOtCS,WAAA,SAAW5D,GAAe,IAChBjD,EAASkB,KAAKC,MAAdnB,KAER,OACE,YAAC,UAAD,CAASmF,SAAUjE,KAAK8C,oBAAxB,EACE,mBAAKvC,UAAU,2CAA2C2D,SAAS,IAAIC,aAAYtF,EAA4BC,EAAMA,EAAK8B,cAAc,CAAEc,GAAI,oBAAqB0C,eAAgB,uCAAyCrC,EAAazB,IAAI,qBAA7O,EACE,mBAAKC,UAAU,8BAAf,EACE,mBAAKA,UAAU,6CAAf,EACE,YAAC,IAAD,CAAMmB,GAAG,QAAQ4C,YAAU,KAG7B,oBAAM9D,MAAOuB,EAAazB,IAAI,oBAA9B,EACE,YAAC,IAAD,CAAkBoB,GAAG,oBAAoB0C,eAAe,yCAI5D,YAAC,IAAD,CACE1C,GAAIK,EAAazB,IAAI,UACrBH,QAAS4B,EAAazB,IAAI,WAC1BkF,OAAK,EACLX,aAAW,EACX3E,OAAQF,KAAKC,MAAMC,OACnB6E,kBAAmB/E,KAAKC,MAAM8E,kBAC9BC,mBAAoBhF,KAAKC,MAAM+E,mBAC/BC,iBAAkBjF,KAAKC,MAAMgF,iBAC7BC,gBAAiBlF,KAAKC,MAAMiF,qB,EAOtCnF,OAAA,WAAU,IACAgC,EAAiB/B,KAAKC,MAAtB8B,aACF5B,EAAmB4B,EAAazB,IAAI,WACpCsF,EAAmB,CAAEP,OAAQlF,EAAQG,IAAI,sBACzC0D,EAAmB,4BAAK,YAAC,IAAD,CAAWzD,UAAU,6BAA6BE,KAAI,KAAON,EAAQG,IAAI,QAAWE,MAAOL,EAAQG,IAAI,QAASI,GAAE,KAAOP,EAAQG,IAAI,QAAW8E,wBAAyBQ,KAEvM,OAAO7D,EAAazB,IAAI,SACxB,IAAK,SACH,OAAON,KAAK+D,aAAahC,EAAc5B,EAAS6D,GAClD,IAAK,iBACH,OAAOhE,KAAKyE,oBAAoB1C,EAAc5B,EAAS6D,GACzD,IAAK,UACH,OAAOhE,KAAK4E,cAAc7C,GAC5B,IAAK,YACH,OAAO/B,KAAKyF,gBAAgB1D,EAAciC,GAC5C,IAAK,SACH,OAAOhE,KAAK0F,aAAa3D,EAAciC,GACzC,IAAK,OACH,OAAOhE,KAAK2F,WAAW5D,GACzB,IAAK,yBACH,OAAO/B,KAAKuF,iBAAiBxD,EAAciC,GAC7C,IAAK,uBACH,OAAOhE,KAAKmF,kBAAkBpD,EAAciC,GAG9C,OAAO,M,GArUgBjD,K,6BAEH,CACpBoB,OAAQhB,IAAUE,S,0BAGD,CACjBU,aAAcf,IAAmBC,IAAIC,WACrChB,OAAQiB,IAAU0E,KAClB7D,SAAUb,IAAUC,KAAKF,WACzBe,WAAYd,IAAUC,KAAKF,WAC3BuB,UAAWtB,IAAUC,KAAKF,WAC1ByB,YAAaxB,IAAUC,KAAKF,WAC5B0B,SAAUzB,IAAUC,KAAKF,WACzB2B,eAAgB1B,IAAUC,KAAKF,WAC/BwB,OAAQ1B,IAAmBC,IAC3BnC,KAAMqC,IAAUE,OAAOH,WACvB6D,kBAAmB5D,IAAUC,KAC7B4D,mBAAoB7D,IAAUC,KAC9B8D,gBAAiB/D,IAAUC,KAC3B6D,iBAAkB9D,IAAU2E,S,iDG8BjBxE,qBAxDa,WAC1B,IAAMyE,EAAkBC,cAClBC,EAAYC,cAUlB,OARwB,SAACzE,EAAOxB,GAC9B,IAAM8B,EAAegE,EAAgBtE,EAAOxB,EAAM8B,aAAc9B,EAAMkG,WACtE,MAAO,CACLpE,aAAcA,EACdW,OAAQX,EAAazB,IAAI,UAAY2F,EAAUxE,EAAO,CAAEC,GAAIK,EAAazB,IAAI,YAAe,QAOvE,SAAAqB,GAAQ,MAAK,CACtCc,UAAW,SAACtC,EAASgC,GACnBR,EAASyE,aAAejG,EAASgC,KAGnCkE,cALsC,SAKxB3D,GACZf,EAAS2E,YAAO5D,KAGlBE,SATsC,SAS7BF,EAAQH,GAAI,IAAD,OAClBZ,EAAS,SAAC4E,EAAGC,GACX,IAAMC,EAAaC,YAAYF,KAAYlG,IAAI,cAC3CoC,EAAOpC,IAAI,aACbqB,EAASgF,YAASjE,IAEdH,EAAEqE,WAAaH,EACjB,EAAKJ,cAAc3D,GAEnBf,EAASkF,YAAU,QAAS,CAAEnE,SAAQE,SAAU,EAAKyD,oBAM7D1D,YAxBsC,SAwB1BD,GACNA,EAAOpC,IAAI,cACbqB,EAASmF,YAAYpE,IAErBf,EAASsB,YAAUP,KAIvBG,eAhCsC,SAgCvBH,GACTA,EAAOpC,IAAI,UACbqB,EAASoF,YAAarE,EAAOpC,IAAI,QAEjCqB,EAASqF,YAAWtE,EAAOpC,IAAI,WAKtBgB,CAAiDQ,GCpE3CmF,G,kGAMnBlH,OAAA,WACE,OACE,sBAAQQ,UAAU,sCAAsC2D,SAAS,IAAIpD,QAASd,KAAKC,MAAMa,cAAzF,EAAkG,YAAC,IAAD,CAAMY,GAAG,WAA3G,IAAuH,YAAC,IAAD,CAAkBA,GAAG,sBAAsB0C,eAAe,0B,GARxI8C,IAAMC,e,+BCAhCC,G,yLAeR,YACT,IAD0B,IAAdC,EAAa,EAAbA,OACHC,EAAI,EAAGA,EAAI,EAAKrH,MAAMsH,aAAaC,OAAQF,IAClD,EAAKrH,MAAMwH,SAAS,EAAKxH,MAAMsH,aAAaD,GAAID,EAAOK,W,qCAIjD,SAACC,GACT,OAAkD,IAA3C,EAAK1H,MAAM2H,SAASvF,MAAMsF,K,sCAGnC5H,OAAA,WAAU,IAAD,EACmDC,KAAKC,MAAvD4H,EADD,EACCA,OAAQN,EADT,EACSA,aAAcO,EADvB,EACuBA,MAAOC,EAD9B,EAC8BA,MAAOC,EADrC,EACqCA,UACtCtG,EAAK,CAAC,iBAAkBmG,GAAQI,OAAOC,SAAS1I,KAAK,KAE3D,OACE,mBAAKe,UAAU,iBAAiB4D,aAAY6D,QAA5C,EACE,YAAC,KAAD,CAAQtG,GAAIA,EAAIgG,QAASH,EAAaY,MAAMnI,KAAKoI,SAAUX,SAAUzH,KAAKyH,SAAUM,MAAOA,EAAOM,UAAWrI,KAAKqI,YACjHP,GAAU,qBAAOQ,QAAS5G,EAAInB,UAAU,8BAA9B,EAAuDuH,K,GAhC1BZ,IAAMC,eCGjCoB,G,6LASJ,SAACC,EAAMd,GACpB,EAAKzH,MAAMwH,SAAX,CAAqB,QAArB,OAAgCe,GAAOd,K,+CAGrB,SAACc,EAAMd,GAGzB,IAFA,IAAMe,EAAgB,CAAC,CAAC,SAAU,UAAW,CAAC,SAAU,aAAc,CAAC,SAAU,0BAA2B,CAAC,SAAU,WAAY,CAAC,SAAU,UAAW,CAAC,SAAU,SAE3JnB,EAAI,EAAGA,EAAImB,EAAcjB,OAAQF,IACxC,EAAKrH,MAAMwH,SAASgB,EAAcnB,GAAII,K,sCAI1C3H,OAAA,WAAU,IAAD,EAC+CC,KAAKC,MAAnD2H,EADD,EACCA,SAAUc,EADX,EACWA,aAAcjB,EADzB,EACyBA,SAAUkB,EADnC,EACmCA,QAEpCC,EAAgB,YAAC,IAAD,CAAkBlH,GAAG,gDAAgD0C,eAAe,SACpGyE,EAAoB,YAAC,IAAD,CAAkBnH,GAAG,oDAAoD0C,eAAe,2BAC5G0E,EAAY,YAAC,IAAD,CAAkBpH,GAAG,sCAAsC0C,eAAe,0BACtF2E,EAAgB,YAAC,IAAD,CAAkBrH,GAAG,kDAAkD0C,eAAe,qCACtG4E,EAAY,YAAC,IAAD,CAAkBtH,GAAG,qCAAqC0C,eAAe,mBACrF6E,EAAY,YAAC,IAAD,CAAkBvH,GAAG,sCAAsC0C,eAAe,eAEtF8E,EAAmBR,EAAapI,IAAI,mBAAqBoI,EAAapI,IAAI,gBAC1E6I,EAAUD,GAAoB,YAAC,IAAD,CAAkBxH,GAAG,qCAAqC0C,eAAe,uBAE7G,OACE,4BACE,mBAAK7D,UAAU,6BAAf,EACE,YAAC,GAAD,CAAmBO,QAAS6H,KAG9B,mBAAKS,KAAK,QAAQC,kBAAgB,iCAAlC,EACE,oBAAM3H,GAAG,2BAA2BnB,UAAU,iCAA9C,EACE,YAAC,IAAD,CAAkBmB,GAAG,uCAAuC0C,eAAe,YAE7E,YAAC,GAAD,CAAoByD,OAAO,2BAA2BD,SAAUA,EAAUL,aAd1D,CAAC,CAAC,SAAU,UAAW,CAAC,SAAU,aAAc,CAAC,SAAU,0BAA2B,CAAC,SAAU,WAAY,CAAC,SAAU,UAAW,CAAC,SAAU,SAcvDE,SAAUzH,KAAKsJ,kBAAmBxB,MAAOiB,KAGlJ,mBAAKK,KAAK,QAAQC,kBAAgB,iCAAlC,EACE,oBAAM3H,GAAG,2BAA2BnB,UAAU,iCAA9C,EACE,YAAC,IAAD,CAAkBmB,GAAG,oDAAoD0C,eAAe,sBAE1F,mBAAK7D,UAAU,6BAAf,EACE,YAAC,KAAD,CAAemB,GAAG,kBAAkBmG,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,cAAe,QAASF,SAAUA,EAAUK,MAAOc,IAChJ,YAAC,KAAD,CAAelH,GAAG,kBAAkBmG,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,cAAe,YAAaF,SAAUA,EAAUK,MAAOe,MAIxJ,mBAAKO,KAAK,QAAQC,kBAAgB,6BAAlC,EACE,oBAAM3H,GAAG,uBAAuBnB,UAAU,iCAA1C,EAAqE,YAAC,IAAD,CAAkBmB,GAAG,uCAAuC0C,eAAe,oBAEhJ,mBAAK7D,UAAU,6BAAf,EACE,YAAC,KAAD,CAAesH,OAAO,wBAAwBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUK,MAAOgB,IAC/HI,GAAoB,YAAC,KAAD,CAAerB,OAAO,qBAAqBD,SAAUc,EAAcf,YAAa,CAAC,SAAU,UAAWF,SAAUzH,KAAKuJ,aAAczB,MAAOqB,IAC/J,YAAC,KAAD,CAAetB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,QAAS,UAAWF,SAAUA,EAAUK,MAAOkB,IACvH,YAAC,KAAD,CAAenB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUK,MAAOmB,MAI5H,mBAAKG,KAAK,QAAQC,kBAAgB,qCAAlC,EACE,oBAAM3H,GAAG,+BAA+BnB,UAAU,iCAAlD,EAA6E,YAAC,IAAD,CAAkBmB,GAAG,+CAA+C0C,eAAe,0BAEhK,mBAAK7D,UAAU,6BAAf,EACE,YAAC,KAAD,CAAesH,OAAO,wBAAwBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,kBAAmBF,SAAUA,EAAUK,MAAOgB,IACvII,GAAoB,YAAC,KAAD,CAAerB,OAAO,qBAAqBD,SAAUc,EAAcf,YAAa,CAAC,SAAU,kBAAmBF,SAAUzH,KAAKuJ,aAAczB,MAAOqB,IACvK,YAAC,KAAD,CAAetB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,QAAS,kBAAmBF,SAAUA,EAAUK,MAAOkB,IAC/H,YAAC,KAAD,CAAenB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,kBAAmBF,SAAUA,EAAUK,MAAOmB,MAIpI,mBAAKG,KAAK,QAAQC,kBAAgB,gCAAlC,EACE,oBAAM3H,GAAG,0BAA0BnB,UAAU,iCAA7C,EAAwE,YAAC,IAAD,CAAkBmB,GAAG,0CAA0C0C,eAAe,YAEtJ,mBAAK7D,UAAU,6BAAf,EACE,YAAC,KAAD,CAAesH,OAAO,wBAAwBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,aAAcF,SAAUA,EAAUK,MAAOgB,IAClII,GAAoB,YAAC,KAAD,CAAerB,OAAO,qBAAqBD,SAAUc,EAAcf,YAAa,CAAC,SAAU,aAAcF,SAAUzH,KAAKuJ,aAAczB,MAAOqB,IAClK,YAAC,KAAD,CAAetB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,QAAS,aAAcF,SAAUA,EAAUK,MAAOkB,IAC1H,YAAC,KAAD,CAAenB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,aAAcF,SAAUA,EAAUK,MAAOmB,MAI/H,mBAAKG,KAAK,QAAQC,kBAAgB,kCAAlC,EACE,oBAAM3H,GAAG,0BAA0BnB,UAAU,iCAA7C,EAAwE,YAAC,IAAD,CAAkBmB,GAAG,4CAA4C0C,eAAe,mBAExJ,mBAAK7D,UAAU,6BAAf,EACE,YAAC,KAAD,CAAesH,OAAO,wBAAwBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,0BAA2BF,SAAUA,EAAUK,MAAOgB,IAC/II,GAAoB,YAAC,KAAD,CAAerB,OAAO,qBAAqBD,SAAUc,EAAcf,YAAa,CAAC,SAAU,0BAA2BF,SAAUzH,KAAKuJ,aAAczB,MAAOqB,IAC/K,YAAC,KAAD,CAAetB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,QAAS,0BAA2BF,SAAUA,EAAUK,MAAOkB,IACvI,YAAC,KAAD,CAAenB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,0BAA2BF,SAAUA,EAAUK,MAAOmB,MAI5I,mBAAKG,KAAK,QAAQC,kBAAgB,8BAAlC,EACE,oBAAM3H,GAAG,wBAAwBnB,UAAU,iCAA3C,EAAsE,YAAC,IAAD,CAAkBmB,GAAG,wCAAwC0C,eAAe,eAElJ,mBAAK7D,UAAU,6BAAf,EACE,YAAC,KAAD,CAAesH,OAAO,wBAAwBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,WAAYF,SAAUA,EAAUK,MAAOgB,IAChII,GAAoB,YAAC,KAAD,CAAerB,OAAO,qBAAqBD,SAAUc,EAAcf,YAAa,CAAC,SAAU,WAAYF,SAAUzH,KAAKuJ,aAAczB,MAAOqB,IAChK,YAAC,KAAD,CAAetB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,QAAS,WAAYF,SAAUA,EAAUK,MAAOkB,IACxH,YAAC,KAAD,CAAenB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,WAAYF,SAAUA,EAAUK,MAAOmB,MAI7H,mBAAKG,KAAK,QAAQC,kBAAgB,6BAAlC,EACE,oBAAM3H,GAAG,uBAAuBnB,UAAU,iCAA1C,EAAqE,YAAC,IAAD,CAAkBmB,GAAG,uCAAuC0C,eAAe,cAEhJ,mBAAK7D,UAAU,6BAAf,EACE,YAAC,KAAD,CAAesH,OAAO,wBAAwBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUK,MAAOgB,IAC/HI,GAAoB,YAAC,KAAD,CAAerB,OAAO,qBAAqBD,SAAUc,EAAcf,YAAa,CAAC,SAAU,UAAWF,SAAUzH,KAAKuJ,aAAczB,MAAOqB,IAC/J,YAAC,KAAD,CAAetB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,QAAS,UAAWF,SAAUA,EAAUK,MAAOkB,IACvH,YAAC,KAAD,CAAenB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,UAAWF,SAAUA,EAAUK,MAAOmB,MAI5H,mBAAKG,KAAK,QAAQC,kBAAgB,2BAAlC,EACE,oBAAM3H,GAAG,qBAAqBnB,UAAU,iCAAxC,EAAmE,YAAC,IAAD,CAAkBmB,GAAG,qCAAqC0C,eAAe,mBAE5I,mBAAK7D,UAAU,6BAAf,EACE,YAAC,KAAD,CAAesH,OAAO,wBAAwBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,QAASF,SAAUA,EAAUK,MAAOgB,IAC7HI,GAAoB,YAAC,KAAD,CAAerB,OAAO,qBAAqBD,SAAUc,EAAcf,YAAa,CAAC,SAAU,QAASF,SAAUzH,KAAKuJ,aAAczB,MAAOqB,IAC7J,YAAC,KAAD,CAAetB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,QAAS,QAASF,SAAUA,EAAUK,MAAOkB,IACrH,YAAC,KAAD,CAAenB,OAAO,gBAAgBD,SAAUA,EAAUD,YAAa,CAAC,SAAU,QAASF,SAAUA,EAAUK,MAAOmB,Q,GAlItF/B,IAAMC,e,UCC5C1H,GAAWC,YAAe,CAC9B8J,aAAa,CAAD,2HACZC,aAAa,CAAD,iEA+BC3J,eAAWwB,kBA5BF,SAAAG,GAAK,MAAK,CAChCmG,SAAUlB,YAAYjF,GAAOnB,IAAI,iBACjCoI,aAAcjH,EAAMnB,IAAI,wBAGC,SAACqB,EAAD,OAAa7C,EAAb,EAAaA,KAAb,MAAyB,CAElD2I,SAFkD,SAEzCe,EAAMd,GACG,SAAZc,EAAK,GACP7G,EAAS+H,aAAwBlB,EAAKmB,MAAM,GAAIjC,IAC3B,gBAAZc,EAAK,IACd7G,EAASiI,YAAc,CAAC,iBAAF,OAAsBpB,GAAOd,IACnD/F,EAASkI,YAAU,SAEnBlI,EAASiI,YAAc,CAAC,iBAAF,OAAsBpB,GAAOd,KAIvDiB,QAbkD,WAchDhH,EAASkF,YAAU,UAAW,CAC5B9H,QAASD,EAAK8B,cAAcnB,GAAS+J,cACrCM,QAAShL,EAAK8B,cAAcnB,GAASgK,cACrCM,UAAW,kBAAMpI,EAASqI,sBAMN1I,CAA6CiH,KCrCjE0B,GAAWvK,YAAe,CAC9BwK,SAAS,CAAD,8DACRC,WAAW,CAAD,6DACVC,OAAO,CAAD,2DACNC,MAAM,CAAD,+DACLC,QAAQ,CAAD,4DACPC,aAAa,CAAD,yEAIRC,GADU1K,Y,4GAUdgB,QAAA,SAAQ2J,GAAmB,IAAD,OACxB,OAAO,kBAAM,EAAKxK,MAAMyK,aAAaD,K,EAGvC1K,OAAA,WAAU,IAAD,EACwCC,KAAKC,MAA5C0K,EADD,EACCA,eAAgBC,EADjB,EACiBA,aAAc9L,EAD/B,EAC+BA,KA6EtC,OA5EyB8L,EAsBvB,mBAAKrK,UAAU,iCAAf,EACE,sBACEA,UAA8B,QAAnBoK,EAA2B,SAAW,GACjD7J,QAASd,KAAKc,QAAQ,aAFxB,EAIE,YAAC,IAAD,CACEY,GAAG,2BACH0C,eAAe,SAGnB,sBACE7D,UAA8B,YAAnBoK,EAA+B,SAAW,GACrD7J,QAASd,KAAKc,QAAQ,WACtBN,MAAO1B,EAAK8B,cAAcqJ,GAASC,gBAHrC,EAKE,YAAC,IAAD,CAAMxI,GAAG,KAAK4C,YAAU,KAE1B,sBACE/D,UAA8B,cAAnBoK,EAAiC,SAAW,GACvD7J,QAASd,KAAKc,QAAQ,aACtBN,MAAO1B,EAAK8B,cAAcqJ,GAASE,kBAHrC,EAKE,YAAC,IAAD,CAAMzI,GAAG,OAAO4C,YAAU,KAE5B,sBACE/D,UAA8B,2BAAnBoK,EAA8C,SAAW,GACpE7J,QAASd,KAAKc,QAAQ,0BACtBN,MAAO1B,EAAK8B,cAAcqJ,GAASE,kBAHrC,EAKE,YAAC,IAAD,CAAMzI,GAAG,OAAO4C,YAAU,KAE5B,sBACE/D,UAA8B,WAAnBoK,EAA8B,SAAW,GACpD7J,QAASd,KAAKc,QAAQ,UACtBN,MAAO1B,EAAK8B,cAAcqJ,GAASG,cAHrC,EAKE,YAAC,IAAD,CAAM1I,GAAG,UAAU4C,YAAU,KAE/B,sBACE/D,UAA8B,SAAnBoK,EAA4B,SAAW,GAClD7J,QAASd,KAAKc,QAAQ,QACtBN,MAAO1B,EAAK8B,cAAcqJ,GAASI,aAHrC,EAKE,YAAC,IAAD,CAAM3I,GAAG,QAAQ4C,YAAU,KAE7B,sBACE/D,UAA8B,WAAnBoK,EAA8B,SAAW,GACpD7J,QAASd,KAAKc,QAAQ,UACtBN,MAAO1B,EAAK8B,cAAcqJ,GAASK,eAHrC,EAKE,YAAC,IAAD,CAAM5I,GAAG,YAAY4C,YAAU,MAvEnC,mBAAK/D,UAAU,iCAAf,EACE,sBACEA,UAA8B,QAAnBoK,EAA2B,SAAW,GACjD7J,QAASd,KAAKc,QAAQ,aAFxB,EAIE,YAAC,IAAD,CACEY,GAAG,2BACH0C,eAAe,SAGnB,sBACE7D,UAA8B,YAAnBoK,EAA+B,SAAW,GACrD7J,QAASd,KAAKc,QAAQ,iBAFxB,EAIE,YAAC,IAAD,CACEY,GAAG,gCACH0C,eAAe,gB,GAhCH8C,IAAMC,iB,ECIf7F,qBAda,SAAAG,GAC1B,IAAMmG,EAAWlB,YAAYjF,GAC7B,MAAO,CACLkJ,eAAgB/C,EAASvF,MAAM,CAAC,gBAAiB,cAAe,WAChEuI,aAAgBhD,EAASvF,MAAM,CAAC,gBAAiB,cAAe,eAIzC,SAACV,GAAD,MAAe,CACxC+I,aADwC,SAC3BG,GACXlJ,EAASkI,YAAUgB,OAIRvJ,CAAiDkJ,I,sFCIhE,IAAM/K,GAAWC,YAAe,CAC9Bc,MAAM,CAAD,0DACLsK,MAAM,CAAD,sIAGDC,GAAmBC,aAAe,CACtC,SAAAvJ,GAAK,OAAIiF,YAAYjF,GAAOY,MAAM,CAAC,gBAAiB,cAAe,UACnE,SAAAZ,GAAK,OAAIiF,YAAYjF,GAAOY,MAAM,CAAC,gBAAiB,cAAe,YACnE,SAAAZ,GAAK,OAAIwJ,gBAAcvE,YAAYjF,GAAOY,MAAM,CAAC,gBAAiB,UAAU4F,OAAO,SAAAiD,GAAI,OAAKA,IAAMC,SAClG,SAAA1J,GAAK,OAAIA,EAAMY,MAAM,CAAC,gBAAiB,UAAU+I,WAChD,SAACC,EAAeC,EAAaC,EAAeC,GAC7C,OAAKH,GAAiC,QAAhBC,EAMfE,EAAcvD,OAAO,SAAAiD,GAAI,OAAa,OAATA,GAAiBI,IAAgBJ,EAAK5K,IAAI,UAFrEkL,EAAcC,UAAU,SAAAP,GAAI,OAAa,OAATA,GAAiBK,EAAcG,SAASR,EAAK5K,IAAI,aAgBtFqL,GAFUrK,kBATQ,SAAAG,GAAK,MAAK,CAChC4J,cAAe3E,YAAYjF,GAAOY,MAAM,CAAC,gBAAiB,cAAe,SACzEmJ,cAAeT,GAAiBtJ,GAChCmK,UAAWnK,EAAMY,MAAM,CAAC,gBAAiB,cAAc,GACvDwJ,SAAqD,EAA3CpK,EAAMY,MAAM,CAAC,gBAAiB,WACxCyJ,QAASrK,EAAMY,MAAM,CAAC,gBAAiB,YACvC0J,8BAA+BtK,EAAMY,MAAM,CAAC,gBAAiB,iCAAkC,K,GAIhGvC,Y,gMA2BiB,SAACkM,GACf,EAAK/L,MAAM0B,SAASsK,YAAoB,CAAED,a,6CAG1B,IAAS,WACzB,IAAME,EAAO,EAAKjM,MAAMuL,cAAcU,OACtC,EAAKjM,MAAM0B,SAASsK,YAAoB,CAAED,MAAOE,GAAQA,EAAK5L,IAAI,UACjE,IAAK,CAAE6L,SAAS,K,+CAEC,IAAS,WAC3B,EAAKlM,MAAM0B,SAASyK,aAAuB,KAC1C,M,0CAEY,IAAS,WACtB,EAAKnM,MAAM0B,SAASyK,aAAuB,KAC1C,M,0CAEY,SAAAC,GACb,EAAKC,OAASD,I,0CAGD,SAAA3K,GACb,IAAM6K,EAAe,EAAKtM,MAAMuL,cAAcgB,UAAU,SAAAtB,GAAI,OAAa,OAATA,GAAiBA,EAAK5K,IAAI,QAAUoB,IAAM,EAC1G,EAAK+K,aAAaF,GAAc,K,4CAGjB,SAAA7K,GACf,IAAM6K,EAAe,EAAKtM,MAAMuL,cAAcgB,UAAU,SAAAtB,GAAI,OAAa,OAATA,GAAiBA,EAAK5K,IAAI,QAAUoB,IAAM,EAC1G,EAAK+K,aAAaF,GAAc,K,wDAiBL,WAC3B,EAAKtM,MAAM0B,SAAS+K,iB,8CA1DtBC,qBAAA,WACE3M,KAAK4M,gBAAgBC,SACrB7M,KAAK8M,kBAAkBD,SACvB7M,KAAK+M,aAAaF,SAClB7M,KAAKC,MAAM0B,SAASyK,aAAuB,K,EAG7CY,kBAAA,WACEhN,KAAKiN,6BACLjN,KAAKC,MAAM0B,SAASyK,aAAuB,K,EAkC7CK,aAAA,SAAaS,EAAOC,GAClB,IAAMC,EAAYpN,KAAKsM,OAAOe,KACxBC,EAAUF,EAAUG,cAAV,wBAA+CL,EAAQ,GAAvD,gBAEZI,IACEH,GAAaC,EAAUI,UAAYF,EAAQG,UAC7CH,EAAQI,gBAAe,IACbP,GAAaC,EAAUI,UAAYJ,EAAUO,aAAeL,EAAQG,UAAYH,EAAQM,cAClGN,EAAQI,gBAAe,GAEzBJ,EAAQO,U,EAQZ9N,OAAA,WAAU,IAAD,SACqGC,KAAKC,MAAzGnB,EADD,EACCA,KAAM0M,EADP,EACOA,cAAeI,EADtB,EACsBA,UAAWC,EADjC,EACiCA,SAAUC,EAD3C,EAC2CA,QAAST,EADpD,EACoDA,cAAeU,EADnE,EACmEA,8BACpE+B,EAAe,YAAC,IAAD,CAAkBpM,GAAG,6BAA6B0C,eAAe,0FAElF2J,EAAoB,KAElBC,EAAqB3C,EACtB,YAAC,GAAD,IACD,KAGF0C,EADEnC,GAAa5L,KAAK+N,kBACA/N,KAAK+N,kBACK,EAArBvC,EAAc7K,MAAYmL,EACfN,EAAcvK,IAAI,SAACiK,EAAMgC,GAAP,OAA0B,OAAThC,EACrD,YAAC,KAAD,CAEE+C,SAAUrC,EACVI,MAAe,EAARkB,EAAY1B,EAAcnJ,MAAM,CAAC6K,EAAQ,EAAG,OAAS,KAC5DpM,QAAS,EAAKoN,eAHT,OAAS1C,EAAcnJ,MAAM,CAAC6K,EAAQ,EAAG,QAMhD,YAAC,GAAD,CAEEnL,aAAcmJ,EACd/E,UAAW+E,EAAK5K,IAAI,WACpB0B,SAAU,EAAK0B,aACfzB,WAAY,EAAK2B,gBAJZsH,EAAK5K,IAAI,SAQE,KAGtBN,KAAK+N,kBAAoBA,EAEzB,IAAMI,EACJ,YAAC,KAAD,CACEC,UAAU,gBACVxC,UAAWA,EACXyC,YAAazC,GAAoC,IAAvBJ,EAAc7K,KACxCmL,QAASA,EACTgC,aAAcA,EACdQ,WAAYtO,KAAK4M,gBACjB2B,cAAevO,KAAK8M,kBACpB0B,SAAUxO,KAAK+M,mBARjB,EAUGgB,GAIL,OACE,kBAAC,IAAD,CAAQU,IAAKzO,KAAK0O,aAAc5G,MAAOhJ,EAAK8B,cAAcnB,GAASe,QACjE,YAAC,IAAD,CAAcK,KAAK,OAAO8N,OAAQ9C,EAAUrL,MAAO1B,EAAK8B,cAAcnB,GAASe,aAA/E,EACE,YAAC,GAAD,KAEDwN,EACD,YAAC,KAAD,CACElN,QAASd,KAAKiN,2BACd2B,MAAO7C,EACPhN,QAASU,GAASqL,QAEnBqD,I,GAxImBjH,IAAMC,iB","file":"js/features/notifications-968acdc008e29ad893bb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusContainer from '../../../containers/status_container';\nimport AccountContainer from '../../../containers/account_container';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport Permalink from '../../../components/permalink';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport FollowRequestContainer from '../containers/follow_request_container';\nimport Icon from 'soapbox/components/icon';\nimport emojify from 'soapbox/features/emoji/emoji';\nimport classNames from 'classnames';\n\nconst notificationForScreenReader = (intl, message, timestamp) => {\n  const output = [message];\n\n  output.push(intl.formatDate(timestamp, { hour: '2-digit', minute: '2-digit', month: 'short', day: 'numeric' }));\n\n  return output.join(', ');\n};\n\nexport default @injectIntl\nclass Notification extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    notification: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    onMoveUp: PropTypes.func.isRequired,\n    onMoveDown: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onToggleHidden: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    intl: PropTypes.object.isRequired,\n    getScrollPosition: PropTypes.func,\n    updateScrollBottom: PropTypes.func,\n    cacheMediaWidth: PropTypes.func,\n    cachedMediaWidth: PropTypes.number,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  }\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  }\n\n  handleOpen = () => {\n    const { notification } = this.props;\n\n    if (notification.get('status')) {\n      this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}/posts/${notification.get('status')}`);\n    } else {\n      this.handleOpenProfile();\n    }\n  }\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  }\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  }\n\n  handleHotkeyFavourite = () => {\n    const { status } = this.props;\n    if (status) this.props.onFavourite(status);\n  }\n\n  handleHotkeyBoost = e => {\n    const { status } = this.props;\n    if (status) this.props.onReblog(status, e);\n  }\n\n  handleHotkeyToggleHidden = () => {\n    const { status } = this.props;\n    if (status) this.props.onToggleHidden(status);\n  }\n\n  getHandlers() {\n    return {\n      reply: this.handleMention,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleMention,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      toggleHidden: this.handleHotkeyToggleHidden,\n    };\n  }\n\n  renderFollow(notification, account, link) {\n    const { intl } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className='notification notification-follow focusable' tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.follow', defaultMessage: '{name} followed you' }, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user-plus' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow' defaultMessage='{name} followed you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <AccountContainer id={account.get('id')} withNote={false} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderFollowRequest(notification, account, link) {\n    const { intl, unread } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow-request focusable', { unread })} tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.follow_request', defaultMessage: '{name} has requested to follow you' }, { name: account.get('acct') }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.follow_request' defaultMessage='{name} has requested to follow you' values={{ name: link }} />\n            </span>\n          </div>\n\n          <FollowRequestContainer id={account.get('id')} withNote={false} hidden={this.props.hidden} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderMention(notification) {\n    return (\n      <StatusContainer\n        id={notification.get('status')}\n        withDismiss\n        hidden={this.props.hidden}\n        onMoveDown={this.handleMoveDown}\n        onMoveUp={this.handleMoveUp}\n        contextType='notifications'\n        getScrollPosition={this.props.getScrollPosition}\n        updateScrollBottom={this.props.updateScrollBottom}\n        cachedMediaWidth={this.props.cachedMediaWidth}\n        cacheMediaWidth={this.props.cacheMediaWidth}\n      />\n    );\n  }\n\n  renderChatMention(notification, link) {\n    const { intl } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className='notification notification-chat-mention focusable' tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.chat_mention', defaultMessage: '{name} sent you a message' }, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='comment' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.chat_mention' defaultMessage='{name} sent you a message' values={{ name: link }} />\n            </span>\n          </div>\n        </div>\n\n        <div className='chat-message'>\n          <span\n            className='chat-message__bubble'\n            dangerouslySetInnerHTML={{ __html: emojify(notification.getIn(['chat_message', 'content'])) }}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderEmojiReact(notification, link) {\n    const { intl } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className='notification notification-emoji-react focusable' tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.pleroma:emoji_reaction', defaultMessage: '{name} reacted to your post' }, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <span dangerouslySetInnerHTML={{ __html: emojify(emojify(notification.get('emoji'))) }} />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.pleroma:emoji_reaction' defaultMessage='{name} reacted to your post' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={!!this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderFavourite(notification, link) {\n    const { intl } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className='notification notification-favourite focusable' tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.favourite', defaultMessage: '{name} liked your post' }, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='thumbs-up' className='star-icon' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.favourite' defaultMessage='{name} liked your post' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={!!this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderReblog(notification, link) {\n    const { intl } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className='notification notification-reblog focusable' tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.reblog', defaultMessage: '{name} reposted your post' }, { name: notification.getIn(['account', 'acct']) }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='retweet' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.reblog' defaultMessage='{name} reposted your post' values={{ name: link }} />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  renderPoll(notification) {\n    const { intl } = this.props;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className='notification notification-poll focusable' tabIndex='0' aria-label={notificationForScreenReader(intl, intl.formatMessage({ id: 'notification.poll', defaultMessage: 'A poll you have voted in has ended' }), notification.get('created_at'))}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='tasks' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.poll' defaultMessage='A poll you have voted in has ended' />\n            </span>\n          </div>\n\n          <StatusContainer\n            id={notification.get('status')}\n            account={notification.get('account')}\n            muted\n            withDismiss\n            hidden={this.props.hidden}\n            getScrollPosition={this.props.getScrollPosition}\n            updateScrollBottom={this.props.updateScrollBottom}\n            cachedMediaWidth={this.props.cachedMediaWidth}\n            cacheMediaWidth={this.props.cacheMediaWidth}\n          />\n        </div>\n      </HotKeys>\n    );\n  }\n\n  render() {\n    const { notification } = this.props;\n    const account          = notification.get('account');\n    const displayNameHtml  = { __html: account.get('display_name_html') };\n    const link             = <bdi><Permalink className='notification__display-name' href={`/@${account.get('acct')}`} title={account.get('acct')} to={`/@${account.get('acct')}`} dangerouslySetInnerHTML={displayNameHtml} /></bdi>;\n\n    switch(notification.get('type')) {\n    case 'follow':\n      return this.renderFollow(notification, account, link);\n    case 'follow_request':\n      return this.renderFollowRequest(notification, account, link);\n    case 'mention':\n      return this.renderMention(notification);\n    case 'favourite':\n      return this.renderFavourite(notification, link);\n    case 'reblog':\n      return this.renderReblog(notification, link);\n    case 'poll':\n      return this.renderPoll(notification);\n    case 'pleroma:emoji_reaction':\n      return this.renderEmojiReact(notification, link);\n    case 'pleroma:chat_mention':\n      return this.renderChatMention(notification, link);\n    }\n\n    return null;\n  }\n\n}\n","import React, { Fragment } from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport PropTypes from 'prop-types';\nimport Avatar from 'soapbox/components/avatar';\nimport DisplayName from 'soapbox/components/display_name';\nimport Permalink from 'soapbox/components/permalink';\nimport IconButton from 'soapbox/components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nexport default @injectIntl\nclass FollowRequest extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const { intl, hidden, account, onAuthorize, onReject } = this.props;\n\n    if (!account) {\n      return <div />;\n    }\n\n    if (hidden) {\n      return (\n        <Fragment>\n          {account.get('display_name')}\n          {account.get('username')}\n        </Fragment>\n      );\n    }\n\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <Permalink key={account.get('id')} className='account__display-name' title={account.get('acct')} href={account.get('url')} to={`/@${account.get('acct')}`}>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            <DisplayName account={account} />\n          </Permalink>\n\n          <div className='account__relationship'>\n            <IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} />\n            <IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { makeGetAccount } from 'soapbox/selectors';\nimport FollowRequest from '../components/follow_request';\nimport { authorizeFollowRequest, rejectFollowRequest } from 'soapbox/actions/accounts';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { id }) => ({\n  onAuthorize() {\n    dispatch(authorizeFollowRequest(id));\n  },\n\n  onReject() {\n    dispatch(rejectFollowRequest(id));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FollowRequest);\n","import { connect } from 'react-redux';\nimport { makeGetNotification, makeGetStatus } from '../../../selectors';\nimport Notification from '../components/notification';\nimport { openModal } from '../../../actions/modal';\nimport { mentionCompose } from '../../../actions/compose';\nimport {\n  reblog,\n  favourite,\n  unreblog,\n  unfavourite,\n} from '../../../actions/interactions';\nimport {\n  hideStatus,\n  revealStatus,\n} from '../../../actions/statuses';\nimport { getSettings } from 'soapbox/actions/settings';\n\nconst makeMapStateToProps = () => {\n  const getNotification = makeGetNotification();\n  const getStatus = makeGetStatus();\n\n  const mapStateToProps = (state, props) => {\n    const notification = getNotification(state, props.notification, props.accountId);\n    return {\n      notification: notification,\n      status: notification.get('status') ? getStatus(state, { id: notification.get('status') }) : null,\n    };\n  };\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onMention: (account, router) => {\n    dispatch(mentionCompose(account, router));\n  },\n\n  onModalReblog(status) {\n    dispatch(reblog(status));\n  },\n\n  onReblog(status, e) {\n    dispatch((_, getState) => {\n      const boostModal = getSettings(getState()).get('boostModal');\n      if (status.get('reblogged')) {\n        dispatch(unreblog(status));\n      } else {\n        if (e.shiftKey || !boostModal) {\n          this.onModalReblog(status);\n        } else {\n          dispatch(openModal('BOOST', { status, onReblog: this.onModalReblog }));\n        }\n      }\n    });\n  },\n\n  onFavourite(status) {\n    if (status.get('favourited')) {\n      dispatch(unfavourite(status));\n    } else {\n      dispatch(favourite(status));\n    }\n  },\n\n  onToggleHidden(status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Notification);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Icon from 'soapbox/components/icon';\n\nexport default class ClearColumnButton extends React.PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render() {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.props.onClick}><Icon id='eraser' /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Toggle from 'react-toggle';\n\nexport default class MultiSettingToggle extends React.PureComponent {\n\n  static propTypes = {\n    prefix: PropTypes.string,\n    settings: ImmutablePropTypes.map.isRequired,\n    settingPaths: PropTypes.array.isRequired,\n    label: PropTypes.node,\n    onChange: PropTypes.func.isRequired,\n    icons: PropTypes.oneOfType([\n      PropTypes.bool,\n      PropTypes.object,\n    ]),\n    ariaLabel: PropTypes.string,\n  }\n\n  onChange = ({ target }) => {\n    for (var i = 0; i < this.props.settingPaths.length; i++) {\n      this.props.onChange(this.props.settingPaths[i], target.checked);\n    }\n  }\n\n  areTrue = (settingPath) => {\n    return this.props.settings.getIn(settingPath) === true;\n  }\n\n  render() {\n    const { prefix, settingPaths, label, icons, ariaLabel } = this.props;\n    const id = ['setting-toggle', prefix].filter(Boolean).join('-');\n\n    return (\n      <div className='setting-toggle' aria-label={ariaLabel}>\n        <Toggle id={id} checked={settingPaths.every(this.areTrue)} onChange={this.onChange} icons={icons} onKeyDown={this.onKeyDown} />\n        {label && (<label htmlFor={id} className='setting-toggle__label'>{label}</label>)}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { FormattedMessage } from 'react-intl';\nimport ClearColumnButton from './clear_column_button';\nimport SettingToggle from './setting_toggle';\nimport MultiSettingToggle from './multi_setting_toggle';\n\nexport default class ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  }\n\n  onAllSoundsChange = (path, checked) => {\n    const soundSettings = [['sounds', 'follow'], ['sounds', 'favourite'], ['sounds', 'pleroma:emoji_reaction'], ['sounds', 'mention'], ['sounds', 'reblog'], ['sounds', 'poll']];\n\n    for (var i = 0; i < soundSettings.length; i++) {\n      this.props.onChange(soundSettings[i], checked);\n    }\n  }\n\n  render() {\n    const { settings, pushSettings, onChange, onClear } = this.props;\n\n    const filterShowStr = <FormattedMessage id='notifications.column_settings.filter_bar.show' defaultMessage='Show' />;\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const alertStr  = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const allSoundsStr  = <FormattedMessage id='notifications.column_settings.sounds.all_sounds' defaultMessage='Play sound for all notifications' />;\n    const showStr   = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr  = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n    const soundSettings = [['sounds', 'follow'], ['sounds', 'favourite'], ['sounds', 'pleroma:emoji_reaction'], ['sounds', 'mention'], ['sounds', 'reblog'], ['sounds', 'poll']];\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <ClearColumnButton onClick={onClear} />\n        </div>\n\n        <div role='group' aria-labelledby='notifications-all_sounds'>\n          <span id='notifications-filter-bar' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.sounds' defaultMessage='Sounds' />\n          </span>\n          <MultiSettingToggle prefix='notifications_all_sounds' settings={settings} settingPaths={soundSettings} onChange={this.onAllSoundsChange} label={allSoundsStr} />\n        </div>\n\n        <div role='group' aria-labelledby='notifications-filter-bar'>\n          <span id='notifications-filter-bar' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' />\n          </span>\n          <div className='column-settings__row'>\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'show']} onChange={onChange} label={filterShowStr} />\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow'>\n          <span id='notifications-follow' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow-request'>\n          <span id='notifications-follow-request' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow_request' defaultMessage='New follow requests:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow_request']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow_request']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow_request']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow_request']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-favourite'>\n          <span id='notifications-favourite' className='column-settings__section'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Likes:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-emoji-react'>\n          <span id='notifications-favourite' className='column-settings__section'><FormattedMessage id='notifications.column_settings.emoji_react' defaultMessage='Emoji reacts:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'pleroma:emoji_reaction']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'pleroma:emoji_reaction']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'pleroma:emoji_reaction']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'pleroma:emoji_reaction']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-mention'>\n          <span id='notifications-mention' className='column-settings__section'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-reblog'>\n          <span id='notifications-reblog' className='column-settings__section'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Reposts:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-poll'>\n          <span id='notifications-poll' className='column-settings__section'><FormattedMessage id='notifications.column_settings.poll' defaultMessage='Poll results:' /></span>\n\n          <div className='column-settings__row'>\n            <SettingToggle prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'poll']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'poll']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'poll']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'poll']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ColumnSettings from '../components/column_settings';\nimport { getSettings, changeSetting } from '../../../actions/settings';\nimport { setFilter } from '../../../actions/notifications';\nimport { clearNotifications } from '../../../actions/notifications';\nimport { changeAlerts as changePushNotifications } from '../../../actions/push_notifications';\nimport { openModal } from '../../../actions/modal';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n});\n\nconst mapStateToProps = state => ({\n  settings: getSettings(state).get('notifications'),\n  pushSettings: state.get('push_notifications'),\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange(path, checked) {\n    if (path[0] === 'push') {\n      dispatch(changePushNotifications(path.slice(1), checked));\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear() {\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.clearMessage),\n      confirm: intl.formatMessage(messages.clearConfirm),\n      onConfirm: () => dispatch(clearNotifications()),\n    }));\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Icon from 'soapbox/components/icon';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Likes' },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Reposts' },\n  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n  emoji_reacts: { id: 'notifications.filter.emoji_reacts', defaultMessage: 'Emoji reacts:' },\n});\n\nexport default @injectIntl\nclass FilterBar extends React.PureComponent {\n\n  static propTypes = {\n    selectFilter: PropTypes.func.isRequired,\n    selectedFilter: PropTypes.string.isRequired,\n    advancedMode: PropTypes.bool.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onClick(notificationType) {\n    return () => this.props.selectFilter(notificationType);\n  }\n\n  render() {\n    const { selectedFilter, advancedMode, intl } = this.props;\n    const renderedElement = !advancedMode ? (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n        >\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </button>\n      </div>\n    ) : (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <Icon id='at' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'favourite' ? 'active' : ''}\n          onClick={this.onClick('favourite')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'pleroma:emoji_reaction' ? 'active' : ''}\n          onClick={this.onClick('pleroma:emoji_reaction')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'reblog' ? 'active' : ''}\n          onClick={this.onClick('reblog')}\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <Icon id='retweet' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'poll' ? 'active' : ''}\n          onClick={this.onClick('poll')}\n          title={intl.formatMessage(tooltips.polls)}\n        >\n          <Icon id='tasks' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'follow' ? 'active' : ''}\n          onClick={this.onClick('follow')}\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <Icon id='user-plus' fixedWidth />\n        </button>\n      </div>\n    );\n    return renderedElement;\n  }\n\n}\n","import { connect } from 'react-redux';\nimport FilterBar from '../components/filter_bar';\nimport { setFilter } from '../../../actions/notifications';\nimport { getSettings } from 'soapbox/actions/settings';\n\nconst makeMapStateToProps = state => {\n  const settings = getSettings(state);\n  return {\n    selectedFilter: settings.getIn(['notifications', 'quickFilter', 'active']),\n    advancedMode:   settings.getIn(['notifications', 'quickFilter', 'advanced']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilter(newActiveFilter) {\n    dispatch(setFilter(newActiveFilter));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FilterBar);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport {\n  expandNotifications,\n  scrollTopNotifications,\n  dequeueNotifications,\n} from '../../actions/notifications';\nimport NotificationContainer from './containers/notification_container';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport { createSelector } from 'reselect';\nimport { List as ImmutableList } from 'immutable';\nimport { debounce } from 'lodash';\nimport ScrollableList from '../../components/scrollable_list';\nimport LoadGap from '../../components/load_gap';\nimport TimelineQueueButtonHeader from  '../../components/timeline_queue_button_header';\nimport { getSettings } from 'soapbox/actions/settings';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  queue: { id: 'notifications.queue_label', defaultMessage: 'Click to see {count} new {count, plural, one {notification} other {notifications}}' },\n});\n\nconst getNotifications = createSelector([\n  state => getSettings(state).getIn(['notifications', 'quickFilter', 'show']),\n  state => getSettings(state).getIn(['notifications', 'quickFilter', 'active']),\n  state => ImmutableList(getSettings(state).getIn(['notifications', 'shows']).filter(item => !item).keys()),\n  state => state.getIn(['notifications', 'items']).toList(),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item !== null && allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  showFilterBar: getSettings(state).getIn(['notifications', 'quickFilter', 'show']),\n  notifications: getNotifications(state),\n  isLoading: state.getIn(['notifications', 'isLoading'], true),\n  isUnread: state.getIn(['notifications', 'unread']) > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n  totalQueuedNotificationsCount: state.getIn(['notifications', 'totalQueuedNotificationsCount'], 0),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Notifications extends React.PureComponent {\n\n  static propTypes = {\n    notifications: ImmutablePropTypes.list.isRequired,\n    showFilterBar: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    dequeueNotifications: PropTypes.func,\n    totalQueuedNotificationsCount: PropTypes.number,\n  };\n\n  componentWillUnmount() {\n    this.handleLoadOlder.cancel();\n    this.handleScrollToTop.cancel();\n    this.handleScroll.cancel();\n    this.props.dispatch(scrollTopNotifications(false));\n  }\n\n  componentDidMount() {\n    this.handleDequeueNotifications();\n    this.props.dispatch(scrollTopNotifications(true));\n  }\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  setColumnRef = c => {\n    this.column = c;\n  }\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex, true);\n  }\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex, false);\n  }\n\n  _selectChild(index, align_top) {\n    const container = this.column.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  handleDequeueNotifications = () => {\n    this.props.dispatch(dequeueNotifications());\n  };\n\n  render() {\n    const { intl, notifications, isLoading, isUnread, hasMore, showFilterBar, totalQueuedNotificationsCount } = this.props;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. Interact with others to start the conversation.\" />;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = showFilterBar\n      ? (<FilterBarContainer />)\n      : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    const scrollContainer = (\n      <ScrollableList\n        scrollKey='notifications'\n        isLoading={isLoading}\n        showLoading={isLoading && notifications.size === 0}\n        hasMore={hasMore}\n        emptyMessage={emptyMessage}\n        onLoadMore={this.handleLoadOlder}\n        onScrollToTop={this.handleScrollToTop}\n        onScroll={this.handleScroll}\n      >\n        {scrollableContent}\n      </ScrollableList>\n    );\n\n    return (\n      <Column ref={this.setColumnRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader icon='bell' active={isUnread} title={intl.formatMessage(messages.title)}>\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n        {filterBarContainer}\n        <TimelineQueueButtonHeader\n          onClick={this.handleDequeueNotifications}\n          count={totalQueuedNotificationsCount}\n          message={messages.queue}\n        />\n        {scrollContainer}\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
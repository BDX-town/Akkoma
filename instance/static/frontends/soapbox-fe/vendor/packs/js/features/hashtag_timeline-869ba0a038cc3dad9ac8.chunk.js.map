{"version":3,"sources":["webpack:///./app/soapbox/features/hashtag_timeline/index.js","webpack:///./node_modules/lodash/isEqual.js"],"names":["HashtagTimeline","connect","state","props","hasUnread","getIn","params","id","title","additionalFor","push","values","additional","defaultMessage","mode","tags","length","map","tag","value","join","maxId","dispatch","expandHashtagTimeline","_subscribe","any","all","none","disconnects","connectHashtagStream","status","name","filter","includes","_unsubscribe","this","disconnect","componentDidMount","componentDidUpdate","prevProps","prevId","prevTags","clearTimeline","componentWillUnmount","render","label","icon","active","scrollKey","timelineId","onLoadMore","handleLoadMore","emptyMessage","React","PureComponent","baseIsEqual","module","exports","other"],"mappings":"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","file":"js/features/hashtag_timeline-869ba0a038cc3dad9ac8.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandHashtagTimeline, clearTimeline } from '../../actions/timelines';\nimport { FormattedMessage } from 'react-intl';\nimport { connectHashtagStream } from '../../actions/streaming';\nimport { isEqual } from 'lodash';\nimport ColumnBackButton from '../../components/column_back_button';\n\nconst mapStateToProps = (state, props) => ({\n  hasUnread: state.getIn(['timelines', `hashtag:${props.params.id}`, 'unread']) > 0,\n});\n\nexport default @connect(mapStateToProps)\nclass HashtagTimeline extends React.PureComponent {\n\n  disconnects = [];\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasUnread: PropTypes.bool,\n  };\n\n  title = () => {\n    let title = [this.props.params.id];\n\n    if (this.additionalFor('any')) {\n      title.push(' ', <FormattedMessage key='any' id='hashtag.column_header.tag_mode.any'  values={{ additional: this.additionalFor('any') }} defaultMessage='or {additional}' />);\n    }\n\n    if (this.additionalFor('all')) {\n      title.push(' ', <FormattedMessage key='all' id='hashtag.column_header.tag_mode.all'  values={{ additional: this.additionalFor('all') }} defaultMessage='and {additional}' />);\n    }\n\n    if (this.additionalFor('none')) {\n      title.push(' ', <FormattedMessage key='none' id='hashtag.column_header.tag_mode.none' values={{ additional: this.additionalFor('none') }} defaultMessage='without {additional}' />);\n    }\n\n    return title;\n  }\n\n  additionalFor = (mode) => {\n    const { tags } = this.props.params;\n\n    if (tags && (tags[mode] || []).length > 0) {\n      return tags[mode].map(tag => tag.value).join('/');\n    } else {\n      return '';\n    }\n  }\n\n  _subscribe(dispatch, id, tags = {}) {\n    let any  = (tags.any || []).map(tag => tag.value);\n    let all  = (tags.all || []).map(tag => tag.value);\n    let none = (tags.none || []).map(tag => tag.value);\n\n    [id, ...any].map(tag => {\n      this.disconnects.push(dispatch(connectHashtagStream(id, tag, status => {\n        let tags = status.tags.map(tag => tag.name);\n\n        return all.filter(tag => tags.includes(tag)).length === all.length &&\n               none.filter(tag => tags.includes(tag)).length === 0;\n      })));\n    });\n  }\n\n  _unsubscribe() {\n    this.disconnects.map(disconnect => disconnect());\n    this.disconnects = [];\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    const { id, tags } = this.props.params;\n\n    this._subscribe(dispatch, id, tags);\n    dispatch(expandHashtagTimeline(id, { tags }));\n  }\n\n  componentDidUpdate(prevProps) {\n    const { dispatch } = this.props;\n    const { id, tags } = this.props.params;\n    const { id: prevId, tags: prevTags } = prevProps.params;\n\n    if (id !== prevId || !isEqual(tags, prevTags)) {\n      this._unsubscribe();\n      this._subscribe(dispatch, id, tags);\n      dispatch(clearTimeline(`hashtag:${id}`));\n      dispatch(expandHashtagTimeline(id, { tags }));\n    }\n  }\n\n  componentWillUnmount() {\n    this._unsubscribe();\n  }\n\n  handleLoadMore = maxId => {\n    const { id, tags } = this.props.params;\n    this.props.dispatch(expandHashtagTimeline(id, { maxId, tags }));\n  }\n\n  render() {\n    const { hasUnread } = this.props;\n    const { id } = this.props.params;\n\n    return (\n      <Column label={`#${id}`}>\n        <ColumnBackButton />\n        <ColumnHeader icon='hashtag' active={hasUnread} title={this.title()} />\n        <StatusListContainer\n          scrollKey='hashtag_timeline'\n          timelineId={`hashtag:${id}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.hashtag' defaultMessage='There is nothing in this hashtag yet.' />}\n        />\n      </Column>\n    );\n  }\n\n}\n","var baseIsEqual = require('./_baseIsEqual');\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\n\n\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;"],"sourceRoot":""}
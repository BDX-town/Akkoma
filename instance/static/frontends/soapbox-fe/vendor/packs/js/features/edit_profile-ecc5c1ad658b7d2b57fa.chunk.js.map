{"version":3,"sources":["webpack:///./app/soapbox/features/edit_profile/components/profile_preview.js","webpack:///./app/soapbox/features/edit_profile/index.js","webpack:///./node_modules/lodash/unescape.js","webpack:///./node_modules/lodash/_unescapeHtmlChar.js"],"names":["connect","state","displayFqn","account","className","target","rel","href","get","alt","src","width","height","style","display","getIn","ImmutableList","includes","getAcct","messages","defineMessages","heading","metaFieldLabel","metaFieldContent","verified","EditProfile","me","soapbox","getSoapboxConfig","maxFields","verifiedCanEditName","injectIntl","props","isLoading","merge","ImmutableMap","header","avatar","display_name","params","fields","forEach","f","i","set","Object","assign","discoverable","bot","note","avatar_file","header_file","locked","getFieldParams","toJS","key","data","getParams","formData","FormData","Boolean","undefined","startsWith","append","event","dispatch","patchMe","getFormdata","then","setState","snackbar","success","catch","error","preventDefault","e","name","checked","value","setIn","file","files","url","URL","createObjectURL","initialState","withMutations","map","delete","setSize","field","reduce","param","toObject","render","this","intl","isVerified","canEditName","icon","formatMessage","backBtnSlim","onSubmit","handleSubmit","disabled","label","id","defaultMessage","onChange","handleTextChange","hint","autoComplete","wrap","rows","makePreviewAccount","handleFileChange","handleCheckboxChange","values","count","placeholder","handleFieldChange","type","ImmutablePureComponent","PropTypes","func","isRequired","object","ImmutablePropTypes","number","bool","toString","unescapeHtmlChar","reEscapedHtml","reHasEscapedHtml","RegExp","source","module","exports","string","test","replace","basePropertyOf"],"mappings":"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","file":"js/features/edit_profile-ecc5c1ad658b7d2b57fa.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { getAcct } from 'soapbox/utils/accounts';\nimport StillImage from 'soapbox/components/still_image';\nimport VerificationBadge from 'soapbox/components/verification_badge';\nimport { List as ImmutableList } from 'immutable';\nimport { displayFqn } from 'soapbox/utils/state';\n\nconst mapStateToProps = state => ({\n  displayFqn: displayFqn(state),\n});\n\nconst ProfilePreview = ({ account, displayFqn }) => (\n  <div className='card h-card'>\n    <a target='_blank' rel='noopener' href={account.get('url')}>\n      <div className='card__img'>\n        <StillImage alt='' src={account.get('header')} />\n      </div>\n      <div className='card__bar'>\n        <div className='avatar'>\n          <StillImage alt='' className='u-photo' src={account.get('avatar')} width='48' height='48' />\n        </div>\n        <div className='display-name'>\n          <span style={{ display: 'none' }}>{account.get('username')}</span>\n          <bdi>\n            <strong className='emojify p-name'>\n              {account.get('display_name')}\n              {account.getIn(['pleroma', 'tags'], ImmutableList()).includes('verified') && <VerificationBadge />}\n            </strong>\n          </bdi>\n          <span>@{getAcct(account, displayFqn)}</span>\n        </div>\n      </div>\n    </a>\n  </div>\n);\n\nProfilePreview.propTypes = {\n  account: ImmutablePropTypes.map,\n  displayFqn: PropTypes.bool,\n};\n\nexport default connect(mapStateToProps)(ProfilePreview);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport snackbar from 'soapbox/actions/snackbar';\nimport Column from '../ui/components/column';\nimport {\n  SimpleForm,\n  FieldsGroup,\n  TextInput,\n  Checkbox,\n  FileChooser,\n  SimpleTextarea,\n} from 'soapbox/features/forms';\nimport ProfilePreview from './components/profile_preview';\nimport {\n  Map as ImmutableMap,\n  List as ImmutableList,\n} from 'immutable';\nimport { patchMe } from 'soapbox/actions/me';\nimport { unescape } from 'lodash';\nimport { isVerified } from 'soapbox/utils/accounts';\nimport { getSoapboxConfig } from 'soapbox/actions/soapbox';\n\nconst messages = defineMessages({\n  heading: { id: 'column.edit_profile', defaultMessage: 'Edit profile' },\n  metaFieldLabel: { id: 'edit_profile.fields.meta_fields.label_placeholder', defaultMessage: 'Label' },\n  metaFieldContent: { id: 'edit_profile.fields.meta_fields.content_placeholder', defaultMessage: 'Content' },\n  verified: { id: 'edit_profile.fields.verified_display_name', defaultMessage: 'Verified users may not update their display name' },\n});\n\nconst mapStateToProps = state => {\n  const me = state.get('me');\n  const soapbox = getSoapboxConfig(state);\n  return {\n    account: state.getIn(['accounts', me]),\n    maxFields: state.getIn(['instance', 'pleroma', 'metadata', 'fields_limits', 'max_fields'], 4),\n    verifiedCanEditName: soapbox.get('verifiedCanEditName'),\n  };\n};\n\n// Forces fields to be maxFields size, filling empty values\nconst normalizeFields = (fields, maxFields) => (\n  ImmutableList(fields).setSize(maxFields).map(field =>\n    field ? field : ImmutableMap({ name: '', value: '' }),\n  )\n);\n\n// HTML unescape for special chars, eg <br>\nconst unescapeParams = (map, params) => (\n  params.reduce((map, param) => (\n    map.set(param, unescape(map.get(param)))\n  ), map)\n);\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass EditProfile extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    account: ImmutablePropTypes.map,\n    maxFields: PropTypes.number,\n    verifiedCanEditName: PropTypes.bool,\n  };\n\n  state = {\n    isLoading: false,\n  }\n\n  constructor(props) {\n    super(props);\n    const initialState = props.account.withMutations(map => {\n      map.merge(map.get('source'));\n      map.delete('source');\n      map.set('fields', normalizeFields(map.get('fields'), props.maxFields));\n      unescapeParams(map, ['display_name', 'bio']);\n    });\n    this.state = initialState.toObject();\n  }\n\n  makePreviewAccount = () => {\n    const { account } = this.props;\n    return account.merge(ImmutableMap({\n      header: this.state.header,\n      avatar: this.state.avatar,\n      display_name: this.state.display_name,\n    }));\n  }\n\n  getFieldParams = () => {\n    let params = ImmutableMap();\n    this.state.fields.forEach((f, i) =>\n      params = params\n        .set(`fields_attributes[${i}][name]`,  f.get('name'))\n        .set(`fields_attributes[${i}][value]`, f.get('value')),\n    );\n    return params;\n  }\n\n  getParams = () => {\n    const { state } = this;\n    return Object.assign({\n      discoverable: state.discoverable,\n      bot: state.bot,\n      display_name: state.display_name,\n      note: state.note,\n      avatar: state.avatar_file,\n      header: state.header_file,\n      locked: state.locked,\n    }, this.getFieldParams().toJS());\n  }\n\n  getFormdata = () => {\n    const data = this.getParams();\n    let formData = new FormData();\n    for (let key in data) {\n      // Compact the submission. This should probably be done better.\n      const shouldAppend = Boolean(data[key] !== undefined || key.startsWith('fields_attributes'));\n      if (shouldAppend) formData.append(key, data[key] || '');\n    }\n    return formData;\n  }\n\n  handleSubmit = (event) => {\n    const { dispatch } = this.props;\n    dispatch(patchMe(this.getFormdata())).then(() => {\n      this.setState({ isLoading: false });\n      dispatch(snackbar.success('Profile saved!'));\n    }).catch((error) => {\n      this.setState({ isLoading: false });\n    });\n    this.setState({ isLoading: true });\n    event.preventDefault();\n  }\n\n  handleCheckboxChange = e => {\n    this.setState({ [e.target.name]: e.target.checked });\n  }\n\n  handleTextChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleFieldChange = (i, key) => {\n    return (e) => {\n      this.setState({\n        fields: this.state.fields.setIn([i, key], e.target.value),\n      });\n    };\n  }\n\n  handleFileChange = e => {\n    const { name } = e.target;\n    const [file] = e.target.files || [];\n    const url = file ? URL.createObjectURL(file) : this.state[name];\n\n    this.setState({\n      [name]: url,\n      [`${name}_file`]: file,\n    });\n  }\n\n  render() {\n    const { intl, maxFields, account, verifiedCanEditName } = this.props;\n    const verified = isVerified(account);\n    const canEditName = verifiedCanEditName || !verified;\n\n    return (\n      <Column icon='user' heading={intl.formatMessage(messages.heading)} backBtnSlim>\n        <SimpleForm onSubmit={this.handleSubmit}>\n          <fieldset disabled={this.state.isLoading}>\n            <FieldsGroup>\n              <TextInput\n                className={canEditName ? '' : 'disabled'}\n                label={<FormattedMessage id='edit_profile.fields.display_name_label' defaultMessage='Display name' />}\n                name='display_name'\n                value={this.state.display_name}\n                onChange={this.handleTextChange}\n                disabled={!canEditName}\n                hint={!canEditName && intl.formatMessage(messages.verified)}\n              />\n              <SimpleTextarea\n                label={<FormattedMessage id='edit_profile.fields.bio_label' defaultMessage='Bio' />}\n                name='note'\n                autoComplete='off'\n                value={this.state.note}\n                wrap='hard'\n                onChange={this.handleTextChange}\n                rows={3}\n              />\n              <div className='fields-row'>\n                <div className='fields-row__column fields-row__column-6'>\n                  <ProfilePreview account={this.makePreviewAccount()} />\n                </div>\n                <div className='fields-row__column fields-group fields-row__column-6'>\n                  <FileChooser\n                    label={<FormattedMessage id='edit_profile.fields.header_label' defaultMessage='Header' />}\n                    name='header'\n                    hint={<FormattedMessage id='edit_profile.hints.header' defaultMessage='PNG, GIF or JPG. At most 2 MB. Will be downscaled to 1500x500px' />}\n                    onChange={this.handleFileChange}\n                  />\n                  <FileChooser\n                    label={<FormattedMessage id='edit_profile.fields.avatar_label' defaultMessage='Avatar' />}\n                    name='avatar'\n                    hint={<FormattedMessage id='edit_profile.hints.avatar' defaultMessage='PNG, GIF or JPG. At most 2 MB. Will be downscaled to 400x400px' />}\n                    onChange={this.handleFileChange}\n                  />\n                </div>\n              </div>\n              <Checkbox\n                label={<FormattedMessage id='edit_profile.fields.locked_label' defaultMessage='Lock account' />}\n                hint={<FormattedMessage id='edit_profile.hints.locked' defaultMessage='Requires you to manually approve followers' />}\n                name='locked'\n                checked={this.state.locked}\n                onChange={this.handleCheckboxChange}\n              />\n              <Checkbox\n                label={<FormattedMessage id='edit_profile.fields.bot_label' defaultMessage='This is a bot account' />}\n                hint={<FormattedMessage id='edit_profile.hints.bot' defaultMessage='This account mainly performs automated actions and might not be monitored' />}\n                name='bot'\n                checked={this.state.bot}\n                onChange={this.handleCheckboxChange}\n              />\n            </FieldsGroup>\n            <FieldsGroup>\n              <div className='fields-row__column fields-group'>\n                <div className='input with_block_label'>\n                  <label><FormattedMessage id='edit_profile.fields.meta_fields_label' defaultMessage='Profile metadata' /></label>\n                  <span className='hint'>\n                    <FormattedMessage id='edit_profile.hints.meta_fields' defaultMessage='You can have up to {count, plural, one {# item} other {# items}} displayed as a table on your profile' values={{ count: maxFields }} />\n                  </span>\n                  {\n                    this.state.fields.map((field, i) => (\n                      <div className='row' key={i}>\n                        <TextInput\n                          placeholder={intl.formatMessage(messages.metaFieldLabel)}\n                          value={field.get('name')}\n                          onChange={this.handleFieldChange(i, 'name')}\n                        />\n                        <TextInput\n                          placeholder={intl.formatMessage(messages.metaFieldContent)}\n                          value={field.get('value')}\n                          onChange={this.handleFieldChange(i, 'value')}\n                        />\n                      </div>\n                    ))\n                  }\n                </div>\n              </div>\n            </FieldsGroup>\n          </fieldset>\n          <div className='actions'>\n            <button name='button' type='submit' className='btn button button-primary'>\n              <FormattedMessage id='edit_profile.save' defaultMessage='Save' />\n            </button>\n          </div>\n        </SimpleForm>\n      </Column>\n    );\n  }\n\n}\n","var toString = require('./toString'),\n    unescapeHtmlChar = require('./_unescapeHtmlChar');\n/** Used to match HTML entities and HTML characters. */\n\n\nvar reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n    reHasEscapedHtml = RegExp(reEscapedHtml.source);\n/**\n * The inverse of `_.escape`; this method converts the HTML entities\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n * their corresponding characters.\n *\n * **Note:** No other HTML entities are unescaped. To unescape additional\n * HTML entities use a third-party library like [_he_](https://mths.be/he).\n *\n * @static\n * @memberOf _\n * @since 0.6.0\n * @category String\n * @param {string} [string=''] The string to unescape.\n * @returns {string} Returns the unescaped string.\n * @example\n *\n * _.unescape('fred, barney, &amp; pebbles');\n * // => 'fred, barney, & pebbles'\n */\n\nfunction unescape(string) {\n  string = toString(string);\n  return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;\n}\n\nmodule.exports = unescape;","var basePropertyOf = require('./_basePropertyOf');\n/** Used to map HTML entities to characters. */\n\n\nvar htmlUnescapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\"\n};\n/**\n * Used by `_.unescape` to convert HTML entities to characters.\n *\n * @private\n * @param {string} chr The matched character to unescape.\n * @returns {string} Returns the unescaped character.\n */\n\nvar unescapeHtmlChar = basePropertyOf(htmlUnescapes);\nmodule.exports = unescapeHtmlChar;"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./app/soapbox/features/list_timeline/index.js"],"names":["messages","defineMessages","deleteMessage","deleteConfirm","ListTimeline","connect","state","props","list","getIn","params","id","hasUnread","injectIntl","maxId","dispatch","expandListTimeline","openModal","listId","intl","message","formatMessage","confirm","onConfirm","deleteList","context","router","history","push","componentDidMount","this","handleConnect","componentWillUnmount","handleDisconnect","componentDidUpdate","prevProps","fetchList","disconnect","connectListStream","render","title","get","emptyMessage","defaultMessage","onClick","handleEditClick","label","activeItem","activeSubItem","active","className","tabIndex","handleDeleteClick","to","scrollKey","timelineId","onLoadMore","handleLoadMore","React","PureComponent","PropTypes","object"],"mappings":"iVAkBMA,EAAWC,YAAe,CAC9BC,cAAc,CAAD,gHACbC,cAAc,CAAD,kEAUTC,EAFUC,kBALQ,SAACC,EAAOC,GAAR,MAAmB,CACzCC,KAAMF,EAAMG,MAAM,CAAC,QAASF,EAAMG,OAAOC,KACzCC,UAA6E,EAAlEN,EAAMG,MAAM,CAAC,YAAD,QAAsBF,EAAMG,OAAOC,GAAM,a,GAIjEE,a,mMA8CkB,SAAAC,GAAU,IACjBH,EAAO,EAAKJ,MAAMG,OAAlBC,GACR,EAAKJ,MAAMQ,SAASC,YAAmBL,EAAI,CAAEG,a,6CAG7B,WAChB,EAAKP,MAAMQ,SAASE,YAAU,cAAe,CAAEC,OAAQ,EAAKX,MAAMG,OAAOC,Q,+CAGvD,WAAO,IAAD,EACG,EAAKJ,MAAxBQ,EADgB,EAChBA,SAAUI,EADM,EACNA,KACVR,EAAO,EAAKJ,MAAMG,OAAlBC,GAERI,EAASE,YAAU,UAAW,CAC5BG,QAASD,EAAKE,cAAcrB,EAASE,eACrCoB,QAASH,EAAKE,cAAcrB,EAASG,eACrCoB,UAAW,WACTR,EAASS,YAAWb,IACpB,EAAKc,QAAQC,OAAOC,QAAQC,KAAK,gB,8CAjDvCC,kBAAA,WACEC,KAAKC,cAAcD,KAAKvB,MAAMG,OAAOC,K,EAGvCqB,qBAAA,WACEF,KAAKG,oB,EAGPC,mBAAA,SAAmBC,GACbL,KAAKvB,MAAMG,OAAOC,KAAOwB,EAAUzB,OAAOC,KAC5CmB,KAAKG,mBACLH,KAAKC,cAAcD,KAAKvB,MAAMG,OAAOC,M,EAIzCoB,cAAA,SAAcpB,GAAK,IACTI,EAAae,KAAKvB,MAAlBQ,SAERA,EAASqB,YAAUzB,IACnBI,EAASC,YAAmBL,IAE5BmB,KAAKO,WAAatB,EAASuB,YAAkB3B,K,EAG/CsB,iBAAA,WACMH,KAAKO,aACPP,KAAKO,aACLP,KAAKO,WAAa,O,EA2BtBE,OAAA,WAAU,IAAD,EACqBT,KAAKvB,MAAzBK,EADD,EACCA,UAAWJ,EADZ,EACYA,KACXG,EAAOmB,KAAKvB,MAAMG,OAAlBC,GACF6B,EAAShC,EAAOA,EAAKiC,IAAI,SAAW9B,EAE1C,QAAoB,IAATH,EACT,OACE,YAAC,IAAD,UACE,4BACE,YAAC,IAAD,MAID,IAAa,IAATA,EACT,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAKN,IAAMkC,EACJ,4BACE,YAAC,IAAD,CAAkB/B,GAAG,oBAAoBgC,eAAe,0GACxD,qBAAM,qBACN,YAAC,IAAD,CAAQC,QAASd,KAAKe,sBAAtB,EAAuC,YAAC,IAAD,CAAkBlC,GAAG,oBAAoBgC,eAAe,+BAInG,OACE,YAAC,IAAD,CAAQG,MAAON,QAAf,EACE,YAAC,IAAD,CAAkBO,WAAW,QAAQC,cAAerC,EAAIsC,OAAQrC,QAAhE,EACE,mBAAKsC,UAAU,6BAAf,EACE,sBAAQA,UAAU,sCAAsCC,SAAS,IAAIP,QAASd,KAAKe,sBAAnF,EACE,YAAC,IAAD,CAAMlC,GAAG,WADX,IACuB,YAAC,IAAD,CAAkBA,GAAG,aAAagC,eAAe,eAGxE,sBAAQO,UAAU,sCAAsCC,SAAS,IAAIP,QAASd,KAAKsB,wBAAnF,EACE,YAAC,IAAD,CAAMzC,GAAG,UADX,IACsB,YAAC,IAAD,CAAkBA,GAAG,eAAegC,eAAe,iBAGzE,qBAEA,YAAC,IAAD,CAAMU,GAAG,SAASH,UAAU,6EAA5B,EACE,YAAC,IAAD,CAAkBvC,GAAG,iBAAiBgC,eAAe,mBACrD,YAAC,IAAD,CAAMhC,GAAG,mBAKf,YAAC,IAAD,CACE2C,UAAU,gBACVC,WAAU,QAAU5C,EACpB6C,WAAY1B,KAAK2B,eACjBf,aAAcA,M,GA1HGgB,IAAMC,e,6BAET,CACpBjC,OAAQkC,IAAUC,S","file":"js/features/list_timeline-75b5a6cbc5cd0393c425.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { connectListStream } from '../../actions/streaming';\nimport { expandListTimeline } from '../../actions/timelines';\nimport { fetchList, deleteList } from '../../actions/lists';\nimport { openModal } from '../../actions/modal';\nimport MissingIndicator from '../../components/missing_indicator';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Icon from 'soapbox/components/icon';\nimport HomeColumnHeader from '../../components/home_column_header';\nimport { Link } from 'react-router-dom';\nimport Button from 'soapbox/components/button';\n\nconst messages = defineMessages({\n  deleteMessage: { id: 'confirmations.delete_list.message', defaultMessage: 'Are you sure you want to permanently delete this list?' },\n  deleteConfirm: { id: 'confirmations.delete_list.confirm', defaultMessage: 'Delete' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  list: state.getIn(['lists', props.params.id]),\n  hasUnread: state.getIn(['timelines', `list:${props.params.id}`, 'unread']) > 0,\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ListTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasUnread: PropTypes.bool,\n    list: PropTypes.oneOfType([ImmutablePropTypes.map, PropTypes.bool]),\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    this.handleConnect(this.props.params.id);\n  }\n\n  componentWillUnmount() {\n    this.handleDisconnect();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.params.id !== prevProps.params.id) {\n      this.handleDisconnect();\n      this.handleConnect(this.props.params.id);\n    }\n  }\n\n  handleConnect(id) {\n    const { dispatch } = this.props;\n\n    dispatch(fetchList(id));\n    dispatch(expandListTimeline(id));\n\n    this.disconnect = dispatch(connectListStream(id));\n  }\n\n  handleDisconnect() {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  handleLoadMore = maxId => {\n    const { id } = this.props.params;\n    this.props.dispatch(expandListTimeline(id, { maxId }));\n  }\n\n  handleEditClick = () => {\n    this.props.dispatch(openModal('LIST_EDITOR', { listId: this.props.params.id }));\n  }\n\n  handleDeleteClick = () => {\n    const { dispatch, intl } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(openModal('CONFIRM', {\n      message: intl.formatMessage(messages.deleteMessage),\n      confirm: intl.formatMessage(messages.deleteConfirm),\n      onConfirm: () => {\n        dispatch(deleteList(id));\n        this.context.router.history.push('/lists');\n      },\n    }));\n  }\n\n  render() {\n    const { hasUnread, list } = this.props;\n    const { id } = this.props.params;\n    const title  = list ? list.get('title') : id;\n\n    if (typeof list === 'undefined') {\n      return (\n        <Column>\n          <div>\n            <LoadingIndicator />\n          </div>\n        </Column>\n      );\n    } else if (list === false) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = (\n      <div>\n        <FormattedMessage id='empty_column.list' defaultMessage='There is nothing in this list yet. When members of this list create new posts, they will appear here.' />\n        <br /><br />\n        <Button onClick={this.handleEditClick}><FormattedMessage id='list.click_to_add' defaultMessage='Click here to add people' /></Button>\n      </div>\n    );\n\n    return (\n      <Column label={title}>\n        <HomeColumnHeader activeItem='lists' activeSubItem={id} active={hasUnread}>\n          <div className='column-header__links'>\n            <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleEditClick}>\n              <Icon id='pencil' /> <FormattedMessage id='lists.edit' defaultMessage='Edit list' />\n            </button>\n\n            <button className='text-btn column-header__setting-btn' tabIndex='0' onClick={this.handleDeleteClick}>\n              <Icon id='trash' /> <FormattedMessage id='lists.delete' defaultMessage='Delete list' />\n            </button>\n\n            <hr />\n\n            <Link to='/lists' className='text-btn column-header__setting-btn column-header__setting-btn--link'>\n              <FormattedMessage id='lists.view_all' defaultMessage='View all lists' />\n              <Icon id='arrow-right' />\n            </Link>\n          </div>\n        </HomeColumnHeader>\n\n        <StatusListContainer\n          scrollKey='list_timeline'\n          timelineId={`list:${id}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
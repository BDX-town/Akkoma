{"version":3,"sources":["webpack:///./app/soapbox/features/community_timeline/components/column_settings.js","webpack:///./app/soapbox/features/community_timeline/containers/column_settings_container.js","webpack:///./app/soapbox/features/community_timeline/index.js"],"names":["ColumnSettings","injectIntl","render","this","props","settings","onChange","className","prefix","settingPath","label","id","defaultMessage","React","PureComponent","connect","state","getSettings","get","dispatch","key","checked","changeSetting","messages","defineMessages","title","CommunityTimeline","onlyMedia","getIn","timelineId","hasUnread","maxId","expandCommunityTimeline","componentDidMount","disconnect","connectCommunityStream","componentDidUpdate","prevProps","componentWillUnmount","intl","formatMessage","activeItem","active","scrollKey","onLoadMore","handleLoadMore","emptyMessage","router","PropTypes","object"],"mappings":"mOAOMA,EADUC,Y,oGASdC,OAAA,WAAU,IAAD,EACwBC,KAAKC,MAA5BC,EADD,EACCA,SAAUC,EADX,EACWA,SAElB,OACE,4BACE,mBAAKC,UAAU,6BAAf,EACE,YAAC,IAAD,CAAeC,OAAO,qBAAqBH,SAAUA,EAAUI,YAAa,CAAC,QAAS,UAAWH,SAAUA,EAAUI,MAAO,YAAC,IAAD,CAAkBC,GAAG,oCAAoCC,eAAe,oBAGtM,mBAAKL,UAAU,6BAAf,EACE,YAAC,IAAD,CAAeC,OAAO,qBAAqBH,SAAUA,EAAUI,YAAa,CAAC,QAAS,SAAUH,SAAUA,EAAUI,MAAO,YAAC,IAAD,CAAkBC,GAAG,oCAAoCC,eAAe,oBAGrM,mBAAKL,UAAU,6BAAf,EACE,YAAC,IAAD,CAAeF,SAAUA,EAAUI,YAAa,CAAC,QAAS,aAAcH,SAAUA,EAAUI,MAAO,YAAC,IAAD,CAAkBC,GAAG,uCAAuCC,eAAe,oB,GAtB3JC,IAAMC,iB,UCSpBC,oBAZS,SAAAC,GAAK,MAAK,CAChCX,SAAUY,YAAYD,GAAOE,IAAI,eAGR,SAACC,GAC1B,MAAO,CACLb,SADK,SACIc,EAAKC,GACZF,EAASG,YAAc,CAAC,aAAF,OAAkBF,GAAMC,OAKrCN,CAA6Cf,G,+DCJ5D,IAAMuB,EAAWC,YAAe,CAC9BC,MAAM,CAAD,yDAiBDC,EAFUX,kBAZQ,SAAAC,GACtB,IAAMW,EAAYV,YAAYD,GAAOY,MAAM,CAAC,YAAa,QAAS,cAE5DC,EAAa,YAEnB,MAAO,CACLA,aACAF,YACAG,UAA+F,EAApFd,EAAMY,MAAM,CAAC,YAAgBC,GAAaF,EAAY,SAAW,IAAM,a,GAKrF1B,a,mMAsCkB,SAAA8B,GAAU,IAAD,EACQ,EAAK3B,MAA7Be,EADgB,EAChBA,SAAUQ,EADM,EACNA,UAClBR,EAASa,YAAwB,CAAED,QAAOJ,iB,8CAzB5CM,kBAAA,WAAqB,IAAD,EACc9B,KAAKC,MAA7Be,EADU,EACVA,SAAUQ,EADA,EACAA,UAClBR,EAASa,YAAwB,CAAEL,eACnCxB,KAAK+B,WAAaf,EAASgB,YAAuB,CAAER,gB,EAGtDS,mBAAA,SAAmBC,GACjB,IAAkD,EACxClB,EAAUQ,EADhBU,EAAUV,YAAcxB,KAAKC,MAAMuB,YAC7BR,GADwC,EAChBhB,KAAKC,OAA7Be,SAAUQ,EAD8B,EAC9BA,UAElBxB,KAAK+B,aACLf,EAASa,YAAwB,CAAEL,eACnCxB,KAAK+B,WAAaf,EAASgB,YAAuB,CAAER,iB,EAIxDW,qBAAA,WACMnC,KAAK+B,aACP/B,KAAK+B,aACL/B,KAAK+B,WAAa,O,EAStBhC,OAAA,WAAU,IAAD,EAC4CC,KAAKC,MAAhDmC,EADD,EACCA,KAAMT,EADP,EACOA,UAAWH,EADlB,EACkBA,UAAWE,EAD7B,EAC6BA,WAEpC,OACE,YAAC,IAAD,CAAQnB,MAAO6B,EAAKC,cAAcjB,EAASE,aAA3C,EACE,YAAC,IAAD,CAAkBgB,WAAW,QAAQC,OAAQZ,QAA7C,EACE,YAAC,EAAD,KAEF,YAAC,IAAD,CACEa,UAAcd,EAAL,YACTA,WAAeA,GAAaF,EAAY,SAAW,IACnDiB,WAAYzC,KAAK0C,eACjBC,aAAc,YAAC,IAAD,CAAkBnC,GAAG,yBAAyBC,eAAe,uF,GAtDrDC,IAAMC,e,6BAEd,CACpBiC,OAAQC,IAAUC,S","file":"js/features/community_timeline-b21094bc625ae0a8b31b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle prefix='community_timeline' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_reblogs' defaultMessage='Show reposts' />} />\n        </div>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='community_timeline' settings={settings} settingPath={['shows', 'reply']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_replies' defaultMessage='Show replies' />} />\n        </div>\n\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media Only' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { getSettings, changeSetting } from '../../../actions/settings';\n\nconst mapStateToProps = state => ({\n  settings: getSettings(state).get('community'),\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onChange(key, checked) {\n      dispatch(changeSetting(['community', ...key], checked));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport HomeColumnHeader from '../../components/home_column_header';\nimport { expandCommunityTimeline } from '../../actions/timelines';\nimport { connectCommunityStream } from '../../actions/streaming';\nimport { getSettings } from 'soapbox/actions/settings';\n\nconst messages = defineMessages({\n  title: { id: 'column.community', defaultMessage: 'Local timeline' },\n});\n\nconst mapStateToProps = state => {\n  const onlyMedia = getSettings(state).getIn(['community', 'other', 'onlyMedia']);\n\n  const timelineId = 'community';\n\n  return {\n    timelineId,\n    onlyMedia,\n    hasUnread: state.getIn(['timelines', `${timelineId}${onlyMedia ? ':media' : ''}`, 'unread']) > 0,\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass CommunityTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n    timelineId: PropTypes.string,\n  };\n\n  componentDidMount() {\n    const { dispatch, onlyMedia } = this.props;\n    dispatch(expandCommunityTimeline({ onlyMedia }));\n    this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      const { dispatch, onlyMedia } = this.props;\n\n      this.disconnect();\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n      this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia } = this.props;\n    dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n  }\n\n  render() {\n    const { intl, hasUnread, onlyMedia, timelineId } = this.props;\n\n    return (\n      <Column label={intl.formatMessage(messages.title)}>\n        <HomeColumnHeader activeItem='local' active={hasUnread} >\n          <ColumnSettingsContainer />\n        </HomeColumnHeader>\n        <StatusListContainer\n          scrollKey={`${timelineId}_timeline`}\n          timelineId={`${timelineId}${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.community' defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!' />}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
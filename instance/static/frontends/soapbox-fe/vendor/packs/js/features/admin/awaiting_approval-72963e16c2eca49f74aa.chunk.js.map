{"version":3,"sources":["webpack:///./app/soapbox/features/admin/awaiting_approval.js"],"names":["messages","defineMessages","heading","emptyMessage","approved","rejected","AwaitingApproval","connect","state","users","getIn","toList","map","nickname","injectIntl","isLoading","props","dispatch","intl","e","approveUsers","then","message","formatMessage","acct","snackbar","success","catch","deleteUsers","info","componentDidMount","this","fetchUsers","page","filters","setState","render","showLoading","count","icon","backBtnSlim","scrollKey","user","i","className","get","size","onClick","handleApprove","handleReject","ImmutablePureComponent","PropTypes","object","isRequired","ImmutablePropTypes","list"],"mappings":"6RAYMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,wEACPC,aAAa,CAAD,uJACZC,SAAS,CAAD,qFACRC,SAAS,CAAD,uFAYJC,EAFUC,kBAPQ,SAAAC,GAEtB,MAAO,CACLC,MAFgBD,EAAME,MAAM,CAAC,QAAS,qBAErBC,SAASC,IAAI,SAAAC,GAAQ,OAAIL,EAAME,MAAM,CAAC,QAAS,QAASG,Q,GAK5EC,a,0LAQS,CACNC,WAAW,I,2CAWG,SAAAF,GAAa,IAAD,EACC,EAAKG,MAAxBC,EADkB,EAClBA,SAAUC,EADQ,EACRA,KAClB,OAAO,SAAAC,GACLF,EAASG,YAAa,CAACP,KAAYQ,KAAK,WACtC,IAAMC,EAAUJ,EAAKK,cAAcvB,EAASI,SAAU,CAAEoB,KAAK,IAAKX,IAClEI,EAASQ,IAASC,QAAQJ,MACzBK,MAAM,iB,0CAIE,SAAAd,GAAa,IAAD,EACE,EAAKG,MAAxBC,EADiB,EACjBA,SAAUC,EADO,EACPA,KAClB,OAAO,SAAAC,GACLF,EAASW,YAAY,CAACf,KAAYQ,KAAK,WACrC,IAAMC,EAAUJ,EAAKK,cAAcvB,EAASK,SAAU,CAAEmB,KAAK,IAAKX,IAClEI,EAASQ,IAASI,KAAKP,MACtBK,MAAM,iB,8CAxBbG,kBAAA,WAAqB,IAAD,QAGlBb,EAFqBc,KAAKf,MAAlBC,UAECe,YADM,CAAEC,KAAM,EAAGC,QAAS,yBAEhCb,KAAK,kBAAM,EAAKc,SAAS,CAAEpB,WAAW,MACtCY,MAAM,e,EAuBXS,OAAA,WAAU,IAAD,SACiBL,KAAKf,MAArBE,EADD,EACCA,KAAMT,EADP,EACOA,MACNM,EAAcgB,KAAKvB,MAAnBO,UACFsB,EAActB,GAA+B,IAAlBN,EAAM6B,QAEvC,OACE,YAAC,IAAD,CAAQC,KAAK,OAAOrC,QAASgB,EAAKK,cAAcvB,EAASE,SAAUsC,aAAW,QAA9E,EACE,YAAC,IAAD,CAAgBzB,UAAWA,EAAWsB,YAAaA,EAAaI,UAAU,oBAAoBtC,aAAce,EAAKK,cAAcvB,EAASG,oBAAxI,EACGM,EAAMG,IAAI,SAAC8B,EAAMC,GAAP,OACT,mBAAKC,UAAU,sBAA0BF,EAAKG,IAAI,MAChD,mBAAKD,UAAU,gCAAf,EACE,mBAAKA,UAAU,qCAAf,MAAgDF,EAAKG,IAAI,aACzD,0BAAYD,UAAU,WAAtB,EAA4BF,EAAKG,IAAI,yBAEvC,mBAAKD,UAAU,oCAAf,EACE,YAAC,IAAD,CAAYL,KAAK,QAAQO,KAAM,GAAIC,QAAS,EAAKC,cAAcN,EAAKG,IAAI,eACxE,YAAC,IAAD,CAAYN,KAAK,QAAQO,KAAM,GAAIC,QAAS,EAAKE,aAAaP,EAAKG,IAAI,sB,GAvDxDK,K,0BAEV,CACjBhC,KAAMiC,IAAUC,OAAOC,WACvB5C,MAAO6C,IAAmBC,KAAKF,a","file":"js/features/admin/awaiting_approval-72963e16c2eca49f74aa.chunk.js","sourcesContent":["import React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from '../ui/components/column';\nimport IconButton from 'soapbox/components/icon_button';\nimport ScrollableList from 'soapbox/components/scrollable_list';\nimport { fetchUsers, deleteUsers, approveUsers } from 'soapbox/actions/admin';\nimport snackbar from 'soapbox/actions/snackbar';\n\nconst messages = defineMessages({\n  heading: { id: 'column.admin.awaiting_approval', defaultMessage: 'Awaiting Approval' },\n  emptyMessage: { id: 'admin.awaiting_approval.empty_message', defaultMessage: 'There is nobody waiting for approval. When a new user signs up, you can review them here.' },\n  approved: { id: 'admin.awaiting_approval.approved_message', defaultMessage: '{acct} was approved!' },\n  rejected: { id: 'admin.awaiting_approval.rejected_message', defaultMessage: '{acct} was rejected.' },\n});\n\nconst mapStateToProps = state => {\n  const nicknames = state.getIn(['admin', 'awaitingApproval']);\n  return {\n    users: nicknames.toList().map(nickname => state.getIn(['admin', 'users', nickname])),\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass AwaitingApproval extends ImmutablePureComponent {\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    users: ImmutablePropTypes.list.isRequired,\n  };\n\n  state = {\n    isLoading: true,\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    const params = { page: 1, filters: 'local,need_approval' };\n    dispatch(fetchUsers(params))\n      .then(() => this.setState({ isLoading: false }))\n      .catch(() => {});\n  }\n\n  handleApprove = nickname => {\n    const { dispatch, intl } = this.props;\n    return e => {\n      dispatch(approveUsers([nickname])).then(() => {\n        const message = intl.formatMessage(messages.approved, { acct: `@${nickname}` });\n        dispatch(snackbar.success(message));\n      }).catch(() => {});\n    };\n  }\n\n  handleReject = nickname => {\n    const { dispatch, intl } = this.props;\n    return e => {\n      dispatch(deleteUsers([nickname])).then(() => {\n        const message = intl.formatMessage(messages.rejected, { acct: `@${nickname}` });\n        dispatch(snackbar.info(message));\n      }).catch(() => {});\n    };\n  }\n\n  render() {\n    const { intl, users } = this.props;\n    const { isLoading } = this.state;\n    const showLoading = isLoading && users.count() === 0;\n\n    return (\n      <Column icon='user' heading={intl.formatMessage(messages.heading)} backBtnSlim>\n        <ScrollableList isLoading={isLoading} showLoading={showLoading} scrollKey='awaiting-approval' emptyMessage={intl.formatMessage(messages.emptyMessage)}>\n          {users.map((user, i) => (\n            <div className='unapproved-account' key={user.get('id')}>\n              <div className='unapproved-account__bio'>\n                <div className='unapproved-account__nickname'>@{user.get('nickname')}</div>\n                <blockquote className='md'>{user.get('registration_reason')}</blockquote>\n              </div>\n              <div className='unapproved-account__actions'>\n                <IconButton icon='check' size={22} onClick={this.handleApprove(user.get('nickname'))} />\n                <IconButton icon='close' size={22} onClick={this.handleReject(user.get('nickname'))} />\n              </div>\n            </div>\n          ))}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./app/soapbox/features/home_timeline/components/column_settings.js","webpack:///./app/soapbox/features/home_timeline/containers/column_settings_container.js","webpack:///./app/soapbox/features/home_timeline/index.js"],"names":["ColumnSettings","injectIntl","render","this","props","settings","onChange","className","prefix","settingPath","label","id","defaultMessage","React","PureComponent","connect","state","getSettings","get","dispatch","key","checked","changeSetting","onSave","saveSettings","messages","defineMessages","title","HomeTimeline","hasUnread","getIn","isPartial","siteTitle","maxId","expandHomeTimeline","componentDidMount","_checkIfReloadNeeded","componentDidUpdate","prevProps","componentWillUnmount","_stopPolling","wasPartial","polling","setInterval","clearInterval","intl","formatMessage","activeItem","active","scrollKey","onLoadMore","handleLoadMore","timelineId","emptyMessage","values","public","Link","to","site_title"],"mappings":"uNAOMA,EADUC,Y,oGASdC,OAAA,WAAU,IAAD,EACwBC,KAAKC,MAA5BC,EADD,EACCA,SAAUC,EADX,EACWA,SAElB,OACE,4BACE,mBAAKC,UAAU,6BAAf,EACE,YAAC,IAAD,CAAeC,OAAO,gBAAgBH,SAAUA,EAAUI,YAAa,CAAC,QAAS,UAAWH,SAAUA,EAAUI,MAAO,YAAC,IAAD,CAAkBC,GAAG,oCAAoCC,eAAe,oBAGjM,mBAAKL,UAAU,6BAAf,EACE,YAAC,IAAD,CAAeC,OAAO,gBAAgBH,SAAUA,EAAUI,YAAa,CAAC,QAAS,SAAUH,SAAUA,EAAUI,MAAO,YAAC,IAAD,CAAkBC,GAAG,oCAAoCC,eAAe,oBAGhM,mBAAKL,UAAU,6BAAf,EACE,YAAC,IAAD,CAAeC,OAAO,gBAAgBH,SAAUA,EAAUI,YAAa,CAAC,QAAS,UAAWH,SAAUA,EAAUI,MAAO,YAAC,IAAD,CAAkBC,GAAG,mCAAmCC,eAAe,8B,GAtB3KC,IAAMC,iB,UCiBpBC,oBAhBS,SAAAC,GAAK,MAAK,CAChCX,SAAUY,YAAYD,GAAOE,IAAI,UAGR,SAAAC,GAAQ,MAAK,CAEtCb,SAFsC,SAE7Bc,EAAKC,GACZF,EAASG,YAAc,CAAC,QAAF,OAAaF,GAAMC,KAG3CE,OANsC,WAOpCJ,EAASK,kBAKET,CAA6Cf,G,uDCb5D,IAAMyB,EAAWC,YAAe,CAC9BC,MAAM,CAAD,0CAWDC,EAFUb,kBANQ,SAAAC,GAAK,MAAK,CAChCa,UAA0D,EAA/Cb,EAAMc,MAAM,CAAC,YAAa,OAAQ,WAC7CC,UAAWf,EAAMc,MAAM,CAAC,YAAa,OAAQ,cAC7CE,UAAWhB,EAAMc,MAAM,CAAC,WAAY,Y,GAIrC7B,Y,iMAWkB,SAAAgC,GACf,EAAK7B,MAAMe,SAASe,YAAmB,CAAED,a,8CAG3CE,kBAAA,WACEhC,KAAKiC,sBAAqB,EAAOjC,KAAKC,MAAM2B,Y,EAG9CM,mBAAA,SAAmBC,GACjBnC,KAAKiC,qBAAqBE,EAAUP,UAAW5B,KAAKC,MAAM2B,Y,EAG5DQ,qBAAA,WACEpC,KAAKqC,gB,EAGPJ,qBAAA,SAAqBK,EAAYV,GAAY,IACnCZ,EAAahB,KAAKC,MAAlBe,SAEJsB,IAAeV,KAEPU,GAAcV,EACxB5B,KAAKuC,QAAUC,YAAY,WACzBxB,EAASe,gBACR,KACMO,IAAeV,GACxB5B,KAAKqC,iB,EAITA,aAAA,WACMrC,KAAKuC,UACPE,cAAczC,KAAKuC,SACnBvC,KAAKuC,QAAU,O,EAInBxC,OAAA,WAAU,IAAD,EACgCC,KAAKC,MAApCyC,EADD,EACCA,KAAMhB,EADP,EACOA,UAAWG,EADlB,EACkBA,UAEzB,OACE,YAAC,IAAD,CAAQtB,MAAOmC,EAAKC,cAAcrB,EAASE,aAA3C,EACE,YAAC,IAAD,CAAkBoB,WAAW,OAAOC,OAAQnB,QAA5C,EACE,YAAC,EAAD,KAEF,YAAC,IAAD,CACEoB,UAAU,gBACVC,WAAY/C,KAAKgD,eACjBC,WAAW,OACXC,aAAc,YAAC,IAAD,CAAkB1C,GAAG,oBAAoBC,eAAe,mFAAmF0C,OAAQ,CAAEC,OAAQ,YAACC,EAAA,EAAD,CAAMC,GAAG,wBAAT,EAA2B,YAAC,IAAD,CAAkB9C,GAAG,8BAA8BC,eAAe,uBAAuB0C,OAAQ,CAAEI,WAAY1B,a,GA3DpSnB,IAAMC,iB","file":"js/features/home_timeline-19d8ed0b3d47bc78a73d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_reblogs' defaultMessage='Show reposts' />} />\n        </div>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'reply']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_replies' defaultMessage='Show replies' />} />\n        </div>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='home_timeline' settings={settings} settingPath={['shows', 'direct']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_direct' defaultMessage='Show direct messages' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport {\n  getSettings,\n  changeSetting,\n  saveSettings,\n} from '../../../actions/settings';\n\nconst mapStateToProps = state => ({\n  settings: getSettings(state).get('home'),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onChange(key, checked) {\n    dispatch(changeSetting(['home', ...key], checked));\n  },\n\n  onSave() {\n    dispatch(saveSettings());\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { expandHomeTimeline } from '../../actions/timelines';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport HomeColumnHeader from '../../components/home_column_header';\nimport { Link } from 'react-router-dom';\n\nconst messages = defineMessages({\n  title: { id: 'column.home', defaultMessage: 'Home' },\n});\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'home', 'unread']) > 0,\n  isPartial: state.getIn(['timelines', 'home', 'isPartial']),\n  siteTitle: state.getIn(['instance', 'title']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass HomeTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    isPartial: PropTypes.bool,\n    siteTitle: PropTypes.string,\n  };\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandHomeTimeline({ maxId }));\n  }\n\n  componentDidMount() {\n    this._checkIfReloadNeeded(false, this.props.isPartial);\n  }\n\n  componentDidUpdate(prevProps) {\n    this._checkIfReloadNeeded(prevProps.isPartial, this.props.isPartial);\n  }\n\n  componentWillUnmount() {\n    this._stopPolling();\n  }\n\n  _checkIfReloadNeeded(wasPartial, isPartial) {\n    const { dispatch } = this.props;\n\n    if (wasPartial === isPartial) {\n      return;\n    } else if (!wasPartial && isPartial) {\n      this.polling = setInterval(() => {\n        dispatch(expandHomeTimeline());\n      }, 3000);\n    } else if (wasPartial && !isPartial) {\n      this._stopPolling();\n    }\n  }\n\n  _stopPolling() {\n    if (this.polling) {\n      clearInterval(this.polling);\n      this.polling = null;\n    }\n  }\n\n  render() {\n    const { intl, hasUnread, siteTitle } = this.props;\n\n    return (\n      <Column label={intl.formatMessage(messages.title)}>\n        <HomeColumnHeader activeItem='home' active={hasUnread}>\n          <ColumnSettingsContainer />\n        </HomeColumnHeader>\n        <StatusListContainer\n          scrollKey='home_timeline'\n          onLoadMore={this.handleLoadMore}\n          timelineId='home'\n          emptyMessage={<FormattedMessage id='empty_column.home' defaultMessage='Your home timeline is empty! Visit {public} to get started and meet other users.' values={{ public: <Link to='/timeline/local'><FormattedMessage id='empty_column.home.local_tab' defaultMessage='the {site_title} tab' values={{ site_title: siteTitle }} /></Link> }} />}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
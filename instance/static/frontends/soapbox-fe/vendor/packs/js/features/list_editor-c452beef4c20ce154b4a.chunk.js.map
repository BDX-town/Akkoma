{"version":3,"sources":["webpack:///./app/soapbox/features/list_editor/components/account.js","webpack:///./app/soapbox/features/list_editor/components/search.js","webpack:///./app/soapbox/features/list_editor/components/edit_list_form.js","webpack:///./app/soapbox/features/list_editor/index.js"],"names":["messages","defineMessages","remove","add","Account","connect","getAccount","makeGetAccount","state","accountId","added","account","getIn","includes","dispatch","onRemove","removeFromListEditor","onAdd","addToListEditor","injectIntl","render","this","props","intl","button","icon","title","formatMessage","onClick","className","size","ImmutablePureComponent","ImmutablePropTypes","map","isRequired","PropTypes","object","func","bool","search","searchTitle","Search","value","onSubmit","fetchListSuggestions","onClear","clearListSuggestions","onChange","changeListSuggestions","e","target","keyCode","hasValue","length","style","display","type","handleChange","onKeyUp","handleKeyUp","placeholder","role","tabIndex","handleClear","id","classNames","active","aria-label","handleSubmit","React","PureComponent","save","ListForm","disabled","changeListEditorTitle","submitListEditor","preventDefault","method","handleClick","close","changeTitle","addToList","removeFromList","editList","ListEditor","accountIds","searchAccountIds","onInitialize","listId","setupListEditor","onReset","resetListEditor","onClose","componentDidMount","componentWillUnmount","onClickClose","text","string","list"],"mappings":"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","file":"js/features/list_editor-c452beef4c20ce154b4a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { makeGetAccount } from '../../../selectors';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport IconButton from '../../../components/icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { removeFromListEditor, addToListEditor } from '../../../actions/lists';\n\nconst messages = defineMessages({\n  remove: { id: 'lists.account.remove', defaultMessage: 'Remove from list' },\n  add: { id: 'lists.account.add', defaultMessage: 'Add to list' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId, added }) => ({\n    account: getAccount(state, accountId),\n    added: typeof added === 'undefined' ? state.getIn(['listEditor', 'accounts', 'items']).includes(accountId) : added,\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { accountId }) => ({\n  onRemove: () => dispatch(removeFromListEditor(accountId)),\n  onAdd: () => dispatch(addToListEditor(accountId)),\n});\n\nexport default @connect(makeMapStateToProps, mapDispatchToProps)\n@injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    onRemove: PropTypes.func.isRequired,\n    onAdd: PropTypes.func.isRequired,\n    added: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    added: false,\n  };\n\n  render() {\n    const { account, intl, onRemove, onAdd, added } = this.props;\n\n    let button;\n\n    if (added) {\n      button = <IconButton icon='times' title={intl.formatMessage(messages.remove)} onClick={onRemove} />;\n    } else {\n      button = <IconButton icon='plus' title={intl.formatMessage(messages.add)} onClick={onAdd} />;\n    }\n\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <div className='account__display-name'>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            <DisplayName account={account} />\n          </div>\n\n          <div className='account__relationship'>\n            {button}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { fetchListSuggestions, clearListSuggestions, changeListSuggestions } from '../../../actions/lists';\nimport classNames from 'classnames';\nimport Icon from 'soapbox/components/icon';\nimport Button from 'soapbox/components/button';\n\nconst messages = defineMessages({\n  search: { id: 'lists.search', defaultMessage: 'Search among people you follow' },\n  searchTitle: { id: 'tabs_bar.search', defaultMessage: 'Search' },\n});\n\nconst mapStateToProps = state => ({\n  value: state.getIn(['listEditor', 'suggestions', 'value']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(fetchListSuggestions(value)),\n  onClear: () => dispatch(clearListSuggestions()),\n  onChange: value => dispatch(changeListSuggestions(value)),\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass Search extends React.PureComponent {\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n  };\n\n  handleChange = e => {\n    this.props.onChange(e.target.value);\n  }\n\n  handleKeyUp = e => {\n    if (e.keyCode === 13) {\n      this.props.onSubmit(this.props.value);\n    }\n  }\n\n  handleSubmit = () => {\n    this.props.onSubmit(this.props.value);\n  }\n\n  handleClear = () => {\n    this.props.onClear();\n  }\n\n  render() {\n    const { value, intl } = this.props;\n    const hasValue = value.length > 0;\n\n    return (\n      <div className='list-editor__search search'>\n        <label>\n          <span style={{ display: 'none' }}>{intl.formatMessage(messages.search)}</span>\n\n          <input\n            className='search__input'\n            type='text'\n            value={value}\n            onChange={this.handleChange}\n            onKeyUp={this.handleKeyUp}\n            placeholder={intl.formatMessage(messages.search)}\n          />\n        </label>\n\n        <div role='button' tabIndex='0' className='search__icon' onClick={this.handleClear}>\n          <Icon id='search' className={classNames({ active: !hasValue })} />\n          <Icon id='times-circle' aria-label={intl.formatMessage(messages.search)} className={classNames({ active: hasValue })} />\n        </div>\n        <Button onClick={this.handleSubmit}>{intl.formatMessage(messages.searchTitle)}</Button>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { changeListEditorTitle, submitListEditor } from '../../../actions/lists';\nimport Button from '../../../components/button';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  title: { id: 'lists.edit.submit', defaultMessage: 'Change title' },\n  save: { id: 'lists.new.save_title', defaultMessage: 'Save Title' },\n});\n\nconst mapStateToProps = state => ({\n  value: state.getIn(['listEditor', 'title']),\n  disabled: !state.getIn(['listEditor', 'isChanged']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: value => dispatch(changeListEditorTitle(value)),\n  onSubmit: () => dispatch(submitListEditor(false)),\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass ListForm extends React.PureComponent {\n\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    disabled: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  handleChange = e => {\n    this.props.onChange(e.target.value);\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit();\n  }\n\n  handleClick = () => {\n    this.props.onSubmit();\n  }\n\n  render() {\n    const { value, disabled, intl } = this.props;\n    const save = intl.formatMessage(messages.save);\n\n    return (\n      <form className='column-inline-form' method='post' onSubmit={this.handleSubmit}>\n        <input\n          className='setting-text new-list-form__input'\n          value={value}\n          onChange={this.handleChange}\n        />\n\n        { !disabled &&\n          <Button\n            className='new-list-form__btn'\n            onClick={this.handleClick}\n          >\n            {save}\n          </Button>\n        }\n      </form>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport { setupListEditor, clearListSuggestions, resetListEditor } from '../../actions/lists';\nimport Account from './components/account';\nimport Search from './components/search';\nimport EditListForm from './components/edit_list_form';\nimport ColumnSubheading from '../ui/components/column_subheading';\nimport IconButton from 'soapbox/components/icon_button';\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['listEditor', 'accounts', 'items']),\n  searchAccountIds: state.getIn(['listEditor', 'suggestions', 'items']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onInitialize: listId => dispatch(setupListEditor(listId)),\n  onClear: () => dispatch(clearListSuggestions()),\n  onReset: () => dispatch(resetListEditor()),\n});\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n  changeTitle: { id: 'lists.edit.submit', defaultMessage: 'Change title' },\n  addToList: { id: 'lists.account.add', defaultMessage: 'Add to list' },\n  removeFromList: { id: 'lists.account.remove', defaultMessage: 'Remove from list' },\n  editList: { id: 'lists.edit', defaultMessage: 'Edit list' },\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass ListEditor extends ImmutablePureComponent {\n\n  static propTypes = {\n    listId: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    onInitialize: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list.isRequired,\n    searchAccountIds: ImmutablePropTypes.list.isRequired,\n  };\n\n  componentDidMount() {\n    const { onInitialize, listId } = this.props;\n    onInitialize(listId);\n  }\n\n  componentWillUnmount() {\n    const { onReset } = this.props;\n    onReset();\n  }\n\n  onClickClose = () => {\n    this.props.onClose('LIST_ADDER');\n  };\n\n  render() {\n    const { accountIds, searchAccountIds, intl } = this.props;\n\n    return (\n      <div className='modal-root__modal compose-modal'>\n        <div className='compose-modal__header'>\n          <h3 className='compose-modal__header__title'>\n            {intl.formatMessage(messages.editList)}\n          </h3>\n          <IconButton className='compose-modal__close' title={intl.formatMessage(messages.close)} icon='times' onClick={this.onClickClose} size={20} />\n        </div>\n        <div className='compose-modal__content'>\n          <div className='list-editor'>\n            <ColumnSubheading text={intl.formatMessage(messages.changeTitle)} />\n            <EditListForm />\n            <br />\n\n            {\n              accountIds.size > 0 &&\n              <div>\n                <ColumnSubheading text={intl.formatMessage(messages.removeFromList)} />\n                <div className='list-editor__accounts'>\n                  {accountIds.map(accountId => <Account key={accountId} accountId={accountId} added />)}\n                </div>\n              </div>\n            }\n\n            <br />\n            <ColumnSubheading text={intl.formatMessage(messages.addToList)} />\n            <Search />\n            <div className='list-editor__accounts'>\n              {searchAccountIds.map(accountId => <Account key={accountId} accountId={accountId} />)}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}
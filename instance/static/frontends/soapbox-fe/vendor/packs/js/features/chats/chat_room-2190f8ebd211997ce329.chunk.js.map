{"version":3,"sources":["webpack:///./app/soapbox/features/chats/chat_room.js"],"names":["ChatRoom","connect","state","params","getChat","makeGetChat","chat","getIn","chatId","ImmutableMap","toJS","me","get","displayFqn","injectIntl","el","inputElem","focusInput","focus","props","dispatch","markChatRead","componentDidMount","this","fetchChat","markRead","componentDidUpdate","every","c","render","account","className","to","size","getAcct","onSetInputRef","handleInputRef","ImmutablePureComponent","PropTypes","func","isRequired","intl","object","ImmutablePropTypes","map","bool","node"],"mappings":"+TA8BMA,EAFUC,kBAXQ,SAACC,EAAD,GAAwB,IAAdC,EAAa,EAAbA,OAC1BC,EAAUC,cACVC,EAAOJ,EAAMK,MAAM,CAAC,QAASJ,EAAOK,QAASC,iBAAgBC,OAEnE,MAAO,CACLC,GAAIT,EAAMU,IAAI,MACdN,KAAMF,EAAQF,EAAOI,GACrBO,WAAYA,YAAWX,K,GAK1BY,a,mMAWkB,SAACC,GAChB,EAAKC,UAAYD,EACjB,EAAKE,e,wCAGM,WACN,EAAKD,WACV,EAAKA,UAAUE,U,sCAGN,WAAO,IAAD,EACY,EAAKC,MAAxBC,EADO,EACPA,SAAUd,EADH,EACGA,KACbA,GACLc,EAASC,YAAaf,EAAKM,IAAI,U,8CAGjCU,kBAAA,WAAqB,IAAD,EACWC,KAAKJ,MAA1BC,EADU,EACVA,SAAUjB,EADA,EACAA,OAClBiB,EAASI,YAAUrB,EAAOK,SAC1Be,KAAKE,Y,EAGPC,mBAAA,WAA+B,IAAD,OACD,CACzB,kBAAM,EAAKP,MAAMb,MACjB,kBAAsC,EAAhC,EAAKa,MAAMb,KAAKM,IAAI,YAGLe,MAAM,SAAAC,GAAC,OAAIA,OAChCL,KAAKE,Y,EAGTI,OAAA,WAAU,IAAD,EACsBN,KAAKJ,MAA1Bb,EADD,EACCA,KAAMO,EADP,EACOA,WACd,IAAKP,EAAM,OAAO,KAClB,IAAMwB,EAAUxB,EAAKM,IAAI,WAEzB,OACE,YAAC,IAAD,UACE,mBAAKmB,UAAU,uBAAf,EACE,YAAC,IAAD,IACA,YAAC,IAAD,CAAMC,GAAE,KAAOF,EAAQlB,IAAI,QAAWmB,UAAU,yBAAhD,EACE,YAAC,IAAD,CAAQD,QAASA,EAASG,KAAM,KAChC,mBAAKF,UAAU,wBAAf,MACIG,YAAQJ,EAASjB,MAIzB,YAAC,IAAD,CACEL,OAAQF,EAAKM,IAAI,MACjBuB,cAAeZ,KAAKa,mB,GA5DPC,K,0BAEF,CACjBjB,SAAUkB,IAAUC,KAAKC,WACzBC,KAAMH,IAAUI,OAAOF,WACvBlC,KAAMqC,IAAmBC,IACzB/B,WAAYyB,IAAUO,KACtBlC,GAAI2B,IAAUQ,O","file":"js/features/chats/chat_room-2190f8ebd211997ce329.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Avatar from 'soapbox/components/avatar';\nimport { getAcct } from 'soapbox/utils/accounts';\nimport { fetchChat, markChatRead } from 'soapbox/actions/chats';\nimport ChatBox from './components/chat_box';\nimport Column from 'soapbox/components/column';\nimport ColumnBackButton from 'soapbox/components/column_back_button';\nimport { Map as ImmutableMap } from 'immutable';\nimport { makeGetChat } from 'soapbox/selectors';\nimport { displayFqn } from 'soapbox/utils/state';\n\nconst mapStateToProps = (state, { params }) => {\n  const getChat = makeGetChat();\n  const chat = state.getIn(['chats', params.chatId], ImmutableMap()).toJS();\n\n  return {\n    me: state.get('me'),\n    chat: getChat(state, chat),\n    displayFqn: displayFqn(state),\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ChatRoom extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    chat: ImmutablePropTypes.map,\n    displayFqn: PropTypes.bool,\n    me: PropTypes.node,\n  }\n\n  handleInputRef = (el) => {\n    this.inputElem = el;\n    this.focusInput();\n  };\n\n  focusInput = () => {\n    if (!this.inputElem) return;\n    this.inputElem.focus();\n  }\n\n  markRead = () => {\n    const { dispatch, chat } = this.props;\n    if (!chat) return;\n    dispatch(markChatRead(chat.get('id')));\n  }\n\n  componentDidMount() {\n    const { dispatch, params } = this.props;\n    dispatch(fetchChat(params.chatId));\n    this.markRead();\n  }\n\n  componentDidUpdate(prevProps) {\n    const markReadConditions = [\n      () => this.props.chat,\n      () => this.props.chat.get('unread') > 0,\n    ];\n\n    if (markReadConditions.every(c => c()))\n      this.markRead();\n  }\n\n  render() {\n    const { chat, displayFqn } = this.props;\n    if (!chat) return null;\n    const account = chat.get('account');\n\n    return (\n      <Column>\n        <div className='chatroom__back'>\n          <ColumnBackButton />\n          <Link to={`/@${account.get('acct')}`} className='chatroom__header'>\n            <Avatar account={account} size={18} />\n            <div className='chatroom__title'>\n              @{getAcct(account, displayFqn)}\n            </div>\n          </Link>\n        </div>\n        <ChatBox\n          chatId={chat.get('id')}\n          onSetInputRef={this.handleInputRef}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
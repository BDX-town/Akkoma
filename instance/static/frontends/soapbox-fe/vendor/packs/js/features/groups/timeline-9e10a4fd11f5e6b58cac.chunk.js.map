{"version":3,"sources":["webpack:///./app/soapbox/features/groups/timeline/index.js","webpack:///./app/soapbox/features/groups/members/index.js","webpack:///./app/soapbox/features/groups/removed_accounts/index.js","webpack:///./app/soapbox/features/groups/edit/index.js"],"names":["GroupTimeline","connect","state","props","me","get","account","getIn","group","params","id","relationships","hasUnread","injectIntl","maxId","dispatch","expandGroupTimeline","componentDidMount","this","disconnect","connectGroupStream","componentWillUnmount","render","columnId","className","size","shouldCondense","autoFocus","alwaysPrepend","scrollKey","timelineId","onLoadMore","handleLoadMore","withGroupAdmin","emptyMessage","defaultMessage","React","PureComponent","router","PropTypes","object","GroupMembers","accountIds","hasMore","expandMembers","leading","fetchMembers","componentDidUpdate","prevProps","map","withNote","ImmutablePureComponent","isRequired","func","ImmutablePropTypes","orderedSet","bool","messages","defineMessages","remove","GroupRemovedAccounts","expandRemovedAccounts","removeRemovedAccount","fetchRemovedAccounts","intl","actionIcon","onActionClick","handleOnActionClick","actionTitle","formatMessage","title","description","coverImage","coverImageChange","update","Edit","disabled","onTitleChange","value","changeValue","onDescriptionChange","onCoverImageChange","onSubmit","routerHistory","submit","setUp","e","target","files","preventDefault","context","history","method","handleSubmit","type","onChange","handleTitleChange","placeholder","handleDescriptionChange","htmlFor","classNames","handleCoverImageChange"],"mappings":"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","file":"js/features/groups/timeline-9e10a4fd11f5e6b58cac.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport StatusListContainer from '../../ui/containers/status_list_container';\nimport Column from '../../../components/column';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connectGroupStream } from '../../../actions/streaming';\nimport { expandGroupTimeline } from '../../../actions/timelines';\nimport MissingIndicator from '../../../components/missing_indicator';\nimport LoadingIndicator from '../../../components/loading_indicator';\nimport ComposeFormContainer from '../../../../soapbox/features/compose/containers/compose_form_container';\nimport Avatar from '../../../components/avatar';\n\nconst mapStateToProps = (state, props) => {\n  const me = state.get('me');\n  return {\n    account: state.getIn(['accounts', me]),\n    group: state.getIn(['groups', props.params.id]),\n    relationships: state.getIn(['group_relationships', props.params.id]),\n    hasUnread: state.getIn(['timelines', `group:${props.params.id}`, 'unread']) > 0,\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass GroupTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    hasUnread: PropTypes.bool,\n    group: PropTypes.oneOfType([ImmutablePropTypes.map, PropTypes.bool]),\n    relationships: ImmutablePropTypes.map,\n    account: ImmutablePropTypes.map,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(expandGroupTimeline(id));\n\n    this.disconnect = dispatch(connectGroupStream(id));\n  }\n\n  componentWillUnmount() {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  handleLoadMore = maxId => {\n    const { id } = this.props.params;\n    this.props.dispatch(expandGroupTimeline(id, { maxId }));\n  }\n\n  render() {\n    const { columnId, group, relationships, account } = this.props;\n    const { id } = this.props.params;\n\n    if (typeof group === 'undefined' || !relationships) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    } else if (group === false) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    return (\n      <div>\n        {relationships.get('member') && (\n          <div className='timeline-compose-block'>\n            <div className='timeline-compose-block__avatar'>\n              <Avatar account={account} size={46} />\n            </div>\n            <ComposeFormContainer group={group} shouldCondense autoFocus={false} />\n          </div>\n        )}\n\n        <div className='group__feed'>\n          <StatusListContainer\n            alwaysPrepend\n            scrollKey={`group_timeline-${columnId}`}\n            timelineId={`group:${id}`}\n            onLoadMore={this.handleLoadMore}\n            group={group}\n            withGroupAdmin={relationships && relationships.get('admin')}\n            emptyMessage={<FormattedMessage id='empty_column.group' defaultMessage='There is nothing in this group yet. When members of this group make new posts, they will appear here.' />}\n          />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../../components/loading_indicator';\nimport {\n  fetchMembers,\n  expandMembers,\n} from '../../../actions/groups';\nimport { FormattedMessage } from 'react-intl';\nimport AccountContainer from '../../../containers/account_container';\nimport Column from '../../ui/components/column';\nimport ScrollableList from '../../../components/scrollable_list';\n\nconst mapStateToProps = (state, { params: { id } }) => ({\n  group: state.getIn(['groups', id]),\n  accountIds: state.getIn(['user_lists', 'groups', id, 'items']),\n  hasMore: !!state.getIn(['user_lists', 'groups', id, 'next']),\n});\n\nexport default @connect(mapStateToProps)\nclass GroupMembers extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.orderedSet,\n    hasMore: PropTypes.bool,\n  };\n\n  componentDidMount() {\n    const { params: { id } } = this.props;\n\n    this.props.dispatch(fetchMembers(id));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.params.id !== prevProps.params.id) {\n      this.props.dispatch(fetchMembers(this.props.params.id));\n    }\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandMembers(this.props.params.id));\n  }, 300, { leading: true });\n\n  render() {\n    const { accountIds, hasMore, group } = this.props;\n\n    if (!group || !accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    return (\n      <Column>\n        <ScrollableList\n          scrollKey='members'\n          hasMore={hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='group.members.empty' defaultMessage='This group does not has any members.' />}\n        >\n          {accountIds.map(id => <AccountContainer key={id} id={id} withNote={false} />)}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../../components/loading_indicator';\nimport {\n  fetchRemovedAccounts,\n  expandRemovedAccounts,\n  removeRemovedAccount,\n} from '../../../actions/groups';\nimport { FormattedMessage } from 'react-intl';\nimport AccountContainer from '../../../containers/account_container';\nimport Column from '../../ui/components/column';\nimport ScrollableList from '../../../components/scrollable_list';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  remove: { id: 'groups.removed_accounts', defaultMessage: 'Allow joining' },\n});\n\nconst mapStateToProps = (state, { params: { id } }) => ({\n  group: state.getIn(['groups', id]),\n  accountIds: state.getIn(['user_lists', 'groups_removed_accounts', id, 'items']),\n  hasMore: !!state.getIn(['user_lists', 'groups_removed_accounts', id, 'next']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass GroupRemovedAccounts extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.orderedSet,\n    hasMore: PropTypes.bool,\n  };\n\n  componentDidMount() {\n    const { params: { id } } = this.props;\n\n    this.props.dispatch(fetchRemovedAccounts(id));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.params.id !== prevProps.params.id) {\n      this.props.dispatch(fetchRemovedAccounts(this.props.params.id));\n    }\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandRemovedAccounts(this.props.params.id));\n  }, 300, { leading: true });\n\n  handleOnActionClick = (group, id) => {\n    return () => {\n      this.props.dispatch(removeRemovedAccount(group.get('id'), id));\n    };\n  }\n\n  render() {\n    const { accountIds, hasMore, group, intl } = this.props;\n\n    if (!group || !accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    return (\n      <Column>\n        <ScrollableList\n          scrollKey='removed_accounts'\n          hasMore={hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='group.removed_accounts.empty' defaultMessage='This group does not has any removed accounts.' />}\n        >\n          {accountIds.map(id => (<AccountContainer\n            key={id}\n            id={id}\n            actionIcon='remove'\n            onActionClick={this.handleOnActionClick(group, id)}\n            actionTitle={intl.formatMessage(messages.remove)}\n          />))}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { changeValue, submit, setUp } from '../../../actions/group_editor';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport LoadingIndicator from '../../../components/loading_indicator';\nimport MissingIndicator from 'soapbox/components/missing_indicator';\nimport Column from '../../../components/column';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  title: { id: 'groups.form.title', defaultMessage: 'Title' },\n  description: { id: 'groups.form.description', defaultMessage: 'Description' },\n  coverImage: { id: 'groups.form.coverImage', defaultMessage: 'Upload new banner image (optional)' },\n  coverImageChange: { id: 'groups.form.coverImageChange', defaultMessage: 'Banner image selected' },\n  update: { id: 'groups.form.update', defaultMessage: 'Update group' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  group: state.getIn(['groups', props.params.id]),\n  title: state.getIn(['group_editor', 'title']),\n  description: state.getIn(['group_editor', 'description']),\n  coverImage: state.getIn(['group_editor', 'coverImage']),\n  disabled: state.getIn(['group_editor', 'isSubmitting']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTitleChange: value => dispatch(changeValue('title', value)),\n  onDescriptionChange: value => dispatch(changeValue('description', value)),\n  onCoverImageChange: value => dispatch(changeValue('coverImage', value)),\n  onSubmit: routerHistory => dispatch(submit(routerHistory)),\n  setUp: group => dispatch(setUp(group)),\n});\n\nexport default @connect(mapStateToProps, mapDispatchToProps)\n@injectIntl\nclass Edit extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  }\n\n  static propTypes = {\n    group: ImmutablePropTypes.map,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    coverImage: PropTypes.object,\n    disabled: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n    onTitleChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    onDescriptionChange: PropTypes.func.isRequired,\n    onCoverImageChange: PropTypes.func.isRequired,\n    setUp: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    if (props.group) props.setUp(props.group);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.group && this.props.group) {\n      this.props.setUp(this.props.group);\n    }\n  }\n\n  handleTitleChange = e => {\n    this.props.onTitleChange(e.target.value);\n  }\n\n  handleDescriptionChange = e => {\n    this.props.onDescriptionChange(e.target.value);\n  }\n\n  handleCoverImageChange = e => {\n    this.props.onCoverImageChange(e.target.files[0]);\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.context.router.history);\n  }\n\n  handleClick = () => {\n    this.props.onSubmit(this.context.router.history);\n  }\n\n  render() {\n    const { group, title, description, coverImage, disabled, intl } = this.props;\n\n    if (typeof group === 'undefined') {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    } else if (group === false) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    return (\n      <form className='group-form' method='post' onSubmit={this.handleSubmit}>\n        <div>\n          <input\n            className='standard'\n            type='text'\n            value={title}\n            disabled={disabled}\n            onChange={this.handleTitleChange}\n            placeholder={intl.formatMessage(messages.title)}\n          />\n        </div>\n\n        <div>\n          <textarea\n            className='standard'\n            type='text'\n            value={description}\n            disabled={disabled}\n            onChange={this.handleDescriptionChange}\n            placeholder={intl.formatMessage(messages.description)}\n          />\n        </div>\n\n        <div>\n          <label htmlFor='group_cover_image' className={classNames('group-form__file-label', { 'group-form__file-label--selected': coverImage !== null })}>\n            {intl.formatMessage(coverImage === null ? messages.coverImage : messages.coverImageChange)}\n          </label>\n\n          <input\n            type='file'\n            className='group-form__file'\n            id='group_cover_image'\n            disabled={disabled}\n            onChange={this.handleCoverImageChange}\n          />\n\n          <button>{intl.formatMessage(messages.update)}</button>\n        </div>\n      </form>\n    );\n  }\n\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./app/soapbox/features/auth_login/components/login_page.js","webpack:///./app/soapbox/features/auth_login/components/password_reset.js"],"names":["LoginPage","connect","state","me","get","isLoading","props","mfa_auth_needed","mfa_token","shouldRedirect","form","Object","fromEntries","Array","from","map","i","name","value","event","dispatch","getFormData","target","username","password","logIn","then","access_token","verifyCredentials","account","setState","switchAccount","id","catch","error","response","data","preventDefault","handleSubmit","bind","render","this","to","ImmutablePureComponent","PasswordReset","success","e","nicknameOrEmail","nickname_or_email","resetPassword","snackbar","info","onSubmit","disabled","label","placeholder","required","className","type"],"mappings":"mOAcMA,EADUC,kBALQ,SAAAC,GAAK,MAAK,CAChCC,GAAID,EAAME,IAAI,MACdC,WAAW,I,eAMX,WAAYC,GAAQ,IAClB,cAAMA,IAAN,KADiB,0CAKX,CACND,WAAW,EACXE,iBAAiB,EACjBC,UAAW,GACXC,gBAAgB,IATC,yCAYL,SAACC,GACb,OAAOC,OAAOC,YACZC,MAAMC,KAAKJ,GAAMK,IAAI,SAAAC,GAAC,MAAI,CAACA,EAAEC,KAAMD,EAAEE,YAdtB,0CAkBJ,SAACC,GAAW,IAAD,EACC,EAAKb,MAAtBc,EADgB,EAChBA,SAAUjB,EADM,EACNA,GADM,EAEO,EAAKkB,YAAYF,EAAMG,QAA9CC,EAFgB,EAEhBA,SAAUC,EAFM,EAENA,SAClBJ,EAASK,YAAMF,EAAUC,IAAWE,KAAK,YAAuB,IAApBC,EAAmB,EAAnBA,aAC1C,OAAOP,EAASQ,YAAkBD,MACjCD,KAAK,SAAAG,GACN,EAAKC,SAAS,CAAErB,gBAAgB,IACd,iBAAPN,GACTiB,EAASW,YAAcF,EAAQG,OAEhCC,MAAM,SAAAC,GAC2B,iBAA9BA,EAAMC,SAASC,KAAKF,OACtB,EAAKJ,SAAS,CAAEvB,iBAAiB,EAAMC,UAAW0B,EAAMC,SAASC,KAAK5B,YAExE,EAAKsB,SAAS,CAAEzB,WAAW,MAE7B,EAAKyB,SAAS,CAAEzB,WAAW,IAC3Bc,EAAMkB,mBAjCN,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,oCAsCnBC,OAAA,WAAU,IAAD,EAC2DC,KAAKvC,MAA/DG,EADD,EACCA,UAAWE,EADZ,EACYA,gBAAiBC,EAD7B,EAC6BA,UAEpC,OAHO,EACwCC,eAEpB,YAAC,IAAD,CAAUiC,GAAG,MAEpCnC,EAAwB,YAAC,IAAD,CAAaC,UAAWA,IAE7C,YAAC,IAAD,CAAW8B,aAAcG,KAAKH,aAAcjC,UAAWA,K,GA/C1CsC,O,0KCLlBC,EADU3C,mB,yLAGN,CACNI,WAAW,EACXwC,SAAS,I,0CAGI,SAAAC,GAAM,IACX1B,EAAa,EAAKd,MAAlBc,SACF2B,EAAkBD,EAAExB,OAAO0B,kBAAkB9B,MACnD,EAAKY,SAAS,CAAEzB,WAAW,IAC3Be,EAAS6B,YAAcF,IAAkBrB,KAAK,WAC5C,EAAKI,SAAS,CAAEzB,WAAW,EAAOwC,SAAS,IAC3CzB,EAAS8B,IAASC,KAAK,yCACtBlB,MAAM,SAAAC,GACP,EAAKJ,SAAS,CAAEzB,WAAW,Q,sCAI/BmC,OAAA,WACE,OAAIC,KAAKvC,MAAM2C,QAAgB,YAAC,IAAD,CAAUH,GAAG,MAG1C,YAAC,IAAD,CAAYU,SAAUX,KAAKH,mBAA3B,EACE,wBAAUe,SAAUZ,KAAKvC,MAAMG,gBAA/B,EACE,YAAC,IAAD,UACE,YAAC,IAAD,CACEY,KAAK,oBACLqC,MAAM,oBACNC,YAAY,iBACZC,UAAQ,MAId,mBAAKC,UAAU,gBAAf,EACE,sBAAQxC,KAAK,SAASyC,KAAK,SAASD,UAAU,kCAA9C,uB,GAnCkBd,O","file":"js/features/auth_login-b218bd1604cc613fb9af.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport LoginForm from './login_form';\nimport OtpAuthForm from './otp_auth_form';\nimport { logIn, verifyCredentials, switchAccount } from 'soapbox/actions/auth';\n\nconst mapStateToProps = state => ({\n  me: state.get('me'),\n  isLoading: false,\n});\n\nexport default @connect(mapStateToProps)\nclass LoginPage extends ImmutablePureComponent {\n\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  state = {\n    isLoading: false,\n    mfa_auth_needed: false,\n    mfa_token: '',\n    shouldRedirect: false,\n  }\n\n  getFormData = (form) => {\n    return Object.fromEntries(\n      Array.from(form).map(i => [i.name, i.value]),\n    );\n  }\n\n  handleSubmit = (event) => {\n    const { dispatch, me } = this.props;\n    const { username, password } = this.getFormData(event.target);\n    dispatch(logIn(username, password)).then(({ access_token }) => {\n      return dispatch(verifyCredentials(access_token));\n    }).then(account => {\n      this.setState({ shouldRedirect: true });\n      if (typeof me === 'string') {\n        dispatch(switchAccount(account.id));\n      }\n    }).catch(error => {\n      if (error.response.data.error === 'mfa_required') {\n        this.setState({ mfa_auth_needed: true, mfa_token: error.response.data.mfa_token });\n      }\n      this.setState({ isLoading: false });\n    });\n    this.setState({ isLoading: true });\n    event.preventDefault();\n  }\n\n  render() {\n    const { isLoading, mfa_auth_needed, mfa_token, shouldRedirect } = this.state;\n\n    if (shouldRedirect) return <Redirect to='/' />;\n\n    if (mfa_auth_needed) return <OtpAuthForm mfa_token={mfa_token} />;\n\n    return <LoginForm handleSubmit={this.handleSubmit} isLoading={isLoading} />;\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { resetPassword } from 'soapbox/actions/auth';\nimport { SimpleForm, FieldsGroup, TextInput } from 'soapbox/features/forms';\nimport { Redirect } from 'react-router-dom';\nimport snackbar from 'soapbox/actions/snackbar';\n\nexport default @connect()\nclass PasswordReset extends ImmutablePureComponent {\n\n  state = {\n    isLoading: false,\n    success: false,\n  }\n\n  handleSubmit = e => {\n    const { dispatch } = this.props;\n    const nicknameOrEmail = e.target.nickname_or_email.value;\n    this.setState({ isLoading: true });\n    dispatch(resetPassword(nicknameOrEmail)).then(() => {\n      this.setState({ isLoading: false, success: true });\n      dispatch(snackbar.info('Check your email for confirmation.'));\n    }).catch(error => {\n      this.setState({ isLoading: false });\n    });\n  }\n\n  render() {\n    if (this.state.success) return <Redirect to='/' />;\n\n    return (\n      <SimpleForm onSubmit={this.handleSubmit}>\n        <fieldset disabled={this.state.isLoading}>\n          <FieldsGroup>\n            <TextInput\n              name='nickname_or_email'\n              label='Email or username'\n              placeholder='me@example.com'\n              required\n            />\n          </FieldsGroup>\n        </fieldset>\n        <div className='actions'>\n          <button name='button' type='submit' className='btn button button-primary'>Reset password</button>\n        </div>\n      </SimpleForm>\n    );\n  }\n\n}\n"],"sourceRoot":""}
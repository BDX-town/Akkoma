{"version":3,"sources":["webpack:///./app/soapbox/features/ui/components/column_link.js","webpack:///./app/soapbox/features/lists/index.js"],"names":["ColumnLink","icon","text","to","href","method","badge","badgeElement","className","data-method","id","fixedWidth","Link","messages","defineMessages","heading","subheading","add","getOrderedLists","createSelector","state","get","lists","toList","filter","item","sort","a","b","localeCompare","Lists","connect","injectIntl","componentDidMount","this","props","dispatch","fetchLists","render","intl","emptyMessage","defaultMessage","formatMessage","backBtnSlim","scrollKey","map","list","ImmutablePureComponent","params","PropTypes","object","isRequired","func","ImmutablePropTypes"],"mappings":"kGAKmB,SA+BJA,EA/BK,GAA6C,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC5CC,OAAgC,IAAVD,EAAwB,oBAAME,UAAU,2BAAhB,EAAsCF,GAAgB,KAE1G,OAAIF,EAEA,iBAAGA,KAAMA,EAAMI,UAAU,cAAcC,cAAaJ,QAApD,EACE,YAAC,IAAD,CAAMK,GAAIT,EAAMU,YAAU,EAACH,UAAU,sBACpCN,EACAK,GAKH,YAACK,EAAA,EAAD,CAAMT,GAAIA,EAAIK,UAAU,oBAAxB,EACE,YAAC,IAAD,CAAME,GAAIT,EAAMU,YAAU,EAACH,UAAU,sBACpCN,EACAK,G,gOCNT,IAAMM,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,0CACPC,WAAW,CAAD,mDACVC,IAAI,CAAD,mDAGCC,EAAkBC,YAAe,CAAC,SAAAC,GAAK,OAAIA,EAAMC,IAAI,WAAW,SAAAC,GACpE,OAAKA,EAIEA,EAAMC,SAASC,OAAO,SAAAC,GAAI,QAAMA,IAAMC,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEN,IAAI,SAASQ,cAAcD,EAAEP,IAAI,YAHtFC,IAYLQ,EAFUC,kBAJQ,SAAAX,GAAK,MAAK,CAChCE,MAAOJ,EAAgBE,K,GAIxBY,a,8GAUCC,kBAAA,WACEC,KAAKC,MAAMC,SAASC,gB,EAGtBC,OAAA,WAAU,IAAD,EACiBJ,KAAKC,MAArBI,EADD,EACCA,KAAMjB,EADP,EACOA,MAEd,IAAKA,EACH,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAKN,IAAMkB,EAAe,YAAC,IAAD,CAAkB9B,GAAG,qBAAqB+B,eAAe,6EAE9E,OACE,YAAC,IAAD,CAAQxC,KAAK,UAAUc,QAASwB,EAAKG,cAAc7B,EAASE,SAAU4B,aAAW,QAAjF,EACE,qBACA,YAAC,IAAD,CAAkBzC,KAAMqC,EAAKG,cAAc7B,EAASI,OACpD,YAAC,IAAD,IACA,qBACA,YAAC,IAAD,CAAkBf,KAAMqC,EAAKG,cAAc7B,EAASG,cACpD,YAAC,IAAD,CACE4B,UAAU,QACVJ,aAAcA,QAFhB,EAIGlB,EAAMuB,IAAI,SAAAC,GAAI,OACb,YAAC,EAAD,CAAiC3C,GAAE,SAAW2C,EAAKzB,IAAI,MAASpB,KAAK,UAAUC,KAAM4C,EAAKzB,IAAI,UAA7EyB,EAAKzB,IAAI,Y,GAtClB0B,K,0BAEC,CACjBC,OAAQC,IAAUC,OAAOC,WACzBf,SAAUa,IAAUG,KAAKD,WACzB7B,MAAO+B,IAAmBP,KAC1BP,KAAMU,IAAUC,OAAOC,a","file":"js/features/lists-015e559cd81249c15d07.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Icon from 'soapbox/components/icon';\n\nconst ColumnLink = ({ icon, text, to, href, method, badge }) => {\n  const badgeElement = typeof badge !== 'undefined' ? <span className='column-link__badge'>{badge}</span> : null;\n\n  if (href) {\n    return (\n      <a href={href} className='column-link' data-method={method}>\n        <Icon id={icon} fixedWidth className='column-link__icon' />\n        {text}\n        {badgeElement}\n      </a>\n    );\n  } else {\n    return (\n      <Link to={to} className='column-link'>\n        <Icon id={icon} fixedWidth className='column-link__icon' />\n        {text}\n        {badgeElement}\n      </Link>\n    );\n  }\n};\n\nColumnLink.propTypes = {\n  icon: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  to: PropTypes.string,\n  href: PropTypes.string,\n  method: PropTypes.string,\n  badge: PropTypes.node,\n};\n\nexport default ColumnLink;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport { fetchLists } from '../../actions/lists';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ColumnLink from '../ui/components/column_link';\nimport ColumnSubheading from '../ui/components/column_subheading';\nimport NewListForm from './components/new_list_form';\nimport { createSelector } from 'reselect';\nimport ScrollableList from '../../components/scrollable_list';\n\nconst messages = defineMessages({\n  heading: { id: 'column.lists', defaultMessage: 'Lists' },\n  subheading: { id: 'lists.subheading', defaultMessage: 'Your lists' },\n  add: { id: 'lists.new.create', defaultMessage: 'Add list' },\n});\n\nconst getOrderedLists = createSelector([state => state.get('lists')], lists => {\n  if (!lists) {\n    return lists;\n  }\n\n  return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title')));\n});\n\nconst mapStateToProps = state => ({\n  lists: getOrderedLists(state),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Lists extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    lists: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    this.props.dispatch(fetchLists());\n  }\n\n  render() {\n    const { intl, lists } = this.props;\n\n    if (!lists) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.lists' defaultMessage=\"You don't have any lists yet. When you create one, it will show up here.\" />;\n\n    return (\n      <Column icon='list-ul' heading={intl.formatMessage(messages.heading)} backBtnSlim>\n        <br />\n        <ColumnSubheading text={intl.formatMessage(messages.add)} />\n        <NewListForm />\n        <br />\n        <ColumnSubheading text={intl.formatMessage(messages.subheading)} />\n        <ScrollableList\n          scrollKey='lists'\n          emptyMessage={emptyMessage}\n        >\n          {lists.map(list =>\n            <ColumnLink key={list.get('id')} to={`/list/${list.get('id')}`} icon='list-ul' text={list.get('title')} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
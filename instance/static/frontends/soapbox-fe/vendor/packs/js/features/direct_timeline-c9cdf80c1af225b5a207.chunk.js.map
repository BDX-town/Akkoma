{"version":3,"sources":["webpack:///./app/soapbox/features/direct_timeline/index.js"],"names":["messages","defineMessages","title","DirectTimeline","connect","state","hasUnread","getIn","injectIntl","maxId","props","dispatch","expandDirectTimeline","componentDidMount","this","disconnect","connectDirectStream","componentWillUnmount","render","intl","label","formatMessage","icon","active","onPin","handlePin","scrollKey","timelineId","onLoadMore","handleLoadMore","emptyMessage","id","defaultMessage","React","PureComponent"],"mappings":"mQAUMA,EAAWC,YAAe,CAC9BC,MAAM,CAAD,uDASDC,EAFUC,kBAJQ,SAAAC,GAAK,MAAK,CAChCC,UAA4D,EAAjDD,EAAME,MAAM,CAAC,YAAa,SAAU,a,GAIhDC,Y,iMAuBkB,SAAAC,GACf,EAAKC,MAAMC,SAASC,YAAqB,CAAEH,a,8CAf7CI,kBAAA,WAAqB,IACXF,EAAaG,KAAKJ,MAAlBC,SAERA,EAASC,eACTE,KAAKC,WAAaJ,EAASK,gB,EAG7BC,qBAAA,WACMH,KAAKC,aACPD,KAAKC,aACLD,KAAKC,WAAa,O,EAQtBG,OAAA,WAAU,IAAD,EACqBJ,KAAKJ,MAAzBS,EADD,EACCA,KAAMb,EADP,EACOA,UAEd,OACE,YAAC,IAAD,CAAQc,MAAOD,EAAKE,cAAcrB,EAASE,aAA3C,EACE,YAAC,IAAD,CACEoB,KAAK,WACLC,OAAQjB,EACRJ,MAAOiB,EAAKE,cAAcrB,EAASE,OACnCsB,MAAOV,KAAKW,YAGd,YAAC,IAAD,CACEC,UAAU,kBACVC,WAAW,SACXC,WAAYd,KAAKe,eACjBC,aAAc,YAAC,IAAD,CAAkBC,GAAG,sBAAsBC,eAAe,oG,GA1CrDC,IAAMC,iB","file":"js/features/direct_timeline-c9cdf80c1af225b5a207.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport { expandDirectTimeline } from '../../actions/timelines';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { connectDirectStream } from '../../actions/streaming';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Direct messages' },\n});\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'direct', 'unread']) > 0,\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass DirectTimeline extends React.PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n  };\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n\n    dispatch(expandDirectTimeline());\n    this.disconnect = dispatch(connectDirectStream());\n  }\n\n  componentWillUnmount() {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandDirectTimeline({ maxId }));\n  }\n\n  render() {\n    const { intl, hasUnread } = this.props;\n\n    return (\n      <Column label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='envelope'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n        />\n\n        <StatusListContainer\n          scrollKey='direct_timeline'\n          timelineId='direct'\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any direct messages yet. When you send or receive one, it will show up here.\" />}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./app/soapbox/features/security/index.js"],"names":["mapStateToProps","state","settings","getSettings","tokens","getIn","messages","defineMessages","heading","submit","updateEmailSuccess","updateEmailFail","updatePasswordSuccess","updatePasswordFail","emailFieldLabel","passwordFieldLabel","oldPasswordFieldLabel","newPasswordFieldLabel","confirmationFieldLabel","revoke","emailHeader","passwordHeader","tokenHeader","deleteHeader","deleteText","deleteSubmit","deleteAccountSuccess","deleteAccountFail","mfa","mfa_setup_hint","mfa_enabled","disable_mfa","mfaHeader","SecurityForm","connect","injectIntl","render","intl","this","props","icon","formatMessage","backBtnSlim","ChangeEmailForm","ChangePasswordForm","SetUpMfa","AuthTokenList","DeactivateAccount","ImmutablePureComponent","dispatch","PropTypes","func","isRequired","object","email","password","isLoading","e","setState","target","name","value","changeEmail","then","snackbar","success","catch","error","onSubmit","handleSubmit","disabled","label","placeholder","onChange","handleInputChange","type","className","string","oldPassword","newPassword","confirmation","changePassword","clearForm","context","router","history","push","fetchUserMfaSettings","response","changeSetting","data","enabled","get","text","onClick","handleMfaClick","ImmutablePropTypes","map","id","revokeOAuthToken","componentDidMount","fetchOAuthTokens","isEmpty","reverse","token","i","Date","hour12","year","month","day","hour","minute","handleRevoke","list","deleteAccount"],"mappings":"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","file":"js/features/security-6ce7bbe38e001b769704.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedDate } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from '../ui/components/column';\nimport Button from 'soapbox/components/button';\nimport {\n  SimpleForm,\n  SimpleInput,\n  FieldsGroup,\n  TextInput,\n} from 'soapbox/features/forms';\nimport {\n  changeEmail,\n  changePassword,\n  fetchOAuthTokens,\n  revokeOAuthToken,\n  deleteAccount,\n} from 'soapbox/actions/auth';\nimport { fetchUserMfaSettings } from '../../actions/mfa';\nimport snackbar from 'soapbox/actions/snackbar';\nimport { changeSetting, getSettings } from 'soapbox/actions/settings';\n\n/*\nSecurity settings page for user account\nRouted to /auth/edit\nIncludes following features:\n- Change Email\n- Change Password\n- Sessions\n- Deactivate Account\n*/\n\nconst messages = defineMessages({\n  heading: { id: 'column.security', defaultMessage: 'Security' },\n  submit: { id: 'security.submit', defaultMessage: 'Save changes' },\n  updateEmailSuccess: { id: 'security.update_email.success', defaultMessage: 'Email successfully updated.' },\n  updateEmailFail: { id: 'security.update_email.fail', defaultMessage: 'Update email failed.' },\n  updatePasswordSuccess: { id: 'security.update_password.success', defaultMessage: 'Password successfully updated.' },\n  updatePasswordFail: { id: 'security.update_password.fail', defaultMessage: 'Update password failed.' },\n  emailFieldLabel: { id: 'security.fields.email.label', defaultMessage: 'Email address' },\n  passwordFieldLabel: { id: 'security.fields.password.label', defaultMessage: 'Password' },\n  oldPasswordFieldLabel: { id: 'security.fields.old_password.label', defaultMessage: 'Current password' },\n  newPasswordFieldLabel: { id: 'security.fields.new_password.label', defaultMessage: 'New password' },\n  confirmationFieldLabel: { id: 'security.fields.password_confirmation.label', defaultMessage: 'New password (again)' },\n  revoke: { id: 'security.tokens.revoke', defaultMessage: 'Revoke' },\n  emailHeader: { id: 'security.headers.update_email', defaultMessage: 'Change Email' },\n  passwordHeader: { id: 'security.headers.update_password', defaultMessage: 'Change Password' },\n  tokenHeader: { id: 'security.headers.tokens', defaultMessage: 'Sessions' },\n  deleteHeader: { id: 'security.headers.delete', defaultMessage: 'Delete Account' },\n  deleteText: { id: 'security.text.delete', defaultMessage: 'To delete your account, enter your password then click Delete Account. This is a permanent action that cannot be undone. Your account will be destroyed from this server, and a deletion request will be sent to other servers. It\\'s not guaranteed that all servers will purge your account.' },\n  deleteSubmit: { id: 'security.submit.delete', defaultMessage: 'Delete Account' },\n  deleteAccountSuccess: { id: 'security.delete_account.success', defaultMessage: 'Account successfully deleted.' },\n  deleteAccountFail: { id: 'security.delete_account.fail', defaultMessage: 'Account deletion failed.' },\n  mfa: { id: 'security.mfa', defaultMessage: 'Set up 2-Factor Auth' },\n  mfa_setup_hint: { id: 'security.mfa_setup_hint', defaultMessage: 'Configure multi-factor authentication with OTP' },\n  mfa_enabled: { id: 'security.mfa_enabled', defaultMessage: 'You have multi-factor authentication set up with OTP.' },\n  disable_mfa: { id: 'security.disable_mfa', defaultMessage: 'Disable' },\n  mfaHeader: { id: 'security.mfa_header', defaultMessage: 'Authorization Methods' },\n\n});\n\nconst mapStateToProps = state => ({\n  settings: getSettings(state),\n  tokens: state.getIn(['security', 'tokens']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass SecurityForm extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const { intl } = this.props;\n\n    return (\n      <Column icon='lock' heading={intl.formatMessage(messages.heading)} backBtnSlim>\n        <ChangeEmailForm />\n        <ChangePasswordForm />\n        <SetUpMfa />\n        <AuthTokenList />\n        <DeactivateAccount />\n      </Column>\n    );\n  }\n\n}\n\n@connect()\n@injectIntl\nclass ChangeEmailForm extends ImmutablePureComponent {\n\n  static propTypes = {\n    email: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    email: '',\n    password: '',\n    isLoading: false,\n  }\n\n  handleInputChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleSubmit = e => {\n    const { email, password } = this.state;\n    const { dispatch, intl } = this.props;\n    this.setState({ isLoading: true });\n    return dispatch(changeEmail(email, password)).then(() => {\n      this.setState({ email: '', password: '' }); // TODO: Maybe redirect user\n      dispatch(snackbar.success(intl.formatMessage(messages.updateEmailSuccess)));\n    }).catch(error => {\n      this.setState({ password: '' });\n      dispatch(snackbar.error(intl.formatMessage(messages.updateEmailFail)));\n    }).then(() => {\n      this.setState({ isLoading: false });\n    });\n  }\n\n  render() {\n    const { intl } = this.props;\n\n    return (\n      <SimpleForm onSubmit={this.handleSubmit}>\n        <h2>{intl.formatMessage(messages.emailHeader)}</h2>\n        <fieldset disabled={this.state.isLoading}>\n          <FieldsGroup>\n            <TextInput\n              label={intl.formatMessage(messages.emailFieldLabel)}\n              placeholder='me@example.com'\n              name='email'\n              onChange={this.handleInputChange}\n              value={this.state.email}\n            />\n            <SimpleInput\n              type='password'\n              label={intl.formatMessage(messages.passwordFieldLabel)}\n              name='password'\n              onChange={this.handleInputChange}\n              value={this.state.password}\n            />\n            <div className='actions'>\n              <button name='button' type='submit' className='btn button button-primary'>\n                {intl.formatMessage(messages.submit)}\n              </button>\n            </div>\n          </FieldsGroup>\n        </fieldset>\n      </SimpleForm>\n    );\n  }\n\n}\n\n@connect()\n@injectIntl\nclass ChangePasswordForm extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    oldPassword: '',\n    newPassword: '',\n    confirmation: '',\n    isLoading: false,\n  }\n\n  handleInputChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  clearForm = () => {\n    this.setState({ oldPassword: '', newPassword: '', confirmation: '' });\n  }\n\n  handleSubmit = e => {\n    const { oldPassword, newPassword, confirmation } = this.state;\n    const { dispatch, intl } = this.props;\n    this.setState({ isLoading: true });\n    return dispatch(changePassword(oldPassword, newPassword, confirmation)).then(() => {\n      this.clearForm(); // TODO: Maybe redirect user\n      dispatch(snackbar.success(intl.formatMessage(messages.updatePasswordSuccess)));\n    }).catch(error => {\n      this.clearForm();\n      dispatch(snackbar.error(intl.formatMessage(messages.updatePasswordFail)));\n    }).then(() => {\n      this.setState({ isLoading: false });\n    });\n  }\n\n  render() {\n    const { intl } = this.props;\n\n    return (\n      <SimpleForm onSubmit={this.handleSubmit}>\n        <h2>{intl.formatMessage(messages.passwordHeader)}</h2>\n        <fieldset disabled={this.state.isLoading}>\n          <FieldsGroup>\n            <SimpleInput\n              type='password'\n              label={intl.formatMessage(messages.oldPasswordFieldLabel)}\n              name='oldPassword'\n              onChange={this.handleInputChange}\n              value={this.state.oldPassword}\n            />\n            <SimpleInput\n              type='password'\n              label={intl.formatMessage(messages.newPasswordFieldLabel)}\n              name='newPassword'\n              onChange={this.handleInputChange}\n              value={this.state.newPassword}\n            />\n            <SimpleInput\n              type='password'\n              label={intl.formatMessage(messages.confirmationFieldLabel)}\n              name='confirmation'\n              onChange={this.handleInputChange}\n              value={this.state.confirmation}\n            />\n            <div className='actions'>\n              <button name='button' type='submit' className='btn button button-primary'>\n                {intl.formatMessage(messages.submit)}\n              </button>\n            </div>\n          </FieldsGroup>\n        </fieldset>\n      </SimpleForm>\n    );\n  }\n\n}\n\n@connect(mapStateToProps)\n@injectIntl\nclass SetUpMfa extends ImmutablePureComponent {\n\n  constructor(props) {\n    super(props);\n    this.props.dispatch(fetchUserMfaSettings()).then(response => {\n      this.props.dispatch(changeSetting(['otpEnabled'], response.data.settings.enabled));\n    }).catch(e => e);\n  }\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    settings: ImmutablePropTypes.map.isRequired,\n  };\n\n  handleMfaClick = e => {\n    this.context.router.history.push('../auth/mfa');\n  }\n\n  render() {\n    const { intl, settings } = this.props;\n\n    return (\n      <SimpleForm>\n        <h2>{intl.formatMessage(messages.mfaHeader)}</h2>\n        { settings.get('otpEnabled') === false ?\n          <div>\n            <p className='hint'>\n              {intl.formatMessage(messages.mfa_setup_hint)}\n            </p>\n            <Button className='button button-secondary set-up-mfa' text={intl.formatMessage(messages.mfa)} onClick={this.handleMfaClick} />\n          </div> :\n          <div>\n            <p className='hint'>\n              {intl.formatMessage(messages.mfa_enabled)}\n            </p>\n            <Button className='button button--destructive disable-mfa' text={intl.formatMessage(messages.disable_mfa)} onClick={this.handleMfaClick} />\n          </div>\n        }\n      </SimpleForm>\n    );\n  }\n\n}\n\n\n@connect(mapStateToProps)\n@injectIntl\nclass AuthTokenList extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    tokens: ImmutablePropTypes.list,\n  };\n\n  handleRevoke = id => {\n    return e => {\n      this.props.dispatch(revokeOAuthToken(id));\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(fetchOAuthTokens());\n  }\n\n  render() {\n    const { tokens, intl } = this.props;\n    if (tokens.isEmpty()) return null;\n    return (\n      <SimpleForm>\n        <h2>{intl.formatMessage(messages.tokenHeader)}</h2>\n        <div className='authtokens'>\n          {tokens.reverse().map((token, i) => (\n            <div key={i} className='authtoken'>\n              <div className='authtoken__app-name'>{token.get('app_name')}</div>\n              <div className='authtoken__valid-until'>\n                <FormattedDate\n                  value={new Date(token.get('valid_until'))}\n                  hour12={false}\n                  year='numeric'\n                  month='short'\n                  day='2-digit'\n                  hour='2-digit'\n                  minute='2-digit'\n                />\n              </div>\n              <div className='authtoken__revoke'>\n                <button onClick={this.handleRevoke(token.get('id'))}>\n                  {this.props.intl.formatMessage(messages.revoke)}\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </SimpleForm>\n    );\n  }\n\n}\n\n@connect(mapStateToProps)\n@injectIntl\nclass DeactivateAccount extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    password: '',\n    isLoading: false,\n  }\n\n  handleInputChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleSubmit = e => {\n    const { password } = this.state;\n    const { dispatch, intl } = this.props;\n    this.setState({ isLoading: true });\n    return dispatch(deleteAccount(password)).then(() => {\n      //this.setState({ email: '', password: '' }); // TODO: Maybe redirect user\n      dispatch(snackbar.success(intl.formatMessage(messages.deleteAccountSuccess)));\n    }).catch(error => {\n      this.setState({ password: '' });\n      dispatch(snackbar.error(intl.formatMessage(messages.deleteAccountFail)));\n    }).then(() => {\n      this.setState({ isLoading: false });\n    });\n  }\n\n  render() {\n    const { intl } = this.props;\n\n    return (\n      <SimpleForm onSubmit={this.handleSubmit}>\n        <h2>{intl.formatMessage(messages.deleteHeader)}</h2>\n        <p className='hint'>\n          {intl.formatMessage(messages.deleteText)}\n        </p>\n        <fieldset disabled={this.state.isLoading}>\n          <FieldsGroup>\n            <SimpleInput\n              type='password'\n              label={intl.formatMessage(messages.passwordFieldLabel)}\n              name='password'\n              onChange={this.handleInputChange}\n              value={this.state.password}\n            />\n            <div className='actions'>\n              <button name='button' type='submit' className='btn button button-primary'>\n                {intl.formatMessage(messages.deleteSubmit)}\n              </button>\n            </div>\n          </FieldsGroup>\n        </fieldset>\n      </SimpleForm>\n    );\n  }\n\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./app/soapbox/features/backups/index.js"],"names":["messages","defineMessages","heading","create","emptyMessage","emptyMessageAction","pending","Backups","connect","state","backups","get","toList","sortBy","backup","injectIntl","isLoading","e","props","dispatch","createBackup","preventDefault","text","intl","formatMessage","action","handleCreateBackup","componentDidMount","this","fetchBackups","then","setState","catch","render","showLoading","count","href","onClick","icon","menu","makeColumnMenu","scrollKey","map","className","classNames","target","ImmutablePureComponent","PropTypes","object","isRequired"],"mappings":"+QAaMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,8CACPC,OAAO,CAAD,4DACNC,aAAa,CAAD,wEACZC,mBAAmB,CAAD,oEAClBC,QAAQ,CAAD,iDASHC,EAFUC,kBAJQ,SAAAC,GAAK,MAAK,CAChCC,QAASD,EAAME,IAAI,WAAWC,SAASC,OAAO,SAAAC,GAAM,OAAIA,EAAOH,IAAI,mB,GAIpEI,a,0LAOS,CACNC,WAAW,I,gDAGQ,SAAAC,GACnB,EAAKC,MAAMC,SAASC,eACpBH,EAAEI,mB,4CASa,WAGf,MAAO,CAAC,CACNC,KAHe,EAAKJ,MAAdK,KAGKC,cAAcxB,EAASG,QAClCsB,OAAQ,EAAKC,uB,8CAXjBC,kBAAA,WAAqB,IAAD,OAClBC,KAAKV,MAAMC,SAASU,eAAgBC,KAAK,WACvC,EAAKC,SAAS,CAAEf,WAAW,MAC1BgB,MAAM,e,EAYXC,OAAA,WAAU,IAAD,EACmBL,KAAKV,MAAvBK,EADD,EACCA,KAAMb,EADP,EACOA,QACNM,EAAcY,KAAKnB,MAAnBO,UACFkB,EAAclB,GAAiC,IAApBN,EAAQyB,QAEnC9B,EACJ,iBAAG+B,KAAK,IAAIC,QAAST,KAAKF,yBAA1B,EACGH,EAAKC,cAAcxB,EAASK,qBAIjC,OACE,YAAC,IAAD,CAAQiC,KAAK,iBAAiBpC,QAASqB,EAAKC,cAAcxB,EAASE,SAAUqC,KAAMX,KAAKY,uBAAxF,EACE,YAAC,IAAD,CACExB,UAAWA,EACXkB,YAAaA,EACbO,UAAU,UACVrC,aAAcmB,EAAKC,cAAcxB,EAASI,aAAc,CAAEqB,OAAQpB,UAJpE,EAMGK,EAAQgC,IAAI,SAAA5B,GAAM,OACjB,mBACE6B,UAAWC,IAAW,SAAU,CAAE,mBAAoB9B,EAAOH,IAAI,gBAC5DG,EAAOH,IAAI,MAEfG,EAAOH,IAAI,aACR,iBAAGyB,KAAMtB,EAAOH,IAAI,OAAQkC,OAAO,eAAnC,EAA6C/B,EAAOH,IAAI,gBACxD,4BAAMY,EAAKC,cAAcxB,EAASM,SAAlC,KAA8CQ,EAAOH,IAAI,sB,GAxDrDmC,K,0BAED,CACjBvB,KAAMwB,IAAUC,OAAOC,a","file":"js/features/backups-52bf3a044e4b589ffa76.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport Column from '../ui/components/better_column';\nimport {\n  fetchBackups,\n  createBackup,\n} from 'soapbox/actions/backups';\nimport ScrollableList from 'soapbox/components/scrollable_list';\nimport classNames from 'classnames';\n\nconst messages = defineMessages({\n  heading: { id: 'column.backups', defaultMessage: 'Backups' },\n  create: { id: 'backups.actions.create', defaultMessage: 'Create backup' },\n  emptyMessage: { id: 'backups.empty_message', defaultMessage: 'No backups found. {action}' },\n  emptyMessageAction: { id: 'backups.empty_message.action', defaultMessage: 'Create one now?' },\n  pending: { id: 'backups.pending', defaultMessage: 'Pending' },\n});\n\nconst mapStateToProps = state => ({\n  backups: state.get('backups').toList().sortBy(backup => backup.get('inserted_at')),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Backups extends ImmutablePureComponent {\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    isLoading: true,\n  }\n\n  handleCreateBackup = e => {\n    this.props.dispatch(createBackup());\n    e.preventDefault();\n  }\n\n  componentDidMount() {\n    this.props.dispatch(fetchBackups()).then(() => {\n      this.setState({ isLoading: false });\n    }).catch(() => {});\n  }\n\n  makeColumnMenu = () => {\n    const { intl } = this.props;\n\n    return [{\n      text: intl.formatMessage(messages.create),\n      action: this.handleCreateBackup,\n    }];\n  }\n\n  render() {\n    const { intl, backups } = this.props;\n    const { isLoading } = this.state;\n    const showLoading = isLoading && backups.count() === 0;\n\n    const emptyMessageAction = (\n      <a href='#' onClick={this.handleCreateBackup}>\n        {intl.formatMessage(messages.emptyMessageAction)}\n      </a>\n    );\n\n    return (\n      <Column icon='cloud-download' heading={intl.formatMessage(messages.heading)} menu={this.makeColumnMenu()}>\n        <ScrollableList\n          isLoading={isLoading}\n          showLoading={showLoading}\n          scrollKey='backups'\n          emptyMessage={intl.formatMessage(messages.emptyMessage, { action: emptyMessageAction })}\n        >\n          {backups.map(backup => (\n            <div\n              className={classNames('backup', { 'backup--pending': !backup.get('processed') })}\n              key={backup.get('id')}\n            >\n              {backup.get('processed')\n                ? <a href={backup.get('url')} target='_blank'>{backup.get('inserted_at')}</a>\n                : <div>{intl.formatMessage(messages.pending)}: {backup.get('inserted_at')}</div>\n              }\n            </div>\n          ))}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
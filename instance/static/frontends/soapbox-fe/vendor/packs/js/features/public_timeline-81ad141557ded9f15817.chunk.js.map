{"version":3,"sources":["webpack:///./app/soapbox/features/public_timeline/components/column_settings.js","webpack:///./app/soapbox/features/public_timeline/containers/column_settings_container.js","webpack:///./app/soapbox/features/public_timeline/index.js"],"names":["ColumnSettings","injectIntl","render","this","props","settings","onChange","className","prefix","settingPath","label","id","defaultMessage","React","PureComponent","connect","state","getSettings","get","dispatch","key","checked","changeSetting","messages","defineMessages","title","CommunityTimeline","onlyMedia","getIn","timelineId","hasUnread","siteTitle","explanationBoxExpanded","setting","maxId","expandPublicTimeline","componentDidMount","disconnect","connectPublicStream","componentDidUpdate","prevProps","componentWillUnmount","intl","formatMessage","activeItem","active","headline","expanded","onToggle","toggleExplanationBox","values","site_title","local","Link","to","scrollKey","onLoadMore","handleLoadMore","emptyMessage","router","PropTypes","object"],"mappings":"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","file":"js/features/public_timeline-81ad141557ded9f15817.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nexport default @injectIntl\nclass ColumnSettings extends React.PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle prefix='public_timeline' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_reblogs' defaultMessage='Show reposts' />} />\n        </div>\n\n        <div className='column-settings__row'>\n          <SettingToggle prefix='public_timeline' settings={settings} settingPath={['shows', 'reply']} onChange={onChange} label={<FormattedMessage id='home.column_settings.show_replies' defaultMessage='Show replies' />} />\n        </div>\n\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media Only' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\nimport ColumnSettings from '../components/column_settings';\nimport { getSettings, changeSetting } from '../../../actions/settings';\n\nconst mapStateToProps = state => ({\n  settings: getSettings(state).get('public'),\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onChange(key, checked) {\n      dispatch(changeSetting(['public', ...key], checked));\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport StatusListContainer from '../ui/containers/status_list_container';\nimport Column from '../../components/column';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport HomeColumnHeader from '../../components/home_column_header';\nimport Accordion from 'soapbox/features/ui/components/accordion';\nimport { expandPublicTimeline } from '../../actions/timelines';\nimport { connectPublicStream } from '../../actions/streaming';\nimport { Link } from 'react-router-dom';\nimport { changeSetting, getSettings } from 'soapbox/actions/settings';\n\nconst messages = defineMessages({\n  title: { id: 'column.public', defaultMessage: 'Federated timeline' },\n});\n\nconst mapStateToProps = state => {\n  const settings = getSettings(state);\n  const onlyMedia = settings.getIn(['public', 'other', 'onlyMedia']);\n\n  const timelineId = 'public';\n\n  return {\n    timelineId,\n    onlyMedia,\n    hasUnread: state.getIn(['timelines', `${timelineId}${onlyMedia ? ':media' : ''}`, 'unread']) > 0,\n    siteTitle: state.getIn(['instance', 'title']),\n    explanationBoxExpanded: settings.get('explanationBox'),\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass CommunityTimeline extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n    timelineId: PropTypes.string,\n    siteTitle: PropTypes.string,\n    explanationBoxExpanded: PropTypes.bool,\n  };\n\n  componentDidMount() {\n    const { dispatch, onlyMedia } = this.props;\n    dispatch(expandPublicTimeline({ onlyMedia }));\n    this.disconnect = dispatch(connectPublicStream({ onlyMedia }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      const { dispatch, onlyMedia } = this.props;\n      this.disconnect();\n\n      dispatch(expandPublicTimeline({ onlyMedia }));\n      this.disconnect = dispatch(connectPublicStream({ onlyMedia }));\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  toggleExplanationBox = (setting) => {\n    this.props.dispatch(changeSetting(['explanationBox'], setting));\n  }\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia } = this.props;\n    dispatch(expandPublicTimeline({ maxId, onlyMedia }));\n  }\n\n  render() {\n    const { intl, hasUnread, onlyMedia, timelineId, siteTitle, explanationBoxExpanded } = this.props;\n\n    return (\n      <Column label={intl.formatMessage(messages.title)}>\n        <HomeColumnHeader activeItem='fediverse' active={hasUnread} >\n          <ColumnSettingsContainer />\n        </HomeColumnHeader>\n        <div className='explanation-box'>\n          <Accordion\n            headline={<FormattedMessage id='fediverse_tab.explanation_box.title' defaultMessage='What is the Fediverse?' />}\n            expanded={explanationBoxExpanded}\n            onToggle={this.toggleExplanationBox}\n          >\n            <FormattedMessage\n              id='fediverse_tab.explanation_box.explanation'\n              defaultMessage='{site_title} is part of the Fediverse, a social network made up of thousands of independent social media sites (aka \"servers\"). The posts you see here are from 3rd-party servers. You have the freedom to engage with them, or to block any server you don&apos;t like. Pay attention to the full username after the second @ symbol to know which server a post is from. To see only {site_title} posts, visit {local}.'\n              values={{\n                site_title: siteTitle,\n                local: (\n                  <Link to='/timeline/local'>\n                    <FormattedMessage\n                      id='empty_column.home.local_tab'\n                      defaultMessage='the {site_title} tab'\n                      values={{ site_title: siteTitle }}\n                    />\n                  </Link>\n                ),\n              }}\n            />\n          </Accordion>\n        </div>\n        <StatusListContainer\n          scrollKey={`${timelineId}_timeline`}\n          timelineId={`${timelineId}${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.public' defaultMessage='There is nothing here! Write something publicly, or manually follow users from other servers to fill it up' />}\n        />\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
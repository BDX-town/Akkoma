{"version":3,"sources":["webpack:///./app/soapbox/features/following/index.js"],"names":["Following","connect","state","account","username","params","me","withReplies","get","accounts","getIn","accountId","toLowerCase","find","acct","diffCount","getFollowDifference","isBlocked","unavailable","isAccount","accountIds","hasMore","props","dispatch","expandFollowing","leading","componentDidMount","this","fetchAccount","fetchFollowing","fetchAccountByUsername","componentDidUpdate","prevProps","render","className","id","defaultMessage","scrollKey","onLoadMore","handleLoadMore","emptyMessage","map","withNote","ImmutablePureComponent","PropTypes","object","isRequired","func","ImmutablePropTypes","orderedSet","bool","number"],"mappings":"2TAgDMA,EADUC,kBA3BQ,SAACC,EAAD,GAA2D,IAS3EC,EAToCC,EAAsC,EAAhDC,OAAUD,SACpCE,GAD0E,EAA1BC,YAC3CL,EAAMM,IAAI,OACfC,EAAWP,EAAMQ,MAAM,CAAC,aAG1BC,GAAa,EAEfA,EAJyBT,EAAMQ,MAAM,CAAC,YAAa,EAAG,YAAa,IAAIE,gBAAkBR,EAASQ,cAItF,MAERT,EAAUM,EAASI,KAAK,SAAAC,GAAI,OAAIV,EAASQ,gBAAkBE,EAAKJ,MAAM,CAAC,QAAS,IAAIE,iBAClET,EAAQO,MAAM,CAAC,MAAO,OAAS,EAGvD,IAAMK,EAAYC,YAAoBd,EAAOS,EAAW,aAClDM,EAAYf,EAAMQ,MAAM,CAAC,gBAAiBC,EAAW,eAAe,GAG1E,MAAO,CACLA,YACAO,YAJmBZ,IAAOK,GAAqBM,EAK/CE,YAAajB,EAAMQ,MAAM,CAAC,WAAYC,IACtCS,WAAYlB,EAAMQ,MAAM,CAAC,aAAc,YAAaC,EAAW,UAC/DU,UAAWnB,EAAMQ,MAAM,CAAC,aAAc,YAAaC,EAAW,SAC9DI,c,qMAoCe,IAAS,WACpB,EAAKO,MAAMX,YAAuC,IAA1B,EAAKW,MAAMX,WACrC,EAAKW,MAAMC,SAASC,YAAgB,EAAKF,MAAMX,aAEhD,IAAK,CAAEc,SAAS,K,8CAvBnBC,kBAAA,WAAqB,IAAD,EAC0BC,KAAKL,MAA/BlB,EADA,EACVC,OAAUD,SAAYO,EADZ,EACYA,UAE1BA,IAA4B,IAAfA,GACfgB,KAAKL,MAAMC,SAASK,YAAajB,IACjCgB,KAAKL,MAAMC,SAASM,YAAelB,KAEnCgB,KAAKL,MAAMC,SAASO,YAAuB1B,K,EAI/C2B,mBAAA,SAAmBC,GAAY,IAAD,EACIL,KAAKL,MAA7BX,EADoB,EACpBA,UAAWY,EADS,EACTA,SACfZ,IAA4B,IAAfA,GAAqBA,IAAcqB,EAAUrB,WAAaA,IACzEY,EAASK,YAAajB,IACtBY,EAASM,YAAelB,M,EAU5BsB,OAAA,WAAU,IAAD,EACuEN,KAAKL,MAA3EF,EADD,EACCA,WAAYC,EADb,EACaA,QAASF,EADtB,EACsBA,UAAWJ,EADjC,EACiCA,UAAWJ,EAD5C,EAC4CA,UAAWO,EADvD,EACuDA,YAE9D,OAAKC,IAA4B,IAAfR,GAQC,IAAfA,GAAsBS,EAQtBF,EAEA,YAAC,IAAD,UACE,mBAAKgB,UAAU,+BAAf,EACE,YAAC,IAAD,CAAkBC,GAAG,mCAAmCC,eAAe,0BAO7E,YAAC,IAAD,UACE,YAAC,IAAD,CACEC,UAAU,YACVhB,QAASA,EACTN,UAAWA,EACXuB,WAAYX,KAAKY,eACjBC,aAAc,YAAC,IAAD,CAAkBL,GAAG,wBAAwBC,eAAe,+CAL5E,EAOGhB,EAAWqB,IAAI,SAAAN,GAAE,OAChB,YAAC,IAAD,CAA2BA,GAAIA,EAAIO,UAAU,GAAtBP,OA1B3B,YAAC,IAAD,UACE,YAAC,IAAD,KATF,YAAC,IAAD,UACE,YAAC,IAAD,M,GA3CcQ,K,0BAEH,CACjBtC,OAAQuC,IAAUC,OAAOC,WACzBvB,SAAUqB,IAAUG,KAAKD,WACzB1B,WAAY4B,IAAmBC,WAC/B5B,QAASuB,IAAUM,KACnB/B,UAAWyB,IAAUM,KACrBhC,YAAa0B,IAAUM,KACvBnC,UAAW6B,IAAUO,S","file":"js/features/following-f3d0ca6ebfbf5da3c20d.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport {\n  fetchAccount,\n  fetchFollowing,\n  expandFollowing,\n  fetchAccountByUsername,\n} from '../../actions/accounts';\nimport { FormattedMessage } from 'react-intl';\nimport AccountContainer from '../../containers/account_container';\nimport Column from '../ui/components/column';\nimport ScrollableList from '../../components/scrollable_list';\nimport MissingIndicator from 'soapbox/components/missing_indicator';\nimport { getFollowDifference } from 'soapbox/utils/accounts';\n\nconst mapStateToProps = (state, { params: { username }, withReplies = false }) => {\n  const me = state.get('me');\n  const accounts = state.getIn(['accounts']);\n  const accountFetchError = (state.getIn(['accounts', -1, 'username'], '').toLowerCase() === username.toLowerCase());\n\n  let accountId = -1;\n  if (accountFetchError) {\n    accountId = null;\n  } else {\n    let account = accounts.find(acct => username.toLowerCase() === acct.getIn(['acct'], '').toLowerCase());\n    accountId = account ? account.getIn(['id'], null) : -1;\n  }\n\n  const diffCount = getFollowDifference(state, accountId, 'following');\n  const isBlocked = state.getIn(['relationships', accountId, 'blocked_by'], false);\n  const unavailable = (me === accountId) ? false : isBlocked;\n\n  return {\n    accountId,\n    unavailable,\n    isAccount: !!state.getIn(['accounts', accountId]),\n    accountIds: state.getIn(['user_lists', 'following', accountId, 'items']),\n    hasMore: !!state.getIn(['user_lists', 'following', accountId, 'next']),\n    diffCount,\n  };\n};\n\nexport default @connect(mapStateToProps)\nclass Following extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.orderedSet,\n    hasMore: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    unavailable: PropTypes.bool,\n    diffCount: PropTypes.number,\n  };\n\n  componentDidMount() {\n    const { params: { username }, accountId } = this.props;\n\n    if (accountId && accountId !== -1) {\n      this.props.dispatch(fetchAccount(accountId));\n      this.props.dispatch(fetchFollowing(accountId));\n    } else {\n      this.props.dispatch(fetchAccountByUsername(username));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { accountId, dispatch } = this.props;\n    if (accountId && accountId !== -1 && (accountId !== prevProps.accountId && accountId)) {\n      dispatch(fetchAccount(accountId));\n      dispatch(fetchFollowing(accountId));\n    }\n  }\n\n  handleLoadMore = debounce(() => {\n    if (this.props.accountId && this.props.accountId !== -1) {\n      this.props.dispatch(expandFollowing(this.props.accountId));\n    }\n  }, 300, { leading: true });\n\n  render() {\n    const { accountIds, hasMore, isAccount, diffCount, accountId, unavailable } = this.props;\n\n    if (!isAccount && accountId !== -1) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (accountId === -1 || (!accountIds)) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    if (unavailable) {\n      return (\n        <Column>\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />\n          </div>\n        </Column>\n      );\n    }\n\n    return (\n      <Column>\n        <ScrollableList\n          scrollKey='following'\n          hasMore={hasMore}\n          diffCount={diffCount}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='account.follows.empty' defaultMessage=\"This user doesn't follow anyone yet.\" />}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
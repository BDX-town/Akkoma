{"version":3,"sources":["webpack:///./app/soapbox/features/admin/components/report_status.js","webpack:///./app/soapbox/features/admin/components/report.js","webpack:///./app/soapbox/features/admin/reports.js"],"names":["messages","defineMessages","viewStatus","deleteStatus","ReportStatus","connect","injectIntl","props","intl","status","acct","getIn","text","formatMessage","to","get","action","handleDeleteStatus","size","some","item","video","fetchComponent","Video","loading","renderLoadingVideoPlayer","Component","preview","blurhash","src","alt","aspectRatio","width","height","inline","sensitive","onOpenVideo","noop","MediaGallery","renderLoadingMediaGallery","media","onOpenMedia","handleOpenMedia","audio","Audio","renderLoadingAudioPlayer","onOpenAudio","index","dispatch","openModal","statusId","deleteStatusModal","render","this","getMedia","menu","makeMenu","className","items","icon","direction","ImmutablePureComponent","ImmutablePropTypes","map","isRequired","report","reportClosed","deactivateUser","deleteUser","Report","accordionExpanded","name","handleDeactivateUser","handleDeleteUser","closeReports","then","message","snackbar","success","catch","accountId","deactivateUserModal","handleCloseReport","deleteUserModal","setting","setState","state","statuses","statusCount","count","reporterAcct","Link","title","account","id","defaultMessage","values","headline","expanded","onToggle","handleAccordionToggle","length","dangerouslySetInnerHTML","__html","onClick","heading","modlog","emptyMessage","Reports","getReport","makeGetReport","reports","toList","isLoading","componentDidMount","fetchReports","showLoading","makeColumnMenu","scrollKey","PropTypes","object","list"],"mappings":"iWAaMA,EAAWC,YAAe,CAC9BC,WAAW,CAAD,mEACVC,aAAa,CAAD,0EAKRC,EAFUC,mB,GACfC,a,6LAQY,WAAO,IAAD,EACU,EAAKC,MAAtBC,EADO,EACPA,KAAMC,EADC,EACDA,OACRC,EAAOD,EAAOE,MAAM,CAAC,UAAW,SAEtC,MAAO,CAAC,CACNC,KAAMJ,EAAKK,cAAcb,EAASE,WAAY,CAAEQ,KAAK,IAAKA,IAC1DI,GAAG,KAAMJ,EAAP,UAAqBD,EAAOM,IAAI,OACjC,CACDH,KAAMJ,EAAKK,cAAcb,EAASG,aAAc,CAAEO,KAAK,IAAKA,IAC5DM,OAAQ,EAAKC,uB,sCAIN,WAAO,IACRR,EAAW,EAAKF,MAAhBE,OAER,GAA2C,EAAvCA,EAAOM,IAAI,qBAAqBG,OAC9BT,EAAOM,IAAI,qBAAqBI,KAAK,SAAAC,GAAI,MAAyB,YAArBA,EAAKL,IAAI,UAEnD,IAAuD,UAAnDN,EAAOE,MAAM,CAAC,oBAAqB,EAAG,SAAsB,CACrE,IAAMU,EAAQZ,EAAOE,MAAM,CAAC,oBAAqB,IAEjD,OACE,YAAC,IAAD,CAAQW,eAAgBC,IAAOC,QAAS,EAAKC,+BAA7C,EACG,SAAAC,GAAS,OACR,YAACA,EAAD,CACEC,QAASN,EAAMN,IAAI,eACnBa,SAAUP,EAAMN,IAAI,YACpBc,IAAKR,EAAMN,IAAI,OACfe,IAAKT,EAAMN,IAAI,eACfgB,YAAaV,EAAMV,MAAM,CAAC,OAAQ,WAAY,WAC9CqB,MAAO,IACPC,OAAQ,IACRC,QAAM,EACNC,UAAW1B,EAAOM,IAAI,aACtBqB,YAAaC,QAKhB,GAAuD,UAAnD5B,EAAOE,MAAM,CAAC,oBAAqB,EAAG,SAiB/C,OACE,YAAC,IAAD,CAAQW,eAAgBgB,IAAcd,QAAS,EAAKe,gCAApD,EACG,SAAAb,GAAS,OAAI,YAACA,EAAD,CAAWc,MAAO/B,EAAOM,IAAI,qBAAsBoB,UAAW1B,EAAOM,IAAI,aAAckB,OAAQ,IAAKQ,YAAa,EAAKC,oBAlBxI,IAAMC,EAAQlC,EAAOE,MAAM,CAAC,oBAAqB,IAEjD,OACE,YAAC,IAAD,CAAQW,eAAgBsB,IAAOpB,QAAS,EAAKqB,+BAA7C,EACG,SAAAnB,GAAS,OACR,YAACA,EAAD,CACEG,IAAKc,EAAM5B,IAAI,OACfe,IAAKa,EAAM5B,IAAI,eACfmB,QAAM,EACNC,UAAW1B,EAAOM,IAAI,aACtB+B,YAAaT,QAczB,OAAO,O,6CAGS,SAACG,EAAOO,IAExBC,EADqB,EAAKzC,MAAlByC,UACCC,YAAU,QAAS,CAAET,QAAOO,a,gDAGlB,WAAO,IAAD,EACU,EAAKxC,MAAhCC,EADiB,EACjBA,KAAMwC,EADW,EACXA,SACRE,EAFmB,EACDzC,OACAM,IAAI,MAC5BiC,EAASG,YAAkB3C,EAAM0C,M,sCAGnCE,OAAA,WAAU,IACA3C,EAAW4C,KAAK9C,MAAhBE,OACF+B,EAAQa,KAAKC,WACbC,EAAOF,KAAKG,WAElB,OACE,mBAAKC,UAAU,6BAAf,EACE,mBAAKA,UAAU,qCAAf,EACE,YAAC,IAAD,CAAehD,OAAQA,IACtB+B,GAEH,mBAAKiB,UAAU,qCAAf,EACE,YAAC,IAAD,CAAcC,MAAOH,EAAMI,KAAK,aAAazC,KAAM,GAAI0C,UAAU,a,GAlGhDC,K,0BAEN,CACjBpD,OAAQqD,IAAmBC,IAAIC,WAC/BC,OAAQH,IAAmBC,M,qBCTzB/D,EAAWC,YAAe,CAC9BiE,aAAa,CAAD,wFACZC,eAAe,CAAD,8EACdC,WAAW,CAAD,wEAKNC,EAFUhE,mB,GACfC,a,0LAOS,CACNgE,mBAAmB,I,sCAGV,WAAO,IAAD,EACU,EAAK/D,MAAtBC,EADO,EACPA,KAAMyD,EADC,EACDA,OAEd,MAAO,CAAC,CACNrD,KAAMJ,EAAKK,cAAcb,EAASmE,eAAgB,CAAEI,KAAMN,EAAOtD,MAAM,CAAC,UAAW,eACnFK,OAAQ,EAAKwD,sBACZ,CACD5D,KAAMJ,EAAKK,cAAcb,EAASoE,WAAY,CAAEG,KAAMN,EAAOtD,MAAM,CAAC,UAAW,eAC/EK,OAAQ,EAAKyD,qB,+CAIG,WAAO,IAAD,EACW,EAAKlE,MAAhCC,EADgB,EAChBA,KAAMwC,EADU,EACVA,SAAUiB,EADA,EACAA,OACxBjB,EAAS0B,YAAa,CAACT,EAAOlD,IAAI,SAAS4D,KAAK,WAC9C,IAAMC,EAAUpE,EAAKK,cAAcb,EAASkE,aAAc,CAAEK,KAAMN,EAAOtD,MAAM,CAAC,UAAW,eAC3FqC,EAAS6B,IAASC,QAAQF,MACzBG,MAAM,gB,kDAGY,WAAO,IAAD,EACQ,EAAKxE,MAAhCC,EADmB,EACnBA,KAAMwC,EADa,EACbA,SACRgC,EAFqB,EACHf,OACCtD,MAAM,CAAC,UAAW,OAC3CqC,EAASiC,YAAoBzE,EAAMwE,EAAW,kBAAM,EAAKE,yB,8CAGxC,WAAO,IAAD,EACY,EAAK3E,MAAhCC,EADe,EACfA,KAAMwC,EADS,EACTA,SACRgC,EAFiB,EACCf,OACCtD,MAAM,CAAC,UAAW,OAC3CqC,EAASmC,YAAgB3E,EAAMwE,EAAW,kBAAM,EAAKE,yB,mDAG/B,SAAAE,GACtB,EAAKC,SAAS,CAAEf,kBAAmBc,M,sCAGrChC,OAAA,WAAU,IACAa,EAAWZ,KAAK9C,MAAhB0D,OACAK,EAAsBjB,KAAKiC,MAA3BhB,kBACFf,EAAOF,KAAKG,WACZ+B,EAAWtB,EAAOlD,IAAI,YACtByE,EAAcD,EAASE,QACvB/E,EAAOuD,EAAOtD,MAAM,CAAC,UAAW,SAChC+E,EAAezB,EAAOtD,MAAM,CAAC,QAAS,SAE5C,OACE,mBAAK8C,UAAU,gBAAoBQ,EAAOlD,IAAI,MAC5C,mBAAK0C,UAAU,6BAAf,EACE,YAACkC,EAAA,EAAD,CAAM7E,GAAE,KAAOJ,EAAQkF,MAAOlF,QAA9B,EACE,YAAC,IAAD,CAAQmF,QAAS5B,EAAOlD,IAAI,WAAYG,KAAM,OAGlD,mBAAKuC,UAAU,8BAAf,EACE,kBAAIA,UAAU,4BAAd,EACE,YAAC,IAAD,CACEqC,GAAG,6BACHC,eAAe,mBACfC,OAAQ,CAAEtF,KAAM,YAACiF,EAAA,EAAD,CAAM7E,GAAE,KAAOJ,EAAQkF,MAAOlF,QAA9B,MAAsCA,OAG1D,mBAAK+C,UAAU,+BAAf,EACiB,EAAd+B,GACC,YAAC,IAAD,CACES,SAAQ,mBAAqBT,EAArB,IACRU,SAAU5B,EACV6B,SAAU9C,KAAK+C,4BAHjB,EAKGb,EAASxB,IAAI,SAAAtD,GAAM,OAAI,YAAC,EAAD,CAAcwD,OAAQA,EAAQxD,OAAQA,GAAaA,EAAOM,IAAI,WAI5F,mBAAK0C,UAAU,4BAAf,EACsC,EAAnCQ,EAAOlD,IAAI,UAAW,IAAIsF,QACzB,0BAAY5C,UAAU,KAAK6C,wBAAyB,CAAEC,OAAQtC,EAAOlD,IAAI,cAE3E,oBAAM0C,UAAU,eAAhB,OAAiC,YAACkC,EAAA,EAAD,CAAM7E,GAAE,KAAO4E,EAAgBE,MAAOF,QAAtC,MAAsDA,MAG3F,mBAAKjC,UAAU,8BAAf,EACE,YAAC,IAAD,CAAQA,UAAU,qBAAqBvC,KAAM,GAAIsF,QAASnD,KAAK6B,wBAA/D,EACE,YAAC,IAAD,CAAkBY,GAAG,8BAA8BC,eAAe,WAEpE,YAAC,IAAD,CAAcrC,MAAOH,EAAMI,KAAK,aAAazC,KAAM,GAAI0C,UAAU,a,GA5FtDC,K,0BAEA,CACjBI,OAAQH,IAAmBC,IAAIC,a,2DCdnC,IAAMhE,EAAWC,YAAe,CAC9BwG,QAAQ,CAAD,oDACPC,OAAO,CAAD,+EACNC,aAAa,CAAD,iIAcRC,EAFUvG,kBATQ,SAAAiF,GACtB,IAAMuB,EAAYC,cAGlB,MAAO,CACLC,QAHUzB,EAAM3E,MAAM,CAAC,QAAS,gBAGnBqG,SAASjD,IAAI,SAAA+B,GAAE,OAAIe,EAAUvB,EAAOQ,O,GAKpDxF,a,0LAQS,CACN2G,WAAW,I,4CAGI,WAGf,MAAO,CAAC,CACNrG,KAHe,EAAKL,MAAdC,KAGKK,cAAcb,EAAS0G,QAClC5F,GAAI,iB,8CAIRoG,kBAAA,WAAqB,IAAD,QAElBlE,EADqBK,KAAK9C,MAAlByC,UACCmE,eACNxC,KAAK,kBAAM,EAAKU,SAAS,CAAE4B,WAAW,MACtClC,MAAM,e,EAGX3B,OAAA,WAAU,IAAD,EACmBC,KAAK9C,MAAvBC,EADD,EACCA,KAAMuG,EADP,EACOA,QACNE,EAAc5D,KAAKiC,MAAnB2B,UACFG,EAAcH,GAAiC,IAApBF,EAAQtB,QAEzC,OACE,YAAC,IAAD,CAAQ9B,KAAK,QAAQ8C,QAASjG,EAAKK,cAAcb,EAASyG,SAAUlD,KAAMF,KAAKgE,uBAA/E,EACE,YAAC,IAAD,CACEJ,UAAWA,EACXG,YAAaA,EACbE,UAAU,gBACVX,aAAcnG,EAAKK,cAAcb,EAAS2G,oBAJ5C,EAMGI,EAAQhD,IAAI,SAAAE,GAAM,OAAI,YAAC,EAAD,CAAQA,OAAQA,GAAaA,EAAOlD,IAAI,Y,GAxCnD8C,K,0BAED,CACjBrD,KAAM+G,IAAUC,OAAOxD,WACvB+C,QAASjD,IAAmB2D,KAAKzD,a","file":"js/features/admin/reports-6215fadf2c8504db7a41.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport StatusContent from 'soapbox/components/status_content';\nimport DropdownMenu from 'soapbox/containers/dropdown_menu_container';\nimport { openModal } from 'soapbox/actions/modal';\nimport noop from 'lodash/noop';\nimport { MediaGallery, Video, Audio } from 'soapbox/features/ui/util/async-components';\nimport Bundle from 'soapbox/features/ui/components/bundle';\nimport { deleteStatusModal } from 'soapbox/actions/moderation';\n\nconst messages = defineMessages({\n  viewStatus: { id: 'admin.reports.actions.view_status', defaultMessage: 'View post' },\n  deleteStatus: { id: 'admin.statuses.actions.delete_status', defaultMessage: 'Delete post' },\n});\n\nexport default @connect()\n@injectIntl\nclass ReportStatus extends ImmutablePureComponent {\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    report: ImmutablePropTypes.map,\n  };\n\n  makeMenu = () => {\n    const { intl, status } = this.props;\n    const acct = status.getIn(['account', 'acct']);\n\n    return [{\n      text: intl.formatMessage(messages.viewStatus, { acct: `@${acct}` }),\n      to: `/@${acct}/posts/${status.get('id')}`,\n    }, {\n      text: intl.formatMessage(messages.deleteStatus, { acct: `@${acct}` }),\n      action: this.handleDeleteStatus,\n    }];\n  }\n\n  getMedia = () => {\n    const { status } = this.props;\n\n    if (status.get('media_attachments').size > 0) {\n      if (status.get('media_attachments').some(item => item.get('type') === 'unknown')) {\n\n      } else if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        const video = status.getIn(['media_attachments', 0]);\n\n        return (\n          <Bundle fetchComponent={Video} loading={this.renderLoadingVideoPlayer} >\n            {Component => (\n              <Component\n                preview={video.get('preview_url')}\n                blurhash={video.get('blurhash')}\n                src={video.get('url')}\n                alt={video.get('description')}\n                aspectRatio={video.getIn(['meta', 'original', 'aspect'])}\n                width={239}\n                height={110}\n                inline\n                sensitive={status.get('sensitive')}\n                onOpenVideo={noop}\n              />\n            )}\n          </Bundle>\n        );\n      } else if (status.getIn(['media_attachments', 0, 'type']) === 'audio') {\n        const audio = status.getIn(['media_attachments', 0]);\n\n        return (\n          <Bundle fetchComponent={Audio} loading={this.renderLoadingAudioPlayer} >\n            {Component => (\n              <Component\n                src={audio.get('url')}\n                alt={audio.get('description')}\n                inline\n                sensitive={status.get('sensitive')}\n                onOpenAudio={noop}\n              />\n            )}\n          </Bundle>\n        );\n      } else {\n        return (\n          <Bundle fetchComponent={MediaGallery} loading={this.renderLoadingMediaGallery} >\n            {Component => <Component media={status.get('media_attachments')} sensitive={status.get('sensitive')} height={110} onOpenMedia={this.handleOpenMedia} />}\n          </Bundle>\n        );\n      }\n    }\n\n    return null;\n  }\n\n  handleOpenMedia = (media, index) => {\n    const { dispatch } = this.props;\n    dispatch(openModal('MEDIA', { media, index }));\n  }\n\n  handleDeleteStatus = () => {\n    const { intl, dispatch, status } = this.props;\n    const statusId = status.get('id');\n    dispatch(deleteStatusModal(intl, statusId));\n  }\n\n  render() {\n    const { status } = this.props;\n    const media = this.getMedia();\n    const menu = this.makeMenu();\n\n    return (\n      <div className='admin-report__status'>\n        <div className='admin-report__status-content'>\n          <StatusContent status={status} />\n          {media}\n        </div>\n        <div className='admin-report__status-actions'>\n          <DropdownMenu items={menu} icon='ellipsis-v' size={18} direction='right' />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, FormattedMessage, defineMessages } from 'react-intl';\nimport Avatar from 'soapbox/components/avatar';\nimport Button from 'soapbox/components/button';\nimport DropdownMenu from 'soapbox/containers/dropdown_menu_container';\nimport Accordion from 'soapbox/features/ui/components/accordion';\nimport ReportStatus from './report_status';\nimport { closeReports } from 'soapbox/actions/admin';\nimport snackbar from 'soapbox/actions/snackbar';\nimport { deactivateUserModal, deleteUserModal } from 'soapbox/actions/moderation';\n\nconst messages = defineMessages({\n  reportClosed: { id: 'admin.reports.report_closed_message', defaultMessage: 'Report on @{name} was closed' },\n  deactivateUser: { id: 'admin.users.actions.deactivate_user', defaultMessage: 'Deactivate @{name}' },\n  deleteUser: { id: 'admin.users.actions.delete_user', defaultMessage: 'Delete @{name}' },\n});\n\nexport default @connect()\n@injectIntl\nclass Report extends ImmutablePureComponent {\n\n  static propTypes = {\n    report: ImmutablePropTypes.map.isRequired,\n  };\n\n  state = {\n    accordionExpanded: false,\n  };\n\n  makeMenu = () => {\n    const { intl, report } = this.props;\n\n    return [{\n      text: intl.formatMessage(messages.deactivateUser, { name: report.getIn(['account', 'username']) }),\n      action: this.handleDeactivateUser,\n    }, {\n      text: intl.formatMessage(messages.deleteUser, { name: report.getIn(['account', 'username']) }),\n      action: this.handleDeleteUser,\n    }];\n  }\n\n  handleCloseReport = () => {\n    const { intl, dispatch, report } = this.props;\n    dispatch(closeReports([report.get('id')])).then(() => {\n      const message = intl.formatMessage(messages.reportClosed, { name: report.getIn(['account', 'username']) });\n      dispatch(snackbar.success(message));\n    }).catch(() => {});\n  }\n\n  handleDeactivateUser = () => {\n    const { intl, dispatch, report } = this.props;\n    const accountId = report.getIn(['account', 'id']);\n    dispatch(deactivateUserModal(intl, accountId, () => this.handleCloseReport()));\n  }\n\n  handleDeleteUser = () => {\n    const { intl, dispatch, report } = this.props;\n    const accountId = report.getIn(['account', 'id']);\n    dispatch(deleteUserModal(intl, accountId, () => this.handleCloseReport()));\n  }\n\n  handleAccordionToggle = setting => {\n    this.setState({ accordionExpanded: setting });\n  }\n\n  render() {\n    const { report } = this.props;\n    const { accordionExpanded } = this.state;\n    const menu = this.makeMenu();\n    const statuses = report.get('statuses');\n    const statusCount = statuses.count();\n    const acct = report.getIn(['account', 'acct']);\n    const reporterAcct = report.getIn(['actor', 'acct']);\n\n    return (\n      <div className='admin-report' key={report.get('id')}>\n        <div className='admin-report__avatar'>\n          <Link to={`/@${acct}`} title={acct}>\n            <Avatar account={report.get('account')} size={32} />\n          </Link>\n        </div>\n        <div className='admin-report__content'>\n          <h4 className='admin-report__title'>\n            <FormattedMessage\n              id='admin.reports.report_title'\n              defaultMessage='Report on {acct}'\n              values={{ acct: <Link to={`/@${acct}`} title={acct}>@{acct}</Link> }}\n            />\n          </h4>\n          <div className='admin-report__statuses'>\n            {statusCount > 0 && (\n              <Accordion\n                headline={`Reported posts (${statusCount})`}\n                expanded={accordionExpanded}\n                onToggle={this.handleAccordionToggle}\n              >\n                {statuses.map(status => <ReportStatus report={report} status={status} key={status.get('id')} />)}\n              </Accordion>\n            )}\n          </div>\n          <div className='admin-report__quote'>\n            {report.get('content', '').length > 0 &&\n              <blockquote className='md' dangerouslySetInnerHTML={{ __html: report.get('content') }} />\n            }\n            <span className='byline'>&mdash; <Link to={`/@${reporterAcct}`} title={reporterAcct}>@{reporterAcct}</Link></span>\n          </div>\n        </div>\n        <div className='admin-report__actions'>\n          <Button className='button-alternative' size={30} onClick={this.handleCloseReport}>\n            <FormattedMessage id='admin.reports.actions.close' defaultMessage='Close' />\n          </Button>\n          <DropdownMenu items={menu} icon='ellipsis-v' size={24} direction='right' />\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from '../ui/components/better_column';\nimport ScrollableList from 'soapbox/components/scrollable_list';\nimport { fetchReports } from 'soapbox/actions/admin';\nimport Report from './components/report';\nimport { makeGetReport } from 'soapbox/selectors';\n\nconst messages = defineMessages({\n  heading: { id: 'column.admin.reports', defaultMessage: 'Reports' },\n  modlog: { id: 'column.admin.reports.menu.moderation_log', defaultMessage: 'Moderation Log' },\n  emptyMessage: { id: 'admin.reports.empty_message', defaultMessage: 'There are no open reports. If a user gets reported, they will show up here.' },\n});\n\nconst mapStateToProps = state => {\n  const getReport = makeGetReport();\n  const ids = state.getIn(['admin', 'openReports']);\n\n  return {\n    reports: ids.toList().map(id => getReport(state, id)),\n  };\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Reports extends ImmutablePureComponent {\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    reports: ImmutablePropTypes.list.isRequired,\n  };\n\n  state = {\n    isLoading: true,\n  }\n\n  makeColumnMenu = () => {\n    const { intl } = this.props;\n\n    return [{\n      text: intl.formatMessage(messages.modlog),\n      to: '/admin/log',\n    }];\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(fetchReports())\n      .then(() => this.setState({ isLoading: false }))\n      .catch(() => {});\n  }\n\n  render() {\n    const { intl, reports } = this.props;\n    const { isLoading } = this.state;\n    const showLoading = isLoading && reports.count() === 0;\n\n    return (\n      <Column icon='gavel' heading={intl.formatMessage(messages.heading)} menu={this.makeColumnMenu()}>\n        <ScrollableList\n          isLoading={isLoading}\n          showLoading={showLoading}\n          scrollKey='admin-reports'\n          emptyMessage={intl.formatMessage(messages.emptyMessage)}\n        >\n          {reports.map(report => <Report report={report} key={report.get('id')} />)}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
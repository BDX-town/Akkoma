{"version":3,"sources":["webpack:///./app/soapbox/features/admin/moderation_log.js"],"names":["messages","defineMessages","heading","emptyMessage","ModerationLog","connect","state","items","getIn","map","i","String","hasMore","count","injectIntl","isLoading","lastPage","page","setState","props","dispatch","fetchModerationLog","then","data","catch","componentDidMount","this","render","intl","showLoading","icon","formatMessage","backBtnSlim","scrollKey","onLoadMore","handleLoadMore","item","className","get","value","Date","hour12","year","month","day","hour","minute","ImmutablePureComponent","PropTypes","object","isRequired","list","ImmutablePropTypes"],"mappings":"6QAUMA,EAAWC,YAAe,CAC9BC,QAAQ,CAAD,kEACPC,aAAa,CAAD,0JAURC,EAFUC,kBALQ,SAAAC,GAAK,MAAK,CAChCC,MAAOD,EAAME,MAAM,CAAC,YAAa,UAAUC,IAAI,SAAAC,GAAC,OAAIJ,EAAME,MAAM,CAAC,YAAa,QAASG,OAAOD,OAC9FE,QAAgG,EAAvFN,EAAME,MAAM,CAAC,YAAa,SAAU,GAAKF,EAAME,MAAM,CAAC,YAAa,UAAUK,U,GAIvFC,a,0LAQS,CACNC,WAAW,EACXC,SAAU,I,4CAaK,WACf,IAAMC,EAAO,EAAKX,MAAMU,SAAW,EAEnC,EAAKE,SAAS,CAAEH,WAAW,IAC3B,EAAKI,MAAMC,SAASC,YAAmB,CAAEJ,UACtCK,KAAK,SAAAC,GAAI,OAAI,EAAKL,SAAS,CAC1BH,WAAW,EACXC,SAAUC,MAEXO,MAAM,gB,8CAnBXC,kBAAA,WAAqB,IAAD,QAElBL,EADqBM,KAAKP,MAAlBC,UACCC,eACNC,KAAK,SAAAC,GAAI,OAAI,EAAKL,SAAS,CAC1BH,WAAW,EACXC,SAAU,MAEXQ,MAAM,e,EAeXG,OAAA,WAAU,IAAD,EAC0BD,KAAKP,MAA9BS,EADD,EACCA,KAAMrB,EADP,EACOA,MAAOK,EADd,EACcA,QACbG,EAAcW,KAAKpB,MAAnBS,UACFc,EAAcd,GAA+B,IAAlBR,EAAMM,QAEvC,OACE,YAAC,IAAD,CAAQiB,KAAK,gBAAgB5B,QAAS0B,EAAKG,cAAc/B,EAASE,SAAU8B,aAAW,QAAvF,EACE,YAAC,IAAD,CACEjB,UAAWA,EACXc,YAAaA,EACbI,UAAU,iBACV9B,aAAcyB,EAAKG,cAAc/B,EAASG,cAC1CS,QAASA,EACTsB,WAAYR,KAAKS,qBANnB,EAQG5B,EAAME,IAAI,SAAC2B,EAAM1B,GAAP,OACT,mBAAK2B,UAAU,YAAgB3B,EAC7B,mBAAK2B,UAAU,0BAAf,EAAoCD,EAAKE,IAAI,YAC7C,mBAAKD,UAAU,4BAAf,EACE,YAAC,IAAD,CACEE,MAAO,IAAIC,KAAwB,IAAnBJ,EAAKE,IAAI,SACzBG,QAAQ,EACRC,KAAK,UACLC,MAAM,QACNC,IAAI,UACJC,KAAK,UACLC,OAAO,mB,GA5DGC,K,0BAEP,CACjBnB,KAAMoB,IAAUC,OAAOC,WACvBC,KAAMC,IAAmBD,O","file":"js/features/admin/moderation_log-e7383ffb5426b3fa27ba.chunk.js","sourcesContent":["import React from 'react';\nimport { defineMessages, injectIntl, FormattedDate } from 'react-intl';\nimport { connect } from 'react-redux';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport Column from '../ui/components/column';\nimport ScrollableList from 'soapbox/components/scrollable_list';\nimport { fetchModerationLog } from 'soapbox/actions/admin';\n\nconst messages = defineMessages({\n  heading: { id: 'column.admin.moderation_log', defaultMessage: 'Moderation Log' },\n  emptyMessage: { id: 'admin.moderation_log.empty_message', defaultMessage: 'You have not performed any moderation actions yet. When you do, a history will be shown here.' },\n});\n\nconst mapStateToProps = state => ({\n  items: state.getIn(['admin_log', 'index']).map(i => state.getIn(['admin_log', 'items', String(i)])),\n  hasMore: state.getIn(['admin_log', 'total'], 0) - state.getIn(['admin_log', 'index']).count() > 0,\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass ModerationLog extends ImmutablePureComponent {\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    list: ImmutablePropTypes.list,\n  };\n\n  state = {\n    isLoading: true,\n    lastPage: 0,\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(fetchModerationLog())\n      .then(data => this.setState({\n        isLoading: false,\n        lastPage: 1,\n      }))\n      .catch(() => {});\n  }\n\n  handleLoadMore = () => {\n    const page = this.state.lastPage + 1;\n\n    this.setState({ isLoading: true });\n    this.props.dispatch(fetchModerationLog({ page }))\n      .then(data => this.setState({\n        isLoading: false,\n        lastPage: page,\n      }))\n      .catch(() => {});\n  }\n\n  render() {\n    const { intl, items, hasMore } = this.props;\n    const { isLoading } = this.state;\n    const showLoading = isLoading && items.count() === 0;\n\n    return (\n      <Column icon='balance-scale' heading={intl.formatMessage(messages.heading)} backBtnSlim>\n        <ScrollableList\n          isLoading={isLoading}\n          showLoading={showLoading}\n          scrollKey='moderation-log'\n          emptyMessage={intl.formatMessage(messages.emptyMessage)}\n          hasMore={hasMore}\n          onLoadMore={this.handleLoadMore}\n        >\n          {items.map((item, i) => (\n            <div className='logentry' key={i}>\n              <div className='logentry__message'>{item.get('message')}</div>\n              <div className='logentry__timestamp'>\n                <FormattedDate\n                  value={new Date(item.get('time') * 1000)}\n                  hour12={false}\n                  year='numeric'\n                  month='short'\n                  day='2-digit'\n                  hour='2-digit'\n                  minute='2-digit'\n                />\n              </div>\n            </div>\n          ))}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./app/soapbox/components/settings_checkbox.js","webpack:///./app/soapbox/features/preferences/index.js"],"names":["SettingsCheckbox","connect","state","settings","get","path","e","props","dispatch","changeSetting","target","checked","render","this","getIn","onChange","ImmutablePureComponent","PropTypes","array","isRequired","ImmutablePropTypes","map","languages","en","ar","ast","bg","bn","ca","co","cs","cy","da","de","el","eo","es","eu","fa","fi","fr","ga","gl","he","hi","hr","hu","hy","id","io","it","ja","ka","kk","ko","lt","lv","ml","ms","nl","no","oc","pl","pt","ro","ru","sk","sl","sq","sr","sv","ta","te","th","tr","uk","zh","messages","defineMessages","heading","display_media_default","display_media_hide_all","display_media_show_all","Preferences","getSettings","injectIntl","value","intl","displayMediaOptions","default","formatMessage","hide_all","show_all","icon","backBtnSlim","label","defaultMessage","items","defaultValue","onSelectChange","onDefaultPrivacyChange","hint","onDefaultContentTypeChange","className","func","object"],"mappings":"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","file":"js/features/preferences-fb6ff74e6180f47d9bc4.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { changeSetting } from 'soapbox/actions/settings';\nimport { Checkbox } from 'soapbox/features/forms';\n\nconst mapStateToProps = state => ({\n  settings: state.get('settings'),\n});\n\nexport default @connect(mapStateToProps)\nclass SettingsCheckbox extends ImmutablePureComponent {\n\n  static propTypes = {\n    path: PropTypes.array.isRequired,\n    settings: ImmutablePropTypes.map.isRequired,\n  }\n\n  onChange = path => {\n    return e => {\n      this.props.dispatch(changeSetting(path, e.target.checked));\n    };\n  }\n\n  render() {\n    const { settings, path, ...props } = this.props;\n\n    return (\n      <Checkbox\n        checked={settings.getIn(path)}\n        onChange={this.onChange(path)}\n        {...props}\n      />\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { getSettings, changeSetting } from 'soapbox/actions/settings';\nimport Column from '../ui/components/column';\nimport {\n  SimpleForm,\n  FieldsGroup,\n  RadioGroup,\n  RadioItem,\n  SelectDropdown,\n} from 'soapbox/features/forms';\nimport SettingsCheckbox from 'soapbox/components/settings_checkbox';\n\nconst languages = {\n  en: 'English',\n  ar: 'العربية',\n  ast: 'Asturianu',\n  bg: 'Български',\n  bn: 'বাংলা',\n  ca: 'Català',\n  co: 'Corsu',\n  cs: 'Čeština',\n  cy: 'Cymraeg',\n  da: 'Dansk',\n  de: 'Deutsch',\n  el: 'Ελληνικά',\n  eo: 'Esperanto',\n  es: 'Español',\n  eu: 'Euskara',\n  fa: 'فارسی',\n  fi: 'Suomi',\n  fr: 'Français',\n  ga: 'Gaeilge',\n  gl: 'Galego',\n  he: 'עברית',\n  hi: 'हिन्दी',\n  hr: 'Hrvatski',\n  hu: 'Magyar',\n  hy: 'Հայերեն',\n  id: 'Bahasa Indonesia',\n  io: 'Ido',\n  it: 'Italiano',\n  ja: '日本語',\n  ka: 'ქართული',\n  kk: 'Қазақша',\n  ko: '한국어',\n  lt: 'Lietuvių',\n  lv: 'Latviešu',\n  ml: 'മലയാളം',\n  ms: 'Bahasa Melayu',\n  nl: 'Nederlands',\n  no: 'Norsk',\n  oc: 'Occitan',\n  pl: 'Polski',\n  pt: 'Português',\n  'pt-BR': 'Português do Brasil',\n  ro: 'Română',\n  ru: 'Русский',\n  sk: 'Slovenčina',\n  sl: 'Slovenščina',\n  sq: 'Shqip',\n  sr: 'Српски',\n  'sr-Latn': 'Srpski (latinica)',\n  sv: 'Svenska',\n  ta: 'தமிழ்',\n  te: 'తెలుగు',\n  th: 'ไทย',\n  tr: 'Türkçe',\n  uk: 'Українська',\n  zh: '中文',\n  'zh-CN': '简体中文',\n  'zh-HK': '繁體中文（香港）',\n  'zh-TW': '繁體中文（臺灣）',\n};\n\nconst messages = defineMessages({\n  heading: { id: 'column.preferences', defaultMessage: 'Preferences' },\n  display_media_default: { id: 'preferences.fields.display_media.default', defaultMessage: 'Hide media marked as sensitive' },\n  display_media_hide_all: { id: 'preferences.fields.display_media.hide_all', defaultMessage: 'Always hide media' },\n  display_media_show_all: { id: 'preferences.fields.display_media.show_all', defaultMessage: 'Always show media' },\n});\n\nconst mapStateToProps = state => ({\n  settings: getSettings(state),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Preferences extends ImmutablePureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    settings: ImmutablePropTypes.map,\n  };\n\n  onSelectChange = path => {\n    return e => {\n      this.props.dispatch(changeSetting(path, e.target.value));\n    };\n  };\n\n  onDefaultPrivacyChange = e => {\n    const { dispatch } = this.props;\n    dispatch(changeSetting(['defaultPrivacy'], e.target.value));\n  }\n\n  onDefaultContentTypeChange = e => {\n    const { dispatch } = this.props;\n    dispatch(changeSetting(['defaultContentType'], e.target.value));\n  }\n\n  render() {\n    const { settings, intl } = this.props;\n\n    const displayMediaOptions = {\n      default: intl.formatMessage(messages.display_media_default),\n      hide_all: intl.formatMessage(messages.display_media_hide_all),\n      show_all: intl.formatMessage(messages.display_media_show_all),\n    };\n\n    return (\n      <Column icon='cog' heading={intl.formatMessage(messages.heading)} backBtnSlim>\n        <SimpleForm>\n          <FieldsGroup>\n            <SelectDropdown\n              label={<FormattedMessage id='preferences.fields.language_label' defaultMessage='Language' />}\n              items={languages}\n              defaultValue={settings.get('locale')}\n              onChange={this.onSelectChange(['locale'])}\n            />\n          </FieldsGroup>\n\n          <FieldsGroup>\n            <SelectDropdown\n              label={<FormattedMessage id='preferences.fields.media_display_label' defaultMessage='Media display' />}\n              items={displayMediaOptions}\n              defaultValue={settings.get('displayMedia')}\n              onChange={this.onSelectChange(['displayMedia'])}\n            />\n          </FieldsGroup>\n\n          <FieldsGroup>\n            <RadioGroup\n              label={<FormattedMessage id='preferences.fields.privacy_label' defaultMessage='Post privacy' />}\n              onChange={this.onDefaultPrivacyChange}\n            >\n              <RadioItem\n                label={<FormattedMessage id='preferences.options.privacy_public' defaultMessage='Public' />}\n                hint={<FormattedMessage id='preferences.hints.privacy_public' defaultMessage='Everyone can see' />}\n                checked={settings.get('defaultPrivacy') === 'public'}\n                value='public'\n              />\n              <RadioItem\n                label={<FormattedMessage id='preferences.options.privacy_unlisted' defaultMessage='Unlisted' />}\n                hint={<FormattedMessage id='preferences.hints.privacy_unlisted' defaultMessage='Everyone can see, but not listed on public timelines' />}\n                checked={settings.get('defaultPrivacy') === 'unlisted'}\n                value='unlisted'\n              />\n              <RadioItem\n                label={<FormattedMessage id='preferences.options.privacy_followers_only' defaultMessage='Followers-only' />}\n                hint={<FormattedMessage id='preferences.hints.privacy_followers_only' defaultMessage='Only show to followers' />}\n                checked={settings.get('defaultPrivacy') === 'private'}\n                value='private'\n              />\n            </RadioGroup>\n          </FieldsGroup>\n\n          <FieldsGroup>\n            <RadioGroup\n              label={<FormattedMessage id='preferences.fields.content_type_label' defaultMessage='Post format' />}\n              onChange={this.onDefaultContentTypeChange}\n            >\n              <RadioItem\n                label={<FormattedMessage id='preferences.options.content_type_plaintext' defaultMessage='Plain text' />}\n                checked={settings.get('defaultContentType') === 'text/plain'}\n                value='text/plain'\n              />\n              <RadioItem\n                label={<FormattedMessage id='preferences.options.content_type_markdown' defaultMessage='Markdown' />}\n                hint={<FormattedMessage id='preferences.hints.content_type_markdown' defaultMessage='Warning: experimental!' />}\n                checked={settings.get('defaultContentType') === 'text/markdown'}\n                value='text/markdown'\n              />\n            </RadioGroup>\n          </FieldsGroup>\n\n          <FieldsGroup>\n            <SettingsCheckbox\n              label={<FormattedMessage id='preferences.fields.unfollow_modal_label' defaultMessage='Show confirmation dialog before unfollowing someone' />}\n              path={['unfollowModal']}\n            />\n            <SettingsCheckbox\n              label={<FormattedMessage id='preferences.fields.boost_modal_label' defaultMessage='Show confirmation dialog before reposting' />}\n              path={['boostModal']}\n            />\n            <SettingsCheckbox\n              label={<FormattedMessage id='preferences.fields.delete_modal_label' defaultMessage='Show confirmation dialog before deleting a post' />}\n              path={['deleteModal']}\n            />\n          </FieldsGroup>\n\n          <FieldsGroup>\n            <SettingsCheckbox\n              label={<FormattedMessage id='preferences.fields.auto_play_gif_label' defaultMessage='Auto-play animated GIFs' />}\n              path={['autoPlayGif']}\n            />\n            <SettingsCheckbox\n              label={<FormattedMessage id='preferences.fields.expand_spoilers_label' defaultMessage='Always expand posts marked with content warnings' />}\n              path={['expandSpoilers']}\n            />\n            <SettingsCheckbox\n              label={<FormattedMessage id='preferences.fields.reduce_motion_label' defaultMessage='Reduce motion in animations' />}\n              path={['reduceMotion']}\n            />\n            <SettingsCheckbox\n              label={<FormattedMessage id='preferences.fields.system_font_label' defaultMessage=\"Use system's default font\" />}\n              path={['systemFont']}\n            />\n            <div className='dyslexic'>\n              <SettingsCheckbox\n                label={<FormattedMessage id='preferences.fields.dyslexic_font_label' defaultMessage='Dyslexic mode' />}\n                path={['dyslexicFont']}\n              />\n            </div>\n            <SettingsCheckbox\n              label={<FormattedMessage id='preferences.fields.halloween_label' defaultMessage='Halloween mode' />}\n              hint={<FormattedMessage id='preferences.hints.halloween' defaultMessage='Beware: SPOOKY! Supports light/dark toggle.' />}\n              path={['halloween']}\n            />\n            <SettingsCheckbox\n              label={<FormattedMessage id='preferences.fields.demetricator_label' defaultMessage='Use Demetricator' />}\n              hint={<FormattedMessage id='preferences.hints.demetricator' defaultMessage='Decrease social media anxiety by hiding all numbers from the site.' />}\n              path={['demetricator']}\n            />\n          </FieldsGroup>\n        </SimpleForm>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
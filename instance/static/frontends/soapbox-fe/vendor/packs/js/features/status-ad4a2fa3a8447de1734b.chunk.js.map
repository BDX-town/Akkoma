{"version":3,"sources":["webpack:///./app/soapbox/features/status/components/status_interaction_bar.js","webpack:///./app/soapbox/features/status/components/detailed_status.js","webpack:///./app/soapbox/features/status/components/action_bar.js","webpack:///./app/soapbox/features/status/index.js"],"names":["StatusInteractionBar","connect","state","allowedEmoji","getSoapboxConfig","get","status","props","reduceEmoji","getIn","reverse","Link","to","className","id","value","render","emojiReacts","this","getNormalizedReacts","count","reduce","acc","cur","repost","getRepost","map","e","i","dangerouslySetInnerHTML","__html","emojify","ImmutablePureComponent","ImmutablePropTypes","me","SoapboxPropTypes","list","DetailedStatus","height","media","startTime","onOpenVideo","onToggleHidden","c","node","_measureHeight","href","preventDefault","target","nodeName","parentNode","window","open","heightJustChanged","measureHeight","scheduleIdleTask","setState","Math","ceil","scrollHeight","onHeightChange","componentDidUpdate","prevProps","prevState","outerStyle","boxSizing","compact","favicon","domain","getDomain","video","audio","poll","statusTypeIcon","pollId","size","preview","blurhash","src","alt","aspectRatio","width","inline","handleOpenVideo","sensitive","visible","showMedia","onToggleVisibility","onToggleMediaVisibility","standalone","onOpenMedia","length","card","style","ref","setRef","classNames","NavLink","accountId","account","title","expanded","onExpandedToggle","handleExpandedToggle","rel","Date","hour12","year","month","day","hour","minute","router","PropTypes","object","func","isRequired","bool","string","messages","defineMessages","delete","redraft","direct","mention","reply","reblog","reblog_private","cancel_reblog_private","cannot_reblog","favourite","mute","muteConversation","unmuteConversation","block","report","share","pin","unpin","embed","admin_account","admin_status","copy","bookmark","unbookmark","deactivateUser","deleteUser","deleteStatus","markStatusSensitive","markStatusNotSensitive","ActionBar","emojiSelectorVisible","onReply","onOpenUnauthorizedModal","onReblog","onBookmark","onFavourite","isUserTouching","meEmojiReact","getReactForStatus","handleReactClick","emoji","onEmojiReact","onDelete","context","history","onDirect","onMention","onMute","onMuteConversation","onBlock","onReport","onPin","navigator","text","url","onEmbed","textarea","document","createElement","textContent","position","body","appendChild","select","execCommand","removeChild","onDeactivateUser","onDeleteUser","onToggleStatusSensitivity","onDeleteStatus","componentDidMount","addEventListener","contains","intl","isStaff","publicStatus","includes","mutingConversation","menu","push","formatMessage","action","handleCopy","handleBookmarkClick","handlePinClick","handleReblogClick","handleConversationMuteClick","handleDeleteClick","handleRedraftClick","name","handleMentionClick","handleMuteClick","handleBlockClick","handleReport","handleDeactivateUser","handleDeleteUser","handleToggleStatusSensitivity","handleDeleteStatus","shareButton","icon","onClick","handleShare","replyIcon","reblogIcon","reblog_disabled","handleReplyClick","disabled","active","onMouseEnter","handleLikeButtonHover","onMouseLeave","handleLikeButtonLeave","onReact","animate","Boolean","handleLikeButtonClick","items","direction","React","PureComponent","injectIntl","dispatch","openModal","deleteConfirm","deleteMessage","redraftConfirm","redraftMessage","blockConfirm","revealAll","hideAll","detailedStatus","replyConfirm","replyMessage","blockAndReport","Status","getStatus","makeGetStatus","params","statusId","username","ancestorsIds","Immutable","List","descendantsIds","withMutations","mutable","unshift","ids","shift","replies","forEach","askReplyConfirmation","trim","displayMedia","getSettings","fullscreen","defaultMediaVisibility","loadedStatusId","undefined","simpleEmojiReact","unfavourite","message","confirm","onConfirm","replyCompose","_","getState","boostModal","unreblog","shiftKey","handleModalReblog","withRedraft","deleteModal","directCompose","mentionCompose","index","time","initMuteModal","unmuteStatus","muteStatus","revealStatus","hideStatus","statusIds","concat","toJS","defaultMessage","values","blockAccount","secondary","onSecondary","initReport","deactivateUserModal","deleteUserModal","toggleStatusSensitivityModal","deleteStatusModal","handleMoveUp","handleMoveDown","handleFavouriteClick","handleToggleHidden","handleToggleMediaVisibility","_selectChild","indexOf","isFullscreen","fetchStatus","attachFullscreenListener","onFullScreenChange","align_top","container","element","querySelectorAll","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","renderTombstone","renderStatus","onMoveUp","onMoveDown","contextType","renderChildren","endsWith","_scrolledIntoView","querySelector","requestAnimationFrame","componentWillUnmount","detachFullscreenListener","ancestors","descendants","handlers","moveUp","handleHotkeyMoveUp","moveDown","handleHotkeyMoveDown","handleHotkeyReply","handleHotkeyFavourite","boost","handleHotkeyBoost","handleHotkeyMention","openProfile","handleHotkeyOpenProfile","toggleHidden","handleHotkeyToggleHidden","toggleSensitive","handleHotkeyToggleSensitive","label","extraButton","aria-label","handleToggleAll","aria-pressed","tabIndex","textForScreenReader","handleOpenMedia","handleEmojiReactClick","handleDirectClick","handlePin","handleBookmark","handleEmbed"],"mappings":"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","file":"js/features/status-ad4a2fa3a8447de1734b.chunk.js","sourcesContent":["import React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\nimport { FormattedNumber } from 'react-intl';\nimport emojify from 'soapbox/features/emoji/emoji';\nimport { reduceEmoji } from 'soapbox/utils/emoji_reacts';\nimport SoapboxPropTypes from 'soapbox/utils/soapbox_prop_types';\nimport { Link } from 'react-router-dom';\nimport Icon from 'soapbox/components/icon';\nimport { getSoapboxConfig } from 'soapbox/actions/soapbox';\n\nconst mapStateToProps = state => ({\n  allowedEmoji: getSoapboxConfig(state).get('allowedEmoji'),\n});\n\nexport default @connect(mapStateToProps)\nclass StatusInteractionBar extends ImmutablePureComponent {\n\n  static propTypes = {\n    status: ImmutablePropTypes.map,\n    me: SoapboxPropTypes.me,\n    allowedEmoji: ImmutablePropTypes.list,\n  }\n\n  getNormalizedReacts = () => {\n    const { status } = this.props;\n    return reduceEmoji(\n      status.getIn(['pleroma', 'emoji_reactions']),\n      status.get('favourites_count'),\n      status.get('favourited'),\n      this.props.allowedEmoji,\n    ).reverse();\n  }\n\n  getRepost = () => {\n    const { status } = this.props;\n    if (status.get('reblogs_count')) {\n      return (\n        <Link to={`/@${status.getIn(['account', 'acct'])}/posts/${status.get('id')}/reblogs`} className='emoji-react emoji-react--reblogs'>\n          <Icon id='retweet' />\n          <span className='emoji-reacts__count'>\n            <FormattedNumber value={status.get('reblogs_count')} />\n          </span>\n        </Link>\n      );\n    }\n\n    return '';\n  }\n\n  render() {\n    const emojiReacts = this.getNormalizedReacts();\n    const count = emojiReacts.reduce((acc, cur) => (\n      acc + cur.get('count')\n    ), 0);\n    const repost = this.getRepost();\n\n    const EmojiReactsContainer = () => (\n      <div className='emoji-reacts-container'>\n        <div className='emoji-reacts'>\n          {emojiReacts.map((e, i) => (\n            <span className='emoji-react' key={i}>\n              <span\n                className='emoji-react__emoji'\n                dangerouslySetInnerHTML={{ __html: emojify(e.get('name')) }}\n              />\n              <span className='emoji-react__count'>{e.get('count')}</span>\n            </span>\n          ))}\n        </div>\n        <div className='emoji-reacts__count'>\n          {count}\n        </div>\n      </div>\n    );\n\n    return (\n      <div className='status-interaction-bar'>\n        {count > 0 && <EmojiReactsContainer />}\n        {repost}\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Avatar from '../../../components/avatar';\nimport DisplayName from '../../../components/display_name';\nimport StatusContent from '../../../components/status_content';\nimport MediaGallery from '../../../components/media_gallery';\nimport { Link, NavLink } from 'react-router-dom';\nimport { FormattedDate } from 'react-intl';\nimport Card from './card';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport Video from '../../video';\nimport Audio from '../../audio';\nimport scheduleIdleTask from '../../ui/util/schedule_idle_task';\nimport classNames from 'classnames';\nimport Icon from 'soapbox/components/icon';\nimport PollContainer from 'soapbox/containers/poll_container';\nimport StatusInteractionBar from './status_interaction_bar';\nimport { getDomain } from 'soapbox/utils/accounts';\nimport HoverRefWrapper from 'soapbox/components/hover_ref_wrapper';\n\nexport default class DetailedStatus extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map,\n    onOpenMedia: PropTypes.func.isRequired,\n    onOpenVideo: PropTypes.func.isRequired,\n    onToggleHidden: PropTypes.func.isRequired,\n    measureHeight: PropTypes.bool,\n    onHeightChange: PropTypes.func,\n    domain: PropTypes.string,\n    compact: PropTypes.bool,\n    showMedia: PropTypes.bool,\n    onToggleMediaVisibility: PropTypes.func,\n  };\n\n  state = {\n    height: null,\n  };\n\n  handleOpenVideo = (media, startTime) => {\n    this.props.onOpenVideo(media, startTime);\n  }\n\n  handleExpandedToggle = () => {\n    this.props.onToggleHidden(this.props.status);\n  }\n\n  _measureHeight(heightJustChanged) {\n    if (this.props.measureHeight && this.node) {\n      scheduleIdleTask(() => this.node && this.setState({ height: Math.ceil(this.node.scrollHeight) + 1 }));\n\n      if (this.props.onHeightChange && heightJustChanged) {\n        this.props.onHeightChange();\n      }\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n    this._measureHeight();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this._measureHeight(prevState.height !== this.state.height);\n  }\n\n  handleModalLink = e => {\n    e.preventDefault();\n\n    let href;\n\n    if (e.target.nodeName !== 'A') {\n      href = e.target.parentNode.href;\n    } else {\n      href = e.target.href;\n    }\n\n    window.open(href, 'soapbox-intent', 'width=445,height=600,resizable=no,menubar=no,status=no,scrollbars=yes');\n  }\n\n  render() {\n    const status = (this.props.status && this.props.status.get('reblog')) ? this.props.status.get('reblog') : this.props.status;\n    const outerStyle = { boxSizing: 'border-box' };\n    const { compact } = this.props;\n    const favicon = status.getIn(['account', 'pleroma', 'favicon']);\n    const domain = getDomain(status.get('account'));\n\n    if (!status) {\n      return null;\n    }\n\n    let media           = '';\n    let poll = '';\n    let statusTypeIcon = '';\n\n    if (this.props.measureHeight) {\n      outerStyle.height = `${this.state.height}px`;\n    }\n\n    if (status.get('poll')) {\n      poll = <PollContainer pollId={status.get('poll')} />;\n    }\n    if (status.get('media_attachments').size > 0) {\n      if (status.getIn(['media_attachments', 0, 'type']) === 'video') {\n        const video = status.getIn(['media_attachments', 0]);\n\n        media = (\n          <Video\n            preview={video.get('preview_url')}\n            blurhash={video.get('blurhash')}\n            src={video.get('url')}\n            alt={video.get('description')}\n            aspectRatio={video.getIn(['meta', 'original', 'aspect'])}\n            width={300}\n            height={150}\n            inline\n            onOpenVideo={this.handleOpenVideo}\n            sensitive={status.get('sensitive')}\n            visible={this.props.showMedia}\n            onToggleVisibility={this.props.onToggleMediaVisibility}\n          />\n        );\n      } else if (status.getIn(['media_attachments', 0, 'type']) === 'audio' && status.get('media_attachments').size === 1) {\n        const audio = status.getIn(['media_attachments', 0]);\n\n        media = (\n          <Audio\n            src={audio.get('url')}\n            alt={audio.get('description')}\n            inline\n            sensitive={status.get('sensitive')}\n            visible={this.props.showMedia}\n            onToggleVisibility={this.props.onToggleMediaVisibility}\n          />\n        );\n      } else {\n        media = (\n          <MediaGallery\n            standalone\n            sensitive={status.get('sensitive')}\n            media={status.get('media_attachments')}\n            height={300}\n            onOpenMedia={this.props.onOpenMedia}\n            visible={this.props.showMedia}\n            onToggleVisibility={this.props.onToggleMediaVisibility}\n          />\n        );\n      }\n    } else if (status.get('spoiler_text').length === 0) {\n      media = <Card onOpenMedia={this.props.onOpenMedia} card={status.get('card', null)} />;\n    }\n\n    if (status.get('visibility') === 'direct') {\n      statusTypeIcon = <Icon id='envelope' />;\n    } else if (status.get('visibility') === 'private') {\n      statusTypeIcon = <Icon id='lock' />;\n    }\n\n    return (\n      <div style={outerStyle}>\n        <div ref={this.setRef} className={classNames('detailed-status', { compact })}>\n          <div className='detailed-status__profile'>\n            <div className='detailed-status__display-name'>\n              <NavLink to={`/@${status.getIn(['account', 'acct'])}`}>\n                <div className='detailed-status__display-avatar'>\n                  <HoverRefWrapper accountId={status.getIn(['account', 'id'])}>\n                    <Avatar account={status.get('account')} size={48} />\n                  </HoverRefWrapper>\n                </div>\n              </NavLink>\n              <DisplayName account={status.get('account')}>\n                <HoverRefWrapper accountId={status.getIn(['account', 'id'])}>\n                  <NavLink className='floating-link' to={`/@${status.getIn(['account', 'acct'])}`} title={status.getIn(['account', 'acct'])} />\n                </HoverRefWrapper>\n              </DisplayName>\n            </div>\n          </div>\n\n          {status.get('group') && (\n            <div className='status__meta'>\n              Posted in <NavLink to={`/groups/${status.getIn(['group', 'id'])}`}>{status.getIn(['group', 'title'])}</NavLink>\n            </div>\n          )}\n\n          <StatusContent status={status} expanded={!status.get('hidden')} onExpandedToggle={this.handleExpandedToggle} />\n\n          {media}\n          {poll}\n\n          <div className='detailed-status__meta'>\n            <StatusInteractionBar status={status} />\n            <div>\n              {favicon &&\n                <div className='status__favicon'>\n                  <Link to={`/timeline/${domain}`}>\n                    <img src={favicon} alt='' title={domain} />\n                  </Link>\n                </div>}\n\n              {statusTypeIcon}<a className='detailed-status__datetime' href={status.get('url')} target='_blank' rel='noopener'>\n                <FormattedDate value={new Date(status.get('created_at'))} hour12={false} year='numeric' month='short' day='2-digit' hour='2-digit' minute='2-digit' />\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { openModal } from '../../../actions/modal';\nimport PropTypes from 'prop-types';\nimport SoapboxPropTypes from 'soapbox/utils/soapbox_prop_types';\nimport IconButton from '../../../components/icon_button';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport DropdownMenuContainer from '../../../containers/dropdown_menu_container';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { isStaff } from 'soapbox/utils/accounts';\nimport { isUserTouching } from 'soapbox/is_mobile';\nimport EmojiSelector from 'soapbox/components/emoji_selector';\nimport { getReactForStatus } from 'soapbox/utils/emoji_reacts';\n\nconst messages = defineMessages({\n  delete: { id: 'status.delete', defaultMessage: 'Delete' },\n  redraft: { id: 'status.redraft', defaultMessage: 'Delete & re-draft' },\n  direct: { id: 'status.direct', defaultMessage: 'Direct message @{name}' },\n  mention: { id: 'status.mention', defaultMessage: 'Mention @{name}' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  reblog: { id: 'status.reblog', defaultMessage: 'Repost' },\n  reblog_private: { id: 'status.reblog_private', defaultMessage: 'Repost to original audience' },\n  cancel_reblog_private: { id: 'status.cancel_reblog_private', defaultMessage: 'Un-repost' },\n  cannot_reblog: { id: 'status.cannot_reblog', defaultMessage: 'This post cannot be reposted' },\n  favourite: { id: 'status.favourite', defaultMessage: 'Like' },\n  mute: { id: 'status.mute', defaultMessage: 'Mute @{name}' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n  block: { id: 'status.block', defaultMessage: 'Block @{name}' },\n  report: { id: 'status.report', defaultMessage: 'Report @{name}' },\n  share: { id: 'status.share', defaultMessage: 'Share' },\n  pin: { id: 'status.pin', defaultMessage: 'Pin on profile' },\n  unpin: { id: 'status.unpin', defaultMessage: 'Unpin from profile' },\n  embed: { id: 'status.embed', defaultMessage: 'Embed' },\n  admin_account: { id: 'status.admin_account', defaultMessage: 'Open moderation interface for @{name}' },\n  admin_status: { id: 'status.admin_status', defaultMessage: 'Open this post in the moderation interface' },\n  copy: { id: 'status.copy', defaultMessage: 'Copy link to post' },\n  bookmark: { id: 'status.bookmark', defaultMessage: 'Bookmark' },\n  unbookmark: { id: 'status.unbookmark', defaultMessage: 'Remove bookmark' },\n  deactivateUser: { id: 'admin.users.actions.deactivate_user', defaultMessage: 'Deactivate @{name}' },\n  deleteUser: { id: 'admin.users.actions.delete_user', defaultMessage: 'Delete @{name}' },\n  deleteStatus: { id: 'admin.statuses.actions.delete_status', defaultMessage: 'Delete post' },\n  markStatusSensitive: { id: 'admin.statuses.actions.mark_status_sensitive', defaultMessage: 'Mark post sensitive' },\n  markStatusNotSensitive: { id: 'admin.statuses.actions.mark_status_not_sensitive', defaultMessage: 'Mark post not sensitive' },\n});\n\nconst mapStateToProps = state => {\n  const me = state.get('me');\n  return {\n    me,\n    isStaff: isStaff(state.getIn(['accounts', me])),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onOpenUnauthorizedModal() {\n    dispatch(openModal('UNAUTHORIZED'));\n  },\n});\n\nclass ActionBar extends React.PureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    status: ImmutablePropTypes.map.isRequired,\n    onReply: PropTypes.func.isRequired,\n    onReblog: PropTypes.func.isRequired,\n    onFavourite: PropTypes.func.isRequired,\n    onEmojiReact: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onBookmark: PropTypes.func,\n    onDirect: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    onMute: PropTypes.func,\n    onMuteConversation: PropTypes.func,\n    onBlock: PropTypes.func,\n    onReport: PropTypes.func,\n    onPin: PropTypes.func,\n    onEmbed: PropTypes.func,\n    onDeactivateUser: PropTypes.func,\n    onDeleteUser: PropTypes.func,\n    onDeleteStatus: PropTypes.func,\n    onToggleStatusSensitivity: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n    onOpenUnauthorizedModal: PropTypes.func.isRequired,\n    me: SoapboxPropTypes.me,\n    isStaff: PropTypes.bool.isRequired,\n    allowedEmoji: ImmutablePropTypes.list,\n  };\n\n  static defaultProps = {\n    isStaff: false,\n  }\n\n  state = {\n    emojiSelectorVisible: false,\n  }\n\n  handleReplyClick = () => {\n    const { me } = this.props;\n    if (me) {\n      this.props.onReply(this.props.status);\n    } else {\n      this.props.onOpenUnauthorizedModal();\n    }\n  }\n\n  handleReblogClick = (e) => {\n    const { me } = this.props;\n    if (me) {\n      this.props.onReblog(this.props.status, e);\n    } else {\n      this.props.onOpenUnauthorizedModal();\n    }\n  }\n\n  handleBookmarkClick = () => {\n    this.props.onBookmark(this.props.status);\n  }\n\n  handleFavouriteClick = () => {\n    const { me } = this.props;\n    if (me) {\n      this.props.onFavourite(this.props.status);\n    } else {\n      this.props.onOpenUnauthorizedModal();\n    }\n  }\n\n  handleLikeButtonHover = e => {\n    if (!isUserTouching()) this.setState({ emojiSelectorVisible: true });\n  }\n\n  handleLikeButtonLeave = e => {\n    if (!isUserTouching()) this.setState({ emojiSelectorVisible: false });\n  }\n\n  handleLikeButtonClick = e => {\n    const meEmojiReact = getReactForStatus(this.props.status, this.props.allowedEmoji) || '👍';\n    if (isUserTouching()) {\n      if (this.state.emojiSelectorVisible) {\n        this.handleReactClick(meEmojiReact)();\n      } else {\n        this.setState({ emojiSelectorVisible: true });\n      }\n    } else {\n      this.handleReactClick(meEmojiReact)();\n    }\n  }\n\n  handleReactClick = emoji => {\n    return e => {\n      const { me } = this.props;\n      if (me) {\n        this.props.onEmojiReact(this.props.status, emoji);\n      } else {\n        this.props.onOpenUnauthorizedModal();\n      }\n      this.setState({ emojiSelectorVisible: false });\n    };\n  }\n\n  handleDeleteClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history);\n  }\n\n  handleRedraftClick = () => {\n    this.props.onDelete(this.props.status, this.context.router.history, true);\n  }\n\n  handleDirectClick = () => {\n    this.props.onDirect(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMentionClick = () => {\n    this.props.onMention(this.props.status.get('account'), this.context.router.history);\n  }\n\n  handleMuteClick = () => {\n    this.props.onMute(this.props.status.get('account'));\n  }\n\n  handleConversationMuteClick = () => {\n    this.props.onMuteConversation(this.props.status);\n  }\n\n  handleBlockClick = () => {\n    this.props.onBlock(this.props.status);\n  }\n\n  handleReport = () => {\n    this.props.onReport(this.props.status);\n  }\n\n  handlePinClick = () => {\n    this.props.onPin(this.props.status);\n  }\n\n  handleShare = () => {\n    navigator.share({\n      text: this.props.status.get('search_index'),\n      url: this.props.status.get('url'),\n    });\n  }\n\n  handleEmbed = () => {\n    this.props.onEmbed(this.props.status);\n  }\n\n  handleCopy = () => {\n    const url      = this.props.status.get('url');\n    const textarea = document.createElement('textarea');\n\n    textarea.textContent    = url;\n    textarea.style.position = 'fixed';\n\n    document.body.appendChild(textarea);\n\n    try {\n      textarea.select();\n      document.execCommand('copy');\n    } catch (e) {\n\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n\n  handleDeactivateUser = () => {\n    this.props.onDeactivateUser(this.props.status);\n  }\n\n  handleDeleteUser = () => {\n    this.props.onDeleteUser(this.props.status);\n  }\n\n  handleToggleStatusSensitivity = () => {\n    this.props.onToggleStatusSensitivity(this.props.status);\n  }\n\n  handleDeleteStatus = () => {\n    this.props.onDeleteStatus(this.props.status);\n  }\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  componentDidMount() {\n    document.addEventListener('click', e => {\n      if (this.node && !this.node.contains(e.target))\n        this.setState({ emojiSelectorVisible: false });\n    });\n  }\n\n  render() {\n    const { status, intl, me, isStaff, allowedEmoji } = this.props;\n    const { emojiSelectorVisible } = this.state;\n\n    const publicStatus = ['public', 'unlisted'].includes(status.get('visibility'));\n    const mutingConversation = status.get('muted');\n    const meEmojiReact = getReactForStatus(status, allowedEmoji);\n\n    let menu = [];\n\n    if (publicStatus) {\n      menu.push({ text: intl.formatMessage(messages.copy), action: this.handleCopy });\n      // menu.push({ text: intl.formatMessage(messages.embed), action: this.handleEmbed });\n    }\n\n    menu.push({ text: intl.formatMessage(status.get('bookmarked') ? messages.unbookmark : messages.bookmark), action: this.handleBookmarkClick });\n\n    menu.push(null);\n\n    if (me === status.getIn(['account', 'id'])) {\n      if (publicStatus) {\n        menu.push({ text: intl.formatMessage(status.get('pinned') ? messages.unpin : messages.pin), action: this.handlePinClick });\n      } else {\n        if (status.get('visibility') === 'private') {\n          menu.push({ text: intl.formatMessage(status.get('reblogged') ? messages.cancel_reblog_private : messages.reblog_private), action: this.handleReblogClick });\n        }\n      }\n\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(mutingConversation ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMuteClick });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDeleteClick });\n      menu.push({ text: intl.formatMessage(messages.redraft), action: this.handleRedraftClick });\n    } else {\n      menu.push({ text: intl.formatMessage(messages.mention, { name: status.getIn(['account', 'username']) }), action: this.handleMentionClick });\n      //menu.push({ text: intl.formatMessage(messages.direct, { name: status.getIn(['account', 'username']) }), action: this.handleDirectClick });\n      menu.push(null);\n      menu.push({ text: intl.formatMessage(messages.mute, { name: status.getIn(['account', 'username']) }), action: this.handleMuteClick });\n      menu.push({ text: intl.formatMessage(messages.block, { name: status.getIn(['account', 'username']) }), action: this.handleBlockClick });\n      menu.push({ text: intl.formatMessage(messages.report, { name: status.getIn(['account', 'username']) }), action: this.handleReport });\n      if (isStaff) {\n        menu.push(null);\n        menu.push({ text: intl.formatMessage(messages.admin_account, { name: status.getIn(['account', 'username']) }), href: `/pleroma/admin/#/users/${status.getIn(['account', 'id'])}/` });\n        // menu.push({ text: intl.formatMessage(messages.admin_status), href: `/admin/accounts/${status.getIn(['account', 'id'])}/statuses/${status.get('id')}` });\n        menu.push({ text: intl.formatMessage(messages.deactivateUser, { name: status.getIn(['account', 'username']) }), action: this.handleDeactivateUser });\n        menu.push({ text: intl.formatMessage(messages.deleteUser, { name: status.getIn(['account', 'username']) }), action: this.handleDeleteUser });\n        menu.push({ text: intl.formatMessage(status.get('sensitive') === false ? messages.markStatusSensitive : messages.markStatusNotSensitive), action: this.handleToggleStatusSensitivity });\n        menu.push({ text: intl.formatMessage(messages.deleteStatus), action: this.handleDeleteStatus });\n      }\n    }\n\n    const shareButton = ('share' in navigator) && status.get('visibility') === 'public' && (\n      <div className='detailed-status__button'><IconButton title={intl.formatMessage(messages.share)} icon='share-alt' onClick={this.handleShare} /></div>\n    );\n\n    let replyIcon;\n    if (status.get('in_reply_to_id', null) === null) {\n      replyIcon = 'reply';\n    } else {\n      replyIcon = 'reply-all';\n    }\n\n    let reblogIcon = 'retweet';\n    if (status.get('visibility') === 'direct') reblogIcon = 'envelope';\n    else if (status.get('visibility') === 'private') reblogIcon = 'lock';\n\n    let reblog_disabled = (status.get('visibility') === 'direct' || status.get('visibility') === 'private');\n\n    return (\n      <div className='detailed-status__action-bar'>\n        <div className='detailed-status__button'>\n          <IconButton\n            title={intl.formatMessage(messages.reply)}\n            icon={status.get('in_reply_to_account_id') === status.getIn(['account', 'id']) ? 'reply' : replyIcon}\n            onClick={this.handleReplyClick}\n            text={intl.formatMessage(messages.reply)}\n          />\n        </div>\n        <div className='detailed-status__button'>\n          <IconButton\n            disabled={reblog_disabled}\n            active={status.get('reblogged')}\n            title={reblog_disabled ? intl.formatMessage(messages.cannot_reblog) : intl.formatMessage(messages.reblog)}\n            icon={reblogIcon}\n            onClick={this.handleReblogClick}\n            text={intl.formatMessage(messages.reblog)}\n          />\n        </div>\n        <div\n          className='detailed-status__button detailed-status__button--favourite'\n          onMouseEnter={this.handleLikeButtonHover}\n          onMouseLeave={this.handleLikeButtonLeave}\n          ref={this.setRef}\n        >\n          <EmojiSelector onReact={this.handleReactClick} visible={emojiSelectorVisible} />\n          <IconButton\n            className='star-icon'\n            animate\n            active={Boolean(meEmojiReact)}\n            title={intl.formatMessage(messages.favourite)}\n            icon='thumbs-up'\n            emoji={meEmojiReact}\n            text={intl.formatMessage(messages.favourite)}\n            onClick={this.handleLikeButtonClick}\n          />\n        </div>\n        {shareButton}\n\n        <div className='detailed-status__action-bar-dropdown'>\n          <DropdownMenuContainer size={18} icon='ellipsis-h' items={menu} direction='left' title='More' />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ActionBar));\n","import Immutable from 'immutable';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { fetchStatus } from '../../actions/statuses';\nimport MissingIndicator from '../../components/missing_indicator';\nimport DetailedStatus from './components/detailed_status';\nimport ActionBar from './components/action_bar';\nimport Column from '../ui/components/column';\nimport {\n  favourite,\n  unfavourite,\n  reblog,\n  unreblog,\n  bookmark,\n  unbookmark,\n  pin,\n  unpin,\n} from '../../actions/interactions';\nimport { simpleEmojiReact } from '../../actions/emoji_reacts';\nimport {\n  replyCompose,\n  mentionCompose,\n  directCompose,\n} from '../../actions/compose';\nimport { blockAccount } from '../../actions/accounts';\nimport {\n  muteStatus,\n  unmuteStatus,\n  deleteStatus,\n  hideStatus,\n  revealStatus,\n} from '../../actions/statuses';\nimport { initMuteModal } from '../../actions/mutes';\nimport { initReport } from '../../actions/reports';\nimport { makeGetStatus } from '../../selectors';\nimport ColumnHeader from '../../components/column_header';\nimport StatusContainer from '../../containers/status_container';\nimport { openModal } from '../../actions/modal';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { HotKeys } from 'react-hotkeys';\nimport { attachFullscreenListener, detachFullscreenListener, isFullscreen } from '../ui/util/fullscreen';\nimport { textForScreenReader, defaultMediaVisibility } from '../../components/status';\nimport Icon from 'soapbox/components/icon';\nimport { getSettings } from 'soapbox/actions/settings';\nimport { getSoapboxConfig } from 'soapbox/actions/soapbox';\nimport { deactivateUserModal, deleteUserModal, deleteStatusModal, toggleStatusSensitivityModal } from 'soapbox/actions/moderation';\n\nconst messages = defineMessages({\n  deleteConfirm: { id: 'confirmations.delete.confirm', defaultMessage: 'Delete' },\n  deleteMessage: { id: 'confirmations.delete.message', defaultMessage: 'Are you sure you want to delete this post?' },\n  redraftConfirm: { id: 'confirmations.redraft.confirm', defaultMessage: 'Delete & redraft' },\n  redraftMessage: { id: 'confirmations.redraft.message', defaultMessage: 'Are you sure you want to delete this post and re-draft it? Favorites and reposts will be lost, and replies to the original post will be orphaned.' },\n  blockConfirm: { id: 'confirmations.block.confirm', defaultMessage: 'Block' },\n  revealAll: { id: 'status.show_more_all', defaultMessage: 'Show more for all' },\n  hideAll: { id: 'status.show_less_all', defaultMessage: 'Show less for all' },\n  detailedStatus: { id: 'status.detailed_status', defaultMessage: 'Detailed conversation view' },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n  blockAndReport: { id: 'confirmations.block.block_and_report', defaultMessage: 'Block & Report' },\n});\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  const mapStateToProps = (state, props) => {\n    const status = getStatus(state, {\n      id: props.params.statusId,\n      username: props.params.username,\n    });\n\n    let ancestorsIds = Immutable.List();\n    let descendantsIds = Immutable.List();\n\n    if (status) {\n      ancestorsIds = ancestorsIds.withMutations(mutable => {\n        let id = state.getIn(['contexts', 'inReplyTos', status.get('id')]);\n\n        while (id) {\n          mutable.unshift(id);\n          id = state.getIn(['contexts', 'inReplyTos', id]);\n        }\n      });\n\n      descendantsIds = descendantsIds.withMutations(mutable => {\n        const ids = [status.get('id')];\n\n        while (ids.length > 0) {\n          let id        = ids.shift();\n          const replies = state.getIn(['contexts', 'replies', id]);\n\n          if (status.get('id') !== id) {\n            mutable.push(id);\n          }\n\n          if (replies) {\n            replies.reverse().forEach(reply => {\n              ids.unshift(reply);\n            });\n          }\n        }\n      });\n    }\n\n    return {\n      status,\n      ancestorsIds,\n      descendantsIds,\n      askReplyConfirmation: state.getIn(['compose', 'text']).trim().length !== 0,\n      domain: state.getIn(['meta', 'domain']),\n      me: state.get('me'),\n      displayMedia: getSettings(state).get('displayMedia'),\n      allowedEmoji: getSoapboxConfig(state).get('allowedEmoji'),\n    };\n  };\n\n  return mapStateToProps;\n};\n\nexport default @injectIntl\n@connect(makeMapStateToProps)\nclass Status extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    status: ImmutablePropTypes.map,\n    ancestorsIds: ImmutablePropTypes.list,\n    descendantsIds: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    askReplyConfirmation: PropTypes.bool,\n    domain: PropTypes.string,\n    displayMedia: PropTypes.string,\n  };\n\n  state = {\n    fullscreen: false,\n    showMedia: defaultMediaVisibility(this.props.status, this.props.displayMedia),\n    loadedStatusId: undefined,\n  };\n\n  componentDidMount() {\n    this.props.dispatch(fetchStatus(this.props.params.statusId));\n    attachFullscreenListener(this.onFullScreenChange);\n  }\n\n  handleToggleMediaVisibility = () => {\n    this.setState({ showMedia: !this.state.showMedia });\n  }\n\n  handleEmojiReactClick = (status, emoji) => {\n    this.props.dispatch(simpleEmojiReact(status, emoji));\n  }\n\n  handleFavouriteClick = (status) => {\n    if (status.get('favourited')) {\n      this.props.dispatch(unfavourite(status));\n    } else {\n      this.props.dispatch(favourite(status));\n    }\n  }\n\n  handlePin = (status) => {\n    if (status.get('pinned')) {\n      this.props.dispatch(unpin(status));\n    } else {\n      this.props.dispatch(pin(status));\n    }\n  }\n\n  handleBookmark = (status) => {\n    if (status.get('bookmarked')) {\n      this.props.dispatch(unbookmark(status));\n    } else {\n      this.props.dispatch(bookmark(status));\n    }\n  }\n\n  handleReplyClick = (status) => {\n    let { askReplyConfirmation, dispatch, intl } = this.props;\n    if (askReplyConfirmation) {\n      dispatch(openModal('CONFIRM', {\n        message: intl.formatMessage(messages.replyMessage),\n        confirm: intl.formatMessage(messages.replyConfirm),\n        onConfirm: () => dispatch(replyCompose(status, this.context.router.history)),\n      }));\n    } else {\n      dispatch(replyCompose(status, this.context.router.history));\n    }\n  }\n\n  handleModalReblog = (status) => {\n    this.props.dispatch(reblog(status));\n  }\n\n  handleReblogClick = (status, e) => {\n    this.props.dispatch((_, getState) => {\n      const boostModal = getSettings(getState()).get('boostModal');\n      if (status.get('reblogged')) {\n        this.props.dispatch(unreblog(status));\n      } else {\n        if ((e && e.shiftKey) || !boostModal) {\n          this.handleModalReblog(status);\n        } else {\n          this.props.dispatch(openModal('BOOST', { status, onReblog: this.handleModalReblog }));\n        }\n      }\n    });\n  }\n\n  handleDeleteClick = (status, history, withRedraft = false) => {\n    const { dispatch, intl } = this.props;\n\n    this.props.dispatch((_, getState) => {\n      const deleteModal = getSettings(getState()).get('deleteModal');\n      if (!deleteModal) {\n        dispatch(deleteStatus(status.get('id'), history, withRedraft));\n      } else {\n        dispatch(openModal('CONFIRM', {\n          message: intl.formatMessage(withRedraft ? messages.redraftMessage : messages.deleteMessage),\n          confirm: intl.formatMessage(withRedraft ? messages.redraftConfirm : messages.deleteConfirm),\n          onConfirm: () => dispatch(deleteStatus(status.get('id'), history, withRedraft)),\n        }));\n      }\n    });\n  }\n\n  handleDirectClick = (account, router) => {\n    this.props.dispatch(directCompose(account, router));\n  }\n\n  handleMentionClick = (account, router) => {\n    this.props.dispatch(mentionCompose(account, router));\n  }\n\n  handleOpenMedia = (media, index) => {\n    this.props.dispatch(openModal('MEDIA', { media, index }));\n  }\n\n  handleOpenVideo = (media, time) => {\n    this.props.dispatch(openModal('VIDEO', { media, time }));\n  }\n\n  handleMuteClick = (account) => {\n    this.props.dispatch(initMuteModal(account));\n  }\n\n  handleConversationMuteClick = (status) => {\n    if (status.get('muted')) {\n      this.props.dispatch(unmuteStatus(status.get('id')));\n    } else {\n      this.props.dispatch(muteStatus(status.get('id')));\n    }\n  }\n\n  handleToggleHidden = (status) => {\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(status.get('id')));\n    } else {\n      this.props.dispatch(hideStatus(status.get('id')));\n    }\n  }\n\n  handleToggleAll = () => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n    const statusIds = [status.get('id')].concat(ancestorsIds.toJS(), descendantsIds.toJS());\n\n    if (status.get('hidden')) {\n      this.props.dispatch(revealStatus(statusIds));\n    } else {\n      this.props.dispatch(hideStatus(statusIds));\n    }\n  }\n\n  handleBlockClick = (status) => {\n    const { dispatch, intl } = this.props;\n    const account = status.get('account');\n\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.block.message' defaultMessage='Are you sure you want to block {name}?' values={{ name: <strong>@{account.get('acct')}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockConfirm),\n      onConfirm: () => dispatch(blockAccount(account.get('id'))),\n      secondary: intl.formatMessage(messages.blockAndReport),\n      onSecondary: () => {\n        dispatch(blockAccount(account.get('id')));\n        dispatch(initReport(account, status));\n      },\n    }));\n  }\n\n  handleReport = (status) => {\n    this.props.dispatch(initReport(status.get('account'), status));\n  }\n\n  handleEmbed = (status) => {\n    this.props.dispatch(openModal('EMBED', { url: status.get('url') }));\n  }\n\n  handleDeactivateUser = (status) => {\n    const { dispatch, intl } = this.props;\n    dispatch(deactivateUserModal(intl, status.getIn(['account', 'id'])));\n  }\n\n  handleDeleteUser = (status) => {\n    const { dispatch, intl } = this.props;\n    dispatch(deleteUserModal(intl, status.getIn(['account', 'id'])));\n  }\n\n  handleToggleStatusSensitivity = (status) => {\n    const { dispatch, intl } = this.props;\n    dispatch(toggleStatusSensitivityModal(intl, status.get('id'), status.get('sensitive')));\n  }\n\n  handleDeleteStatus = (status) => {\n    const { dispatch, intl } = this.props;\n    dispatch(deleteStatusModal(intl, status.get('id')));\n  }\n\n  handleHotkeyMoveUp = () => {\n    this.handleMoveUp(this.props.status.get('id'));\n  }\n\n  handleHotkeyMoveDown = () => {\n    this.handleMoveDown(this.props.status.get('id'));\n  }\n\n  handleHotkeyReply = e => {\n    e.preventDefault();\n    this.handleReplyClick(this.props.status);\n  }\n\n  handleHotkeyFavourite = () => {\n    this.handleFavouriteClick(this.props.status);\n  }\n\n  handleHotkeyBoost = () => {\n    this.handleReblogClick(this.props.status);\n  }\n\n  handleHotkeyMention = e => {\n    e.preventDefault();\n    this.handleMentionClick(this.props.status.get('account'));\n  }\n\n  handleHotkeyOpenProfile = () => {\n    this.context.router.history.push(`/@${this.props.status.getIn(['account', 'acct'])}`);\n  }\n\n  handleHotkeyToggleHidden = () => {\n    this.handleToggleHidden(this.props.status);\n  }\n\n  handleHotkeyToggleSensitive = () => {\n    this.handleToggleMediaVisibility();\n  }\n\n  handleMoveUp = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size - 1, true);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index, true);\n      } else {\n        this._selectChild(index - 1, true);\n      }\n    }\n  }\n\n  handleMoveDown = id => {\n    const { status, ancestorsIds, descendantsIds } = this.props;\n\n    if (id === status.get('id')) {\n      this._selectChild(ancestorsIds.size + 1, false);\n    } else {\n      let index = ancestorsIds.indexOf(id);\n\n      if (index === -1) {\n        index = descendantsIds.indexOf(id);\n        this._selectChild(ancestorsIds.size + index + 2, false);\n      } else {\n        this._selectChild(index + 1, false);\n      }\n    }\n  }\n\n  _selectChild(index, align_top) {\n    const container = this.node;\n    const element = container.querySelectorAll('.focusable')[index];\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  renderTombstone(id) {\n    return (\n      <div className='tombstone' key={id}>\n        <p><FormattedMessage id='statuses.tombstone' defaultMessage='One or more posts is unavailable.' /></p>\n      </div>\n    );\n  }\n\n  renderStatus(id) {\n    return (\n      <StatusContainer\n        key={id}\n        id={id}\n        onMoveUp={this.handleMoveUp}\n        onMoveDown={this.handleMoveDown}\n        contextType='thread'\n      />\n    );\n  }\n\n  renderChildren(list) {\n    return list.map(id => {\n      if (id.endsWith('-tombstone')) {\n        return this.renderTombstone(id);\n      } else {\n        return this.renderStatus(id);\n      }\n    });\n  }\n\n  setRef = c => {\n    this.node = c;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { params, status } = this.props;\n    const { ancestorsIds } = prevProps;\n\n    if (params.statusId !== prevProps.params.statusId && params.statusId) {\n      this._scrolledIntoView = false;\n      this.props.dispatch(fetchStatus(params.statusId));\n    }\n\n    if (status && status.get('id') !== prevState.loadedStatusId) {\n      this.setState({ showMedia: defaultMediaVisibility(status), loadedStatusId: status.get('id') });\n    }\n\n    if (this._scrolledIntoView) {\n      return;\n    }\n\n    if (prevProps.status && ancestorsIds && ancestorsIds.size > 0) {\n      const element = this.node.querySelector('.detailed-status');\n\n      window.requestAnimationFrame(() => {\n        element.scrollIntoView(true);\n      });\n      this._scrolledIntoView = true;\n    }\n  }\n\n  componentWillUnmount() {\n    detachFullscreenListener(this.onFullScreenChange);\n  }\n\n  onFullScreenChange = () => {\n    this.setState({ fullscreen: isFullscreen() });\n  }\n\n  render() {\n    let ancestors, descendants;\n    const { status, ancestorsIds, descendantsIds, intl, domain, me } = this.props;\n\n    if (status === null) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    if (ancestorsIds && ancestorsIds.size > 0) {\n      ancestors = <div>{this.renderChildren(ancestorsIds)}</div>;\n    }\n\n    if (descendantsIds && descendantsIds.size > 0) {\n      descendants = <div>{this.renderChildren(descendantsIds)}</div>;\n    }\n\n    const handlers = {\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      reply: this.handleHotkeyReply,\n      favourite: this.handleHotkeyFavourite,\n      boost: this.handleHotkeyBoost,\n      mention: this.handleHotkeyMention,\n      openProfile: this.handleHotkeyOpenProfile,\n      toggleHidden: this.handleHotkeyToggleHidden,\n      toggleSensitive: this.handleHotkeyToggleSensitive,\n    };\n\n    return (\n      <Column label={intl.formatMessage(messages.detailedStatus)}>\n        { me &&\n          <ColumnHeader\n            extraButton={(\n              <button\n                className='column-header__button'\n                title={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)}\n                aria-label={intl.formatMessage(status.get('hidden') ? messages.revealAll : messages.hideAll)}\n                onClick={this.handleToggleAll}\n                aria-pressed={\n                  status.get('hidden') ? 'false' : 'true'}\n              >\n                <Icon id={status.get('hidden') ? 'eye-slash' : 'eye'\n                }\n                />\n              </button>\n            )}\n          />\n        }\n\n        <div ref={this.setRef}>\n          {ancestors}\n\n          <HotKeys handlers={handlers}>\n            <div className={classNames('focusable', 'detailed-status__wrapper')} tabIndex='0' aria-label={textForScreenReader(intl, status, false)}>\n              <DetailedStatus\n                status={status}\n                onOpenVideo={this.handleOpenVideo}\n                onOpenMedia={this.handleOpenMedia}\n                onToggleHidden={this.handleToggleHidden}\n                domain={domain}\n                showMedia={this.state.showMedia}\n                onToggleMediaVisibility={this.handleToggleMediaVisibility}\n              />\n\n              <ActionBar\n                status={status}\n                onReply={this.handleReplyClick}\n                onFavourite={this.handleFavouriteClick}\n                onEmojiReact={this.handleEmojiReactClick}\n                onReblog={this.handleReblogClick}\n                onDelete={this.handleDeleteClick}\n                onDirect={this.handleDirectClick}\n                onMention={this.handleMentionClick}\n                onMute={this.handleMuteClick}\n                onMuteConversation={this.handleConversationMuteClick}\n                onBlock={this.handleBlockClick}\n                onReport={this.handleReport}\n                onPin={this.handlePin}\n                onBookmark={this.handleBookmark}\n                onEmbed={this.handleEmbed}\n                onDeactivateUser={this.handleDeactivateUser}\n                onDeleteUser={this.handleDeleteUser}\n                onToggleStatusSensitivity={this.handleToggleStatusSensitivity}\n                onDeleteStatus={this.handleDeleteStatus}\n                allowedEmoji={this.props.allowedEmoji}\n              />\n            </div>\n          </HotKeys>\n\n          {descendants}\n        </div>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./app/soapbox/components/domain.js","webpack:///./app/soapbox/containers/domain_container.js","webpack:///./app/soapbox/features/domain_blocks/index.js"],"names":["messages","defineMessages","unblockDomain","Account","injectIntl","props","onUnblockDomain","domain","render","this","intl","className","active","icon","title","formatMessage","onClick","handleDomainUnblock","ImmutablePureComponent","PropTypes","string","func","isRequired","object","blockDomainConfirm","connect","dispatch","onBlockDomain","openModal","message","id","defaultMessage","values","confirm","onConfirm","blockDomain","Domain","heading","Blocks","state","domains","getIn","hasMore","expandDomainBlocks","leading","componentDidMount","fetchDomainBlocks","emptyMessage","backBtnSlim","scrollKey","onLoadMore","handleLoadMore","map","params","bool","ImmutablePropTypes","orderedSet"],"mappings":"+QAMMA,EAAWC,YAAe,CAC9BC,cAAc,CAAD,gEAITC,EADUC,a,wMASQ,WACpB,EAAKC,MAAMC,gBAAgB,EAAKD,MAAME,U,sCAGxCC,OAAA,WAAU,IAAD,EACkBC,KAAKJ,MAAtBE,EADD,EACCA,OAAQG,EADT,EACSA,KAEhB,OACE,mBAAKC,UAAU,eAAf,EACE,mBAAKA,UAAU,wBAAf,EACE,oBAAMA,UAAU,4BAAhB,EACE,+BAASJ,IAGX,mBAAKI,UAAU,wBAAf,EACE,YAAC,IAAD,CAAYC,QAAM,EAACC,KAAK,SAASC,MAAOJ,EAAKK,cAAcf,EAASE,cAAe,CAAEK,WAAWS,QAASP,KAAKQ,0B,GAvBpGC,K,0BAED,CACjBX,OAAQY,IAAUC,OAClBd,gBAAiBa,IAAUE,KAAKC,WAChCZ,KAAMS,IAAUI,OAAOD,a,iBCTrBtB,EAAWC,YAAe,CAC9BuB,mBAAmB,CAAD,+EAuBLpB,cAAWqB,kBApBE,WAG1B,OAFwB,iBAAO,KAKN,SAACC,EAAD,OAAahB,EAAb,EAAaA,KAAb,MAAyB,CAClDiB,cADkD,SACpCpB,GACZmB,EAASE,YAAU,UAAW,CAC5BC,QAAS,YAAC,IAAD,CAAkBC,GAAG,qCAAqCC,eAAe,iJAAiJC,OAAQ,CAAEzB,OAAQ,+BAASA,MAC9P0B,QAASvB,EAAKK,cAAcf,EAASwB,oBACrCU,UAAW,kBAAMR,EAASS,YAAY5B,SAI1CD,gBATkD,SASlCC,GACdmB,EAASxB,YAAcK,OAIDkB,CAAiDW,I,+CClB3E,IAAMpC,EAAWC,YAAe,CAC9BoC,QAAQ,CAAD,2DACPnC,cAAc,CAAD,gEAUToC,EAFUb,kBALQ,SAAAc,GAAK,MAAK,CAChCC,QAASD,EAAME,MAAM,CAAC,eAAgB,SAAU,UAChDC,UAAWH,EAAME,MAAM,CAAC,eAAgB,SAAU,W,GAInDrC,a,mMAekB,IAAS,WACxB,EAAKC,MAAMqB,SAASiB,gBACnB,IAAK,CAAEC,SAAS,K,8CANnBC,kBAAA,WACEpC,KAAKJ,MAAMqB,SAASoB,gB,EAOtBtC,OAAA,WAAU,IAAD,EAC4BC,KAAKJ,MAAhCK,EADD,EACCA,KAAM8B,EADP,EACOA,QAASE,EADhB,EACgBA,QAEvB,IAAKF,EACH,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAKN,IAAMO,EAAe,YAAC,IAAD,CAAkBjB,GAAG,6BAA6BC,eAAe,qCAEtF,OACE,YAAC,IAAD,CAAQlB,KAAK,eAAewB,QAAS3B,EAAKK,cAAcf,EAASqC,SAAUW,aAAW,QAAtF,EACE,YAAC,IAAD,CACEC,UAAU,gBACVC,WAAYzC,KAAK0C,eACjBT,QAASA,EACTK,aAAcA,QAJhB,EAMGP,EAAQY,IAAI,SAAA7C,GAAM,OACjB,YAAC,EAAD,CAA8BA,OAAQA,GAAhBA,Q,GAxCbW,K,0BAEA,CACjBmC,OAAQlC,IAAUI,OAAOD,WACzBI,SAAUP,IAAUE,KAAKC,WACzBoB,QAASvB,IAAUmC,KACnBd,QAASe,IAAmBC,WAC5B9C,KAAMS,IAAUI,OAAOD,a","file":"js/features/domain_blocks-3c20e59db466ed963276.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from './icon_button';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nconst messages = defineMessages({\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unhide {domain}' },\n});\n\nexport default @injectIntl\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    domain: PropTypes.string,\n    onUnblockDomain: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleDomainUnblock = () => {\n    this.props.onUnblockDomain(this.props.domain);\n  }\n\n  render() {\n    const { domain, intl } = this.props;\n\n    return (\n      <div className='domain'>\n        <div className='domain__wrapper'>\n          <span className='domain__domain-name'>\n            <strong>{domain}</strong>\n          </span>\n\n          <div className='domain__buttons'>\n            <IconButton active icon='unlock' title={intl.formatMessage(messages.unblockDomain, { domain })} onClick={this.handleDomainUnblock} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { blockDomain, unblockDomain } from '../actions/domain_blocks';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport Domain from '../components/domain';\nimport { openModal } from '../actions/modal';\n\nconst messages = defineMessages({\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Hide entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const mapStateToProps = () => ({});\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onBlockDomain(domain) {\n    dispatch(openModal('CONFIRM', {\n      message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable.' values={{ domain: <strong>{domain}</strong> }} />,\n      confirm: intl.formatMessage(messages.blockDomainConfirm),\n      onConfirm: () => dispatch(blockDomain(domain)),\n    }));\n  },\n\n  onUnblockDomain(domain) {\n    dispatch(unblockDomain(domain));\n  },\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Domain));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { debounce } from 'lodash';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport Column from '../ui/components/column';\nimport DomainContainer from '../../containers/domain_container';\nimport { fetchDomainBlocks, expandDomainBlocks } from '../../actions/domain_blocks';\nimport ScrollableList from '../../components/scrollable_list';\n\nconst messages = defineMessages({\n  heading: { id: 'column.domain_blocks', defaultMessage: 'Hidden domains' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unhide {domain}' },\n});\n\nconst mapStateToProps = state => ({\n  domains: state.getIn(['domain_lists', 'blocks', 'items']),\n  hasMore: !!state.getIn(['domain_lists', 'blocks', 'next']),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasMore: PropTypes.bool,\n    domains: ImmutablePropTypes.orderedSet,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    this.props.dispatch(fetchDomainBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandDomainBlocks());\n  }, 300, { leading: true });\n\n  render() {\n    const { intl, domains, hasMore } = this.props;\n\n    if (!domains) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.domain_blocks' defaultMessage='There are no hidden domains yet.' />;\n\n    return (\n      <Column icon='minus-circle' heading={intl.formatMessage(messages.heading)} backBtnSlim>\n        <ScrollableList\n          scrollKey='domain_blocks'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          emptyMessage={emptyMessage}\n        >\n          {domains.map(domain =>\n            <DomainContainer key={domain} domain={domain} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
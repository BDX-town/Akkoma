{"version":3,"sources":["webpack:///./app/soapbox/features/reblogs/index.js"],"names":["Reblogs","connect","state","props","status","makeGetStatus","getStatus","id","params","statusId","username","accountIds","getIn","componentDidMount","this","dispatch","fetchReblogs","fetchStatus","componentDidUpdate","prevProps","render","emptyMessage","defaultMessage","scrollKey","map","withNote","ImmutablePureComponent","PropTypes","object","isRequired","func","ImmutablePropTypes","orderedSet"],"mappings":"2SA6BMA,EADUC,kBAbQ,SAACC,EAAOC,GAO9B,MAAO,CACLC,OAPgBC,aACHC,CAAUJ,EAAO,CAC9BK,GAAIJ,EAAMK,OAAOC,SACjBC,SAAUP,EAAMK,OAAOE,WAKvBC,WAAYT,EAAMU,MAAM,CAAC,aAAc,eAAgBT,EAAMK,OAAOC,a,gHActEI,kBAAA,WACEC,KAAKX,MAAMY,SAASC,YAAaF,KAAKX,MAAMK,OAAOC,WACnDK,KAAKX,MAAMY,SAASE,YAAYH,KAAKX,MAAMK,OAAOC,Y,EAGpDS,mBAAA,SAAmBC,GAAY,IACrBX,EAAWM,KAAKX,MAAhBK,OACJA,EAAOC,WAAaU,EAAUX,OAAOC,UAAYD,EAAOC,WAC1DU,EAAUJ,SAASC,YAAaR,EAAOC,WACvCU,EAAUJ,SAASE,YAAYT,EAAOC,a,EAI1CW,OAAA,WAAU,IAAD,EACwBN,KAAKX,MAA5BQ,EADD,EACCA,WAAYP,EADb,EACaA,OAEpB,IAAKO,EACH,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAKN,IAAKP,EACH,OACE,YAAC,IAAD,UACE,YAAC,IAAD,KAKN,IAAMiB,EAAe,YAAC,IAAD,CAAkBd,GAAG,uBAAuBe,eAAe,kFAEhF,OACE,YAAC,IAAD,UACE,YAAC,IAAD,CACEC,UAAU,UACVF,aAAcA,QAFhB,EAIGV,EAAWa,IAAI,SAAAjB,GAAE,OAChB,YAAC,IAAD,CAA2BA,GAAIA,EAAIkB,UAAU,GAAtBlB,Q,GAlDbmB,K,0BAED,CACjBlB,OAAQmB,IAAUC,OAAOC,WACzBd,SAAUY,IAAUG,KAAKD,WACzBlB,WAAYoB,IAAmBC,WAC/B5B,OAAQ2B,IAAmBP,M","file":"js/features/reblogs-3a90d7de857b993b1ec5.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport LoadingIndicator from '../../components/loading_indicator';\nimport MissingIndicator from '../../components/missing_indicator';\nimport { fetchReblogs } from '../../actions/interactions';\nimport { fetchStatus } from '../../actions/statuses';\nimport { FormattedMessage } from 'react-intl';\nimport AccountContainer from '../../containers/account_container';\nimport Column from '../ui/components/column';\nimport ScrollableList from '../../components/scrollable_list';\nimport { makeGetStatus } from '../../selectors';\n\nconst mapStateToProps = (state, props) => {\n  const getStatus = makeGetStatus();\n  const status = getStatus(state, {\n    id: props.params.statusId,\n    username: props.params.username,\n  });\n\n  return {\n    status,\n    accountIds: state.getIn(['user_lists', 'reblogged_by', props.params.statusId]),\n  };\n};\n\nexport default @connect(mapStateToProps)\nclass Reblogs extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.orderedSet,\n    status: ImmutablePropTypes.map,\n  };\n\n  componentDidMount() {\n    this.props.dispatch(fetchReblogs(this.props.params.statusId));\n    this.props.dispatch(fetchStatus(this.props.params.statusId));\n  }\n\n  componentDidUpdate(prevProps) {\n    const { params } = this.props;\n    if (params.statusId !== prevProps.params.statusId && params.statusId) {\n      prevProps.dispatch(fetchReblogs(params.statusId));\n      prevProps.dispatch(fetchStatus(params.statusId));\n    }\n  }\n\n  render() {\n    const { accountIds, status } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    if (!status) {\n      return (\n        <Column>\n          <MissingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='status.reblogs.empty' defaultMessage='No one has reposted this post yet. When someone does, they will show up here.' />;\n\n    return (\n      <Column>\n        <ScrollableList\n          scrollKey='reblogs'\n          emptyMessage={emptyMessage}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./app/soapbox/features/admin/components/registration_mode_picker.js","webpack:///./app/soapbox/features/admin/index.js"],"names":["messages","defineMessages","saved","modeFromInstance","instance","get","RegistrationModePicker","connect","state","mode","injectIntl","e","props","dispatch","intl","config","group","key","value","open","tuple","approval","closed","target","updateConfig","then","snackbar","success","formatMessage","catch","render","this","label","id","defaultMessage","onChange","hint","checked","ImmutablePureComponent","heading","Dashboard","v","parseVersion","userCount","getIn","mau","retention","Math","round","icon","backBtnSlim","className","href","sourceCode","version","software","PropTypes","object","isRequired","ImmutablePropTypes","map"],"mappings":"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","file":"js/features/admin-d9998c99d7e9364ff272.chunk.js","sourcesContent":["import React from 'react';\nimport { injectIntl, defineMessages, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport {\n  SimpleForm,\n  FieldsGroup,\n  RadioGroup,\n  RadioItem,\n} from 'soapbox/features/forms';\nimport { updateConfig } from 'soapbox/actions/admin';\nimport snackbar from 'soapbox/actions/snackbar';\n\nconst messages = defineMessages({\n  saved: { id: 'admin.dashboard.settings_saved', defaultMessage: 'Settings saved!' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  mode: modeFromInstance(state.get('instance')),\n});\n\nconst generateConfig = mode => {\n  const configMap = {\n    open: [{ tuple: [':registrations_open', true] }, { tuple: [':account_approval_required', false] }],\n    approval: [{ tuple: [':registrations_open', true] }, { tuple: [':account_approval_required', true] }],\n    closed: [{ tuple: [':registrations_open', false] }],\n  };\n\n  return [{\n    group: ':pleroma',\n    key: ':instance',\n    value: configMap[mode],\n  }];\n};\n\nconst modeFromInstance = instance => {\n  if (instance.get('approval_required') && instance.get('registrations')) return 'approval';\n  return instance.get('registrations') ? 'open' : 'closed';\n};\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass RegistrationModePicker extends ImmutablePureComponent {\n\n  onChange = e => {\n    const { dispatch, intl } = this.props;\n    const config = generateConfig(e.target.value);\n    dispatch(updateConfig(config)).then(() => {\n      dispatch(snackbar.success(intl.formatMessage(messages.saved)));\n    }).catch(() => {});\n  }\n\n  render() {\n    const { mode } = this.props;\n\n    return (\n      <SimpleForm>\n        <FieldsGroup>\n          <RadioGroup\n            label={<FormattedMessage id='admin.dashboard.registration_mode_label' defaultMessage='Registrations' />}\n            onChange={this.onChange}\n          >\n            <RadioItem\n              label={<FormattedMessage id='admin.dashboard.registration_mode.open_label' defaultMessage='Open' />}\n              hint={<FormattedMessage id='admin.dashboard.registration_mode.open_hint' defaultMessage='Anyone can join.' />}\n              checked={mode === 'open'}\n              value='open'\n            />\n            <RadioItem\n              label={<FormattedMessage id='admin.dashboard.registration_mode.approval_label' defaultMessage='Approval Required' />}\n              hint={<FormattedMessage id='admin.dashboard.registration_mode.approval_hint' defaultMessage='Users can sign up, but their account only gets activated when an admin approves it.' />}\n              checked={mode === 'approval'}\n              value='approval'\n            />\n            <RadioItem\n              label={<FormattedMessage id='admin.dashboard.registration_mode.closed_label' defaultMessage='Closed' />}\n              hint={<FormattedMessage id='admin.dashboard.registration_mode.closed_hint' defaultMessage='Nobody can sign up. You can still invite people.' />}\n              checked={mode === 'closed'}\n              value='closed'\n            />\n          </RadioGroup>\n        </FieldsGroup>\n      </SimpleForm>\n    );\n  };\n\n}\n","import React from 'react';\nimport { defineMessages, injectIntl, FormattedMessage, FormattedNumber } from 'react-intl';\nimport { connect } from 'react-redux';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Column from '../ui/components/column';\nimport RegistrationModePicker from './components/registration_mode_picker';\nimport { parseVersion } from 'soapbox/utils/features';\nimport sourceCode from 'soapbox/utils/code';\n\nconst messages = defineMessages({\n  heading: { id: 'column.admin.dashboard', defaultMessage: 'Dashboard' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  instance: state.get('instance'),\n});\n\nexport default @connect(mapStateToProps)\n@injectIntl\nclass Dashboard extends ImmutablePureComponent {\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    instance: ImmutablePropTypes.map.isRequired,\n  };\n\n  render() {\n    const { intl, instance } = this.props;\n    const v = parseVersion(instance.get('version'));\n    const userCount = instance.getIn(['stats', 'user_count']);\n    const mau = instance.getIn(['pleroma', 'stats', 'mau']);\n    const retention = (userCount && mau) ? Math.round(mau / userCount * 100) : null;\n\n    return (\n      <Column icon='tachometer' heading={intl.formatMessage(messages.heading)} backBtnSlim>\n        <div className='dashcounters'>\n          {mau && <div className='dashcounter'>\n            <div>\n              <div className='dashcounter__num'>\n                <FormattedNumber value={mau} />\n              </div>\n              <div className='dashcounter__label'>\n                <FormattedMessage id='admin.dashcounters.mau_label' defaultMessage='monthly active users' />\n              </div>\n            </div>\n          </div>}\n          <div className='dashcounter'>\n            <a href='/pleroma/admin/#/users/index' target='_blank'>\n              <div className='dashcounter__num'>\n                <FormattedNumber value={userCount} />\n              </div>\n              <div className='dashcounter__label'>\n                <FormattedMessage id='admin.dashcounters.user_count_label' defaultMessage='total users' />\n              </div>\n            </a>\n          </div>\n          {retention && <div className='dashcounter'>\n            <div>\n              <div className='dashcounter__num'>\n                {retention}%\n              </div>\n              <div className='dashcounter__label'>\n                <FormattedMessage id='admin.dashcounters.retention_label' defaultMessage='user retention' />\n              </div>\n            </div>\n          </div>}\n          <div className='dashcounter'>\n            <a href='/pleroma/admin/#/statuses/index' target='_blank'>\n              <div className='dashcounter__num'>\n                <FormattedNumber value={instance.getIn(['stats', 'status_count'])} />\n              </div>\n              <div className='dashcounter__label'>\n                <FormattedMessage id='admin.dashcounters.status_count_label' defaultMessage='posts' />\n              </div>\n            </a>\n          </div>\n          <div className='dashcounter'>\n            <div>\n              <div className='dashcounter__num'>\n                <FormattedNumber value={instance.getIn(['stats', 'domain_count'])} />\n              </div>\n              <div className='dashcounter__label'>\n                <FormattedMessage id='admin.dashcounters.domain_count_label' defaultMessage='peers' />\n              </div>\n            </div>\n          </div>\n        </div>\n        <RegistrationModePicker />\n        <div className='dashwidgets'>\n          <div className='dashwidget'>\n            <h4><FormattedMessage id='admin.dashwidgets.software_header' defaultMessage='Software' /></h4>\n            <ul>\n              <li>Soapbox FE <span className='pull-right'>{sourceCode.version}</span></li>\n              <li>{v.software} <span className='pull-right'>{v.version}</span></li>\n            </ul>\n          </div>\n        </div>\n      </Column>\n    );\n  }\n\n}\n"],"sourceRoot":""}